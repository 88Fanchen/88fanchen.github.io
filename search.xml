<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>分析模板资源网站并使用python进行下载</title>
    <url>/posts/378704c3/</url>
    <content><![CDATA[<font color=#999AAA >
侵权删除。
</font>


<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>今天准备在网上找一个web模板，用来做Echarts的数据可视化。寻找模板的过程中像往常一样，遇到了很多的收费网站，一般都是月费年费类型的。然后我就遇到了下面这个网站：</strong><br><img src="https://img-blog.csdnimg.cn/20210104223121512.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"></p>
<a id="more"></a>

<p>在我下载的过程中简单分析了一下，是否可以抓包的方式，获取对应的下载链接，下面<strong>进入我们的正文分析环节。</strong></p>
<p><font color=#999AAA >以下是本篇文章正文内容</p>
<h1 id="一、页面分析"><a href="#一、页面分析" class="headerlink" title="一、页面分析"></a>一、页面分析</h1><p><img src="https://img-blog.csdnimg.cn/20210104223458871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>发现下载模板的a标签中没有存在相应的href属性，一般下载链接都不会放在这，应该是通过js进行的控制。于是我看了一下下载好模板对应的url链接，对其进行分析后发现，<strong>几个url大致相同，只有两个参数发生了变化，就是对应的压缩文件名，和对应的sid。</strong><br><img src="https://img-blog.csdnimg.cn/20210104223908796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br><strong>我们可以发现 第一个压缩包名字就是在线预览url中，index.html之前的参数，所以我们直接取页面中href属性值就可以，sid页面上则贴心的给我们显示出来了，就是素材编号，猜测sid的s就是素材的缩写，hhh</strong><br>再看看我们点击下载按钮后的抓包工具里，出现了一个异步请求，又是cookie又是token的校验。<br><img src="https://img-blog.csdnimg.cn/20210104224225721.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>最后返回了一个json数据，里面果然存放的就是下载链接等信息。<br><img src="https://img-blog.csdnimg.cn/20210104224438444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>到这里我们的分析基本已经结束了，拿到了下载链接后，打开浏览器的隐私窗口对其进行访问，果然不用登陆就直接下载了对应的模板压缩包，接下来进行我们的<strong>代码编写</strong>。</p>
<h1 id="二、编写代码"><a href="#二、编写代码" class="headerlink" title="二、编写代码"></a>二、编写代码</h1><p>代码很简短，这次<strong>主要是锻炼我们的网页分析和抓包思路。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="comment"># ip代理池</span></span><br><span class="line">proxy_pool = [&#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://175.42.122.247:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://115.53.37.35:9999&#x27;</span>&#125;,</span><br><span class="line">              &#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://115.221.242.62:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://175.42.129.10:9999&#x27;</span>&#125;]</span><br><span class="line"><span class="comment"># 机型伪装头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: UserAgent().random</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 下载地址的基础模板</span></span><br><span class="line">base_url = <span class="string">&#x27;http://down.kangjingept.com/cssthemes6/&#123;&#125;.zip?sid=&#123;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 封装函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_zip</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="comment"># 请求url中就包含了我们的sid 懒得去xpath解析了 直接分割字符串吧</span></span><br><span class="line">    sid = url.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>].split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 请求网页地址 再用etree解析对象</span></span><br><span class="line">    response = requests.get(url=url, headers=headers, proxies=random.choice(proxy_pool)).text</span><br><span class="line">    data = etree.HTML(response)</span><br><span class="line">    <span class="comment"># 压缩包的名字 取a标签中的href属性值</span></span><br><span class="line">    zip_name = data.xpath(<span class="string">&#x27;//div[@class=&quot;btn_box&quot;]/a[1]/@href&#x27;</span>)[<span class="number">0</span>].split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">2</span>]</span><br><span class="line">    <span class="comment"># 又找了一个中文的文件名 方便浏览</span></span><br><span class="line">    file_name = data.xpath(<span class="string">&#x27;/html/body/div[8]/h1/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 拼接url</span></span><br><span class="line">    zip_url = base_url.<span class="built_in">format</span>(zip_name, sid)</span><br><span class="line">    <span class="comment"># 获取压缩包的内容</span></span><br><span class="line">    zip_content = requests.get(url=zip_url, headers=headers).content</span><br><span class="line">    <span class="comment"># 二进制格式写入</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./&#123;&#125;.zip&#x27;</span>.<span class="built_in">format</span>(file_name), <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> z:</span><br><span class="line">        z.write(zip_content)</span><br><span class="line">        print(<span class="string">&#x27;文件&#123;&#125;.zip 下载完毕！！！&#x27;</span>.<span class="built_in">format</span>(file_name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 键盘粘贴对应的链接</span></span><br><span class="line">input_url = <span class="built_in">input</span>(<span class="string">&#x27;请输入对应的链接：&#x27;</span>)</span><br><span class="line">get_zip(input_url)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="结果演示"><a href="#结果演示" class="headerlink" title="结果演示"></a>结果演示</h1><p><img src="https://img-blog.csdnimg.cn/20210104225555275.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210104225615458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"></p>
]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>下载</tag>
        <tag>破解分析</tag>
      </tags>
  </entry>
  <entry>
    <title>python实现抖音无水印下载</title>
    <url>/posts/106c0da3/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用抖音的分享链接对其进行无水印的下载</p>
<p>对分享链接的网页进行分析，找到跳转的地址，在地址中找到url，请求对应的地址。</p>
<p>对得到的json文件进行分析，找到对应key下的数据下载链接，将其中的关键字替换，playwm替换成play即是完整的下载链接。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>下面附上完整代码：</p>
<a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DouyinDownload</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1 Edg/88.0.4324.96&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        self.windows_headers = &#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.96 Safari/537.36 Edg/88.0.705.56&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_url</span>(<span class="params">self, url</span>):</span></span><br><span class="line">        response = requests.get(url=url, headers=self.windows_headers, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">if</span> response.headers.get(<span class="string">&#x27;location&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> response.headers.get(<span class="string">&#x27;location&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;解析失败&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download</span>(<span class="params">self, url</span>):</span></span><br><span class="line">        response = requests.get(url=url, headers=self.windows_headers).json()</span><br><span class="line">        v_title = response[<span class="string">&#x27;item_list&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;share_info&#x27;</span>][<span class="string">&#x27;share_title&#x27;</span>]</span><br><span class="line">        download_url = response[<span class="string">&#x27;item_list&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;video&#x27;</span>][<span class="string">&#x27;play_addr&#x27;</span>][<span class="string">&#x27;url_list&#x27;</span>][<span class="number">0</span>].replace(<span class="string">&quot;playwm&quot;</span>, <span class="string">&quot;play&quot;</span>)</span><br><span class="line">        path = <span class="string">&#x27;F:\Spider\douyin&#x27;</span></span><br><span class="line">        data = requests.get(url=download_url, headers=self.headers).content</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(path + <span class="string">&#x27;/&#123;&#125;.mp4&#x27;</span>.<span class="built_in">format</span>(v_title), <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> video:</span><br><span class="line">            video.write(data)</span><br><span class="line">            print(<span class="string">&quot;视频名:&#123;&#125;\n状态: 下载完成\n地址:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(v_title, path))</span><br><span class="line">        open_status = <span class="built_in">input</span>(<span class="string">&quot;是否打开? y/n\n&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> open_status == <span class="string">&#x27;y&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;Y&#x27;</span>:</span><br><span class="line">            os.startfile(path)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        share_url = <span class="built_in">input</span>(<span class="string">&quot;请输入抖音分享链接:&quot;</span>)</span><br><span class="line">        share_url = re.findall(<span class="string">r&#x27;https://v.douyin.com/.*?/&#x27;</span>, share_url)[<span class="number">0</span>]</span><br><span class="line">        location = self.check_url(share_url)</span><br><span class="line">        v_id = re.findall(<span class="string">&#x27;/share/video/(\d*)&#x27;</span>, location)[<span class="number">0</span>]</span><br><span class="line">        download_url = <span class="string">&#x27;https://www.iesdouyin.com/web/api/v2/aweme/iteminfo/?item_ids=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(v_id)</span><br><span class="line">        self.download(download_url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    dy = DouyinDownload()</span><br><span class="line">    dy.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h1><p><img src="https://pic.rmb.bdstatic.com/bjh/3353e3f73d55e89186bf6729b7a22fb1.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/58304b8d5ec0ab43a9623b1de78658f1.png"></p>
]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>破解分析</tag>
        <tag>抖音</tag>
      </tags>
  </entry>
  <entry>
    <title>selenium自动化操作问卷星</title>
    <url>/posts/f027b801/</url>
    <content><![CDATA[<font color=#999AAA >
问卷星的自动化操作
</font>


<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><font color=#999AAA >身边的很多同学需要填写问卷星，有很多需要刷任务的操作，等等类似场景，可以使用selenium实现</font></p>
<p><font color=#999AAA >以下是本篇文章正文内容，下面案例可供参考</p>
<h1 id="一、selenium是什么？"><a href="#一、selenium是什么？" class="headerlink" title="一、selenium是什么？"></a>一、selenium是什么？</h1><p><em>Selenium 是一个用于Web应用程序测试的工具。Selenium测试直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括IE（7, 8, 9, 10, 11），Mozilla Firefox，Safari，Google Chrome，Opera等。这个工具的主要功能包括：测试与浏览器的兼容性——测试你的应用程序看是否能够很好得工作在不同浏览器和操作系统之上。测试系统功能——创建回归测试检验软件功能和用户需求。支持自动录制动作和自动生成 .Net、Java、Perl等不同语言的测试脚本。</em></p>
<a id="more"></a>

<h1 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h1><p><font color=#999AAA >参照了其他同学的代码实现了自动化的操作。直接上代码吧！</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">    <span class="comment"># 创建一个浏览器对象</span></span><br><span class="line">    browser = webdriver.Edge(executable_path=<span class="string">&#x27;msedgedriver.exe&#x27;</span>)</span><br><span class="line">    <span class="comment"># 请求该地址</span></span><br><span class="line">    browser.get(<span class="string">&quot;https://www.wjx.cn/jq/80378706.aspx&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 问题1的点击</span></span><br><span class="line">    randomId = random.randint(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># 随机数 随机点击按钮</span></span><br><span class="line">    js = <span class="string">&quot;document.getElementById(\&quot;q1_&quot;</span> + <span class="built_in">str</span>(randomId) + <span class="string">&quot;\&quot;).click()&quot;</span></span><br><span class="line">    <span class="comment"># 使用js实现点击的效果</span></span><br><span class="line">    browser.execute_script(js)</span><br><span class="line">    <span class="comment"># 延时 太快会被检测是脚本</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 问题2</span></span><br><span class="line">    randomId = random.randint(<span class="number">1</span>, <span class="number">4</span>)  <span class="comment"># 随机数，四个多选框 随机点击</span></span><br><span class="line">    js = <span class="string">&quot;document.getElementById(\&quot;q2_&quot;</span> + <span class="built_in">str</span>(randomId) + <span class="string">&quot;\&quot;).click()&quot;</span></span><br><span class="line">    <span class="comment"># 拼接字符串的方式 js找到对应id 点击按钮</span></span><br><span class="line">    browser.execute_script(js)</span><br><span class="line">    <span class="comment"># 延时</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 问题3</span></span><br><span class="line">    block = [<span class="string">&quot;商学院&quot;</span>, <span class="string">&quot;计科院&quot;</span>, <span class="string">&quot;电气院&quot;</span>]  <span class="comment"># 随机输入内容</span></span><br><span class="line">    randomId = random.randint(<span class="number">0</span>, <span class="number">2</span>)  <span class="comment"># 随机数</span></span><br><span class="line">    <span class="comment"># 输入内容</span></span><br><span class="line">    browser.find_element_by_id(<span class="string">&quot;q3&quot;</span>).send_keys(block[randomId])</span><br><span class="line">    <span class="comment"># 延时</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 问题4</span></span><br><span class="line">    block = [<span class="string">&quot;会计&quot;</span>, <span class="string">&quot;网工&quot;</span>, <span class="string">&quot;电气&quot;</span>]  <span class="comment"># 随机输入内容</span></span><br><span class="line">    browser.find_element_by_id(<span class="string">&quot;q4&quot;</span>).send_keys(block[randomId])</span><br><span class="line">    <span class="comment"># 延时</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 问题5</span></span><br><span class="line">    randomId = random.randint(<span class="number">1</span>, <span class="number">5</span>)  <span class="comment"># 随机数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, randomId + <span class="number">1</span>):  <span class="comment"># 循环 实现多选效果</span></span><br><span class="line">        randomId1 = random.randint(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="comment"># 两种js实现方式</span></span><br><span class="line">        js = <span class="string">&quot;document.getElementById(\&quot;q5_&quot;</span> + <span class="built_in">str</span>(randomId1) + <span class="string">&quot;\&quot;).checked = true&quot;</span></span><br><span class="line">        browser.execute_script(js)</span><br><span class="line">        js = <span class="string">&quot;document.getElementById(\&quot;q5_&quot;</span> + <span class="built_in">str</span>(randomId1) + <span class="string">&quot;\&quot;).click()&quot;</span></span><br><span class="line">        browser.execute_script(js)</span><br><span class="line">        <span class="comment"># 延时</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 问题6</span></span><br><span class="line">    randomId = random.randint(<span class="number">1</span>, <span class="number">3</span>)  <span class="comment"># 参照问题5</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, randomId + <span class="number">1</span>):</span><br><span class="line">        randomId1 = random.randint(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">        js = <span class="string">&quot;document.getElementById(\&quot;q6_&quot;</span> + <span class="built_in">str</span>(randomId1) + <span class="string">&quot;\&quot;).checked = true&quot;</span></span><br><span class="line">        browser.execute_script(js)</span><br><span class="line">        js = <span class="string">&quot;document.getElementById(\&quot;q6_&quot;</span> + <span class="built_in">str</span>(randomId1) + <span class="string">&quot;\&quot;).click()&quot;</span></span><br><span class="line">        browser.execute_script(js)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 问题7</span></span><br><span class="line">    randomId = random.randint(<span class="number">1</span>, <span class="number">3</span>)  <span class="comment"># 参照问题5</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, randomId + <span class="number">1</span>):</span><br><span class="line">        randomId1 = random.randint(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">        js = <span class="string">&quot;document.getElementById(\&quot;q7_&quot;</span> + <span class="built_in">str</span>(randomId1) + <span class="string">&quot;\&quot;).checked = true&quot;</span></span><br><span class="line">        browser.execute_script(js)</span><br><span class="line">        js = <span class="string">&quot;document.getElementById(\&quot;q7_&quot;</span> + <span class="built_in">str</span>(randomId1) + <span class="string">&quot;\&quot;).click()&quot;</span></span><br><span class="line">        browser.execute_script(js)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 问题8</span></span><br><span class="line">    randomId = random.randint(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># 单选</span></span><br><span class="line">    js = <span class="string">&quot;document.getElementById(\&quot;q8_&quot;</span> + <span class="built_in">str</span>(randomId) + <span class="string">&quot;\&quot;).click()&quot;</span></span><br><span class="line">    browser.execute_script(js)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 问题9</span></span><br><span class="line">    randomId = random.randint(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># 单选</span></span><br><span class="line">    js = <span class="string">&quot;document.getElementById(\&quot;q9_&quot;</span> + <span class="built_in">str</span>(randomId) + <span class="string">&quot;\&quot;).click()&quot;</span></span><br><span class="line">    browser.execute_script(js)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 问题10</span></span><br><span class="line">    randomId = random.randint(<span class="number">1</span>, <span class="number">3</span>)  <span class="comment"># 单选</span></span><br><span class="line">    js = <span class="string">&quot;document.getElementById(\&quot;q10_&quot;</span> + <span class="built_in">str</span>(randomId) + <span class="string">&quot;\&quot;).click()&quot;</span></span><br><span class="line">    browser.execute_script(js)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 问题12</span></span><br><span class="line">    <span class="keyword">if</span> randomId == <span class="number">2</span>:</span><br><span class="line">        randomId2 = random.randint(<span class="number">1</span>, <span class="number">6</span>)  <span class="comment"># 多选</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, randomId2 + <span class="number">1</span>):  <span class="comment"># 循环实现</span></span><br><span class="line">            randomId1 = random.randint(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">            <span class="comment"># 两种js点击方法</span></span><br><span class="line">            js = <span class="string">&quot;document.getElementById(\&quot;q12_&quot;</span> + <span class="built_in">str</span>(randomId1) + <span class="string">&quot;\&quot;).checked = true&quot;</span></span><br><span class="line">            browser.execute_script(js)</span><br><span class="line">            js = <span class="string">&quot;document.getElementById(\&quot;q12_&quot;</span> + <span class="built_in">str</span>(randomId1) + <span class="string">&quot;\&quot;).click()&quot;</span></span><br><span class="line">            browser.execute_script(js)</span><br><span class="line">            <span class="comment"># 延时</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 问题11</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        randomId2 = random.randint(<span class="number">1</span>, <span class="number">7</span>)  <span class="comment"># 参照上一个</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, randomId2 + <span class="number">1</span>):</span><br><span class="line">            randomId1 = random.randint(<span class="number">1</span>, <span class="number">7</span>)</span><br><span class="line">            js = <span class="string">&quot;document.getElementById(\&quot;q11_&quot;</span> + <span class="built_in">str</span>(randomId1) + <span class="string">&quot;\&quot;).checked = true&quot;</span></span><br><span class="line">            browser.execute_script(js)</span><br><span class="line">            js = <span class="string">&quot;document.getElementById(\&quot;q11_&quot;</span> + <span class="built_in">str</span>(randomId1) + <span class="string">&quot;\&quot;).click()&quot;</span></span><br><span class="line">            browser.execute_script(js)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 问题13</span></span><br><span class="line">    randomId = random.randint(<span class="number">1</span>, <span class="number">3</span>)  <span class="comment"># 单选</span></span><br><span class="line">    js = <span class="string">&quot;document.getElementById(\&quot;q13_&quot;</span> + <span class="built_in">str</span>(randomId) + <span class="string">&quot;\&quot;).click()&quot;</span></span><br><span class="line">    browser.execute_script(js)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 问题14</span></span><br><span class="line">    block = [<span class="string">&quot;线上教学太生硬&quot;</span>, <span class="string">&quot;线上教学不太好&quot;</span>, <span class="string">&quot;没有不足之处，挺好的&quot;</span>]  <span class="comment"># 随机输入</span></span><br><span class="line">    randomId = random.randint(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">    browser.find_element_by_id(<span class="string">&quot;q14&quot;</span>).send_keys(block[randomId])</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 问题15</span></span><br><span class="line">    block = [<span class="string">&quot;希望作业能多一点&quot;</span>, <span class="string">&quot;如果可以，希望老师能讲课讲清楚一些&quot;</span>, <span class="string">&quot;建议取消线上考试&quot;</span>]  <span class="comment"># 随机输入</span></span><br><span class="line">    randomId = random.randint(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">    browser.find_element_by_id(<span class="string">&quot;q15&quot;</span>).send_keys(block[randomId])</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># submit</span></span><br><span class="line">    js = <span class="string">&quot;document.getElementById(\&quot;submit_button\&quot;).click()&quot;</span>  <span class="comment"># 点击提交按钮</span></span><br><span class="line">    browser.execute_script(js)</span><br><span class="line"></span><br><span class="line">    browser.quit()  <span class="comment"># 运行完毕自动关闭浏览器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        run()</span><br><span class="line">        time.sleep(<span class="number">10</span>)  <span class="comment"># 避免提交过快 会出现验证</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是今天要讲的内容，本文仅仅简单介绍了selenium的使用，selenium还可以帮我们做很多事情，比如模拟登录，爬取某宝的宝贝数据等等。以后我们再见！<br><strong>注：案例仅供学习</strong></p>
]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>问卷星</tag>
      </tags>
  </entry>
  <entry>
    <title>企业微信api实时给私人微信推送数据</title>
    <url>/posts/5bb6de70/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>有些场景下需要给自己的微信推送数据，达到通知的效果。这里的实现有很多，比如server酱等相关第三方平台，但是会随着腾讯的相关协议波动，并且有时候简短的消息需要跳转相关网页查看详情，有些许的不便，于是今天带来一种解决的办法，也就是替代品。结合服务器能做到不错的效果，也可以与合作的同学实现数据共享。</p>
</blockquote>
<p><img src="https://pic.rmb.bdstatic.com/bjh/d9045d4db80e047cf9f31de3a6347bae.png"></p>
<a id="more"></a>

<p><a href="http://sc.ftqq.com/3.version">server酱首页链接</a></p>
<p>使用效果：</p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/22bea99e5506523f9bd0f361982dcaa8.png"></p>
<p><strong>很明显的可以看出来，毕竟是第三方平台，不便于自己使用。</strong></p>
<p>而使用企业微信的api我们可以给自己私人推送一些自己想要的数据或者是通知。也可以拉入自己小组的其他朋友，以实现数据共享。</p>
<h1 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h1><h2 id="注册企业微信"><a href="#注册企业微信" class="headerlink" title="注册企业微信"></a>注册企业微信</h2><p><a href="https://work.weixin.qq.com/wework_admin/register_wx?from=myhome_baidu">企业微信注册</a></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/dba1f5c9859df1005b19d350eff72350.png"></p>
<p>注册后需要用到一些参数：</p>
<ol>
<li>企业ID</li>
<li>应用id</li>
<li>应用密匙</li>
</ol>
<p><img src="https://pic.rmb.bdstatic.com/bjh/ff0e5299249a17f7f3ad9a45fd1a2491.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/6fe604541a80a82f1fcfe499d4fa0860.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/1a0570ec7a80811c3368b7e7b868e1e3.png"></p>
<h2 id="访问接口"><a href="#访问接口" class="headerlink" title="访问接口"></a>访问接口</h2><p><img src="https://pic.rmb.bdstatic.com/bjh/555990f5dc80b1fc016572b07e24b1e0.png"></p>
<p>根据官方的文档我们可以清晰的看到使用步骤，这里只做部分的说明和实现。</p>
<h3 id="接口定义"><a href="#接口定义" class="headerlink" title="接口定义"></a>接口定义</h3><p>应用支持推送文本、图片、视频、文件、图文等类型。</p>
<p><strong>请求方式：</strong>POST（<strong>HTTPS</strong>）<br><strong>请求地址：</strong> <a href="https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=ACCESS_TOKEN">https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=ACCESS_TOKEN</a></p>
<p><strong>参数说明：</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>是否必须</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>access_token</td>
<td>是</td>
<td>接口凭证（有时效性）</td>
</tr>
</tbody></table>
<h3 id="消息类型"><a href="#消息类型" class="headerlink" title="消息类型"></a>消息类型</h3><h4 id="文本消息"><a href="#文本消息" class="headerlink" title="文本消息"></a>文本消息</h4><p><strong>post请求data示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;touser&quot;</span> : <span class="string">&quot;UserID1|UserID2|UserID3&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;toparty&quot;</span> : <span class="string">&quot;PartyID1|PartyID2&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;totag&quot;</span> : <span class="string">&quot;TagID1 | TagID2&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;msgtype&quot;</span> : <span class="string">&quot;text&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;agentid&quot;</span> : <span class="number">1</span>,</span><br><span class="line">   <span class="attr">&quot;text&quot;</span> : &#123;</span><br><span class="line">       <span class="attr">&quot;content&quot;</span> : <span class="string">&quot;你的快递已到，请携带工卡前往邮件中心领取。\n出发前可查看&lt;a href=\&quot;http://work.weixin.qq.com\&quot;&gt;邮件中心视频实况&lt;/a&gt;，聪明避开排队。&quot;</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">&quot;safe&quot;</span>:<span class="number">0</span>,</span><br><span class="line">   <span class="attr">&quot;enable_id_trans&quot;</span>: <span class="number">0</span>,</span><br><span class="line">   <span class="attr">&quot;enable_duplicate_check&quot;</span>: <span class="number">0</span>,</span><br><span class="line">   <span class="attr">&quot;duplicate_check_interval&quot;</span>: <span class="number">1800</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里我们可以看到content中是支持a标签的，换行用转义过的\n，大概效果如下：</p>
<p><img src="https://res.mail.qq.com/node/ww/wwopenmng/images/independent/doc/test_msg$5bc63c26.png"></p>
<p>请求参数含义：</p>
<table>
<thead>
<tr>
<th><strong>参数</strong></th>
<th><strong>是否必须</strong></th>
<th><strong>参数说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>touser</td>
<td>否</td>
<td>成员ID列表（特殊情况：指定为@all，则向关注该企业应用的全部成员发送）</td>
</tr>
<tr>
<td>toparty</td>
<td>否</td>
<td>部门ID列表</td>
</tr>
<tr>
<td>totag</td>
<td>否</td>
<td>标签ID列表</td>
</tr>
<tr>
<td>msgtype</td>
<td>是</td>
<td>消息类型</td>
</tr>
<tr>
<td>agentid</td>
<td>是</td>
<td>企业应用的id， int型</td>
</tr>
<tr>
<td>content</td>
<td>是</td>
<td>消息内容，最长不超过2048个字节，超过将截断<strong>（支持id转译）</strong></td>
</tr>
<tr>
<td>safe</td>
<td>否</td>
<td>表示是否是保密消息，0表示可对外分享，1表示不能分享且内容显示水印，默认为0</td>
</tr>
<tr>
<td>enable_duplicate_check</td>
<td>否</td>
<td>表示是否开启重复消息检查，0表示否，1表示是，默认0</td>
</tr>
<tr>
<td>duplicate_check_interval</td>
<td>否</td>
<td>表示是否重复消息检查的时间间隔，默认1800s，最大不超过4小时</td>
</tr>
</tbody></table>
<blockquote>
<p>这里需要注意的是，<strong>touser、toparty、totag不能同时为空</strong></p>
</blockquote>
<h4 id="其他消息"><a href="#其他消息" class="headerlink" title="其他消息"></a>其他消息</h4><p>支持的消息类型有：</p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/b946ad4893f25249b4f76266d4fe2103.png"></p>
<p><strong>文本卡片消息展现 ：</strong></p>
<p><img src="http://res.mail.qq.com/node/ww/wwopenmng/images/independent/doc/cardmsg.jpeg"></p>
<p><strong>图文消息展现：</strong></p>
<p><img src="https://p.qpic.cn/pic_wework/3478722865/7a7c92760b2bd396e3b856a660f43c8b7db11271bddb3f34/0"></p>
<p><strong>markdown示例效果：</strong></p>
<p><img src="http://p.qpic.cn/pic_wework/1114461239/dddbcdd097e5f308248cd7f99e0ebb336975267b9348c4ec/0"></p>
<p><strong>任务卡片消息展现 ：</strong></p>
<p><img src="http://p.qpic.cn/pic_wework/80330653/7f798570abf8a20977345ff10631cb998beab632442acd3d/0"></p>
<p><strong>等等等等。</strong></p>
<p>值得注意的是部分消息普通微信无法查看，例如markdown类型，需要使用企业微信才可以查看，失去了我们图求的便利性，故放弃。</p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/b021370fa9f2976048af868b5de1be13.png"></p>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>这里放上编写的代码实例，简单调用了text类型的发送，这里的小米运动的实现可以参照之前的博文。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> 小米运动.小米运动刷步 <span class="keyword">import</span> domain</span><br><span class="line"><span class="keyword">from</span> 爬虫基础.天气查询 <span class="keyword">import</span> get_weather</span><br><span class="line"></span><br><span class="line">corpid = <span class="string">&#x27;企业id&#x27;</span></span><br><span class="line">corpsecret = <span class="string">&#x27;应用密匙&#x27;</span></span><br><span class="line">token_url = <span class="string">&#x27;https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=&#123;&#125;&amp;corpsecret=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(corpid, corpsecret)</span><br><span class="line">common_headers = &#123;</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">ACCESS_TOKEN = requests.get(url=token_url, headers=common_headers).json().get(<span class="string">&#x27;access_token&#x27;</span>)</span><br><span class="line">vx_api = <span class="string">&#x27;https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(ACCESS_TOKEN)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_message</span>(<span class="params">message, text_type</span>):</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;touser&quot;</span>: <span class="string">&#x27;@all&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;msgtype&quot;</span>: text_type,</span><br><span class="line">        <span class="string">&quot;agentid&quot;</span>: <span class="string">&#x27;应用id&#x27;</span>,</span><br><span class="line">        text_type: &#123;<span class="string">&#x27;content&#x27;</span>: message&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    data = <span class="built_in">bytes</span>(json.dumps(data), <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    result = requests.post(url=vx_api, headers=common_headers, data=data).text</span><br><span class="line">    print(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    weather = get_weather(<span class="string">&#x27;无为&#x27;</span>)</span><br><span class="line">    send_message(weather, <span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">    res = domain(user=小米账号, pwd=<span class="string">&quot;密码&quot;</span>, step=步数)</span><br><span class="line">    send_message(message=res, text_type=<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p><img src="https://pic.rmb.bdstatic.com/bjh/2457fee706d57c8bb095e26b9cac734b.png"></p>
<p><strong>根据微信企业微信的api文档，我们可以做很多的事情，例如定时任务，收到指定关键字回复消息等，可以根据服务器完美的融合。</strong></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/cd058e678c42a14282576f5a135dfce4.png"></p>
<p>具体请参照<strong>企业微信官网开发文档</strong>：</p>
<p><a href="https://open.work.weixin.qq.com/api/doc/90000/90135/90236">官方开发文档</a></p>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>有时候可能根据api返回的json错误码说明，仍然不知道自己的参数在哪里出错，此时可以在接口请求url里加上debug=1参数。</p>
<p>然后根据返回的实例，在微信的错误码查询工具中根据hint码值查看相关错误。</p>
<p><a href="https://open.work.weixin.qq.com/devtool/query">错误码查询工具</a></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/a8c7869308676b9a6027345ab4c9f55d.png"></p>
]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>微信消息推送</tag>
      </tags>
  </entry>
  <entry>
    <title>前后端分离CRUD基于vue+springboot</title>
    <url>/posts/9590b4fb/</url>
    <content><![CDATA[<h1 id="前后端分离下的CRUD实现（回顾）"><a href="#前后端分离下的CRUD实现（回顾）" class="headerlink" title="前后端分离下的CRUD实现（回顾）"></a>前后端分离下的CRUD实现（回顾）</h1><h2 id="Vue（前端）"><a href="#Vue（前端）" class="headerlink" title="Vue（前端）"></a>Vue（前端）</h2><p><img src="https://img-blog.csdnimg.cn/20210119223712686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="页面样式"></p>
<a id="more"></a>

<p>使用饿了么框架</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">	 <span class="comment">&lt;!-- 面包屑导航 --&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">el-breadcrumb</span> <span class="attr">separator-class</span>=<span class="string">&quot;el-icon-arrow-right&quot;</span>&gt;</span></span><br><span class="line">	      <span class="tag">&lt;<span class="name">el-breadcrumb-item</span> <span class="attr">:to</span>=<span class="string">&quot;&#123; path: &#x27;/home&#x27; &#125;&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">el-breadcrumb-item</span>&gt;</span></span><br><span class="line">	      <span class="tag">&lt;<span class="name">el-breadcrumb-item</span>&gt;</span>权限管理<span class="tag">&lt;/<span class="name">el-breadcrumb-item</span>&gt;</span></span><br><span class="line">	      <span class="tag">&lt;<span class="name">el-breadcrumb-item</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">el-breadcrumb-item</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;/<span class="name">el-breadcrumb</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--用户列表主体--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 卡片视图区 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">el-card</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">el-row</span> <span class="attr">:gutter</span>=<span class="string">&quot;25&quot;</span>&gt;</span></span><br><span class="line">			        <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line">			          <span class="comment">&lt;!-- 搜索添加 --&gt;</span></span><br><span class="line">			          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入搜索内容&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;queryInfo.query&quot;</span> <span class="attr">clearable</span> @<span class="attr">clear</span>=<span class="string">&quot;getUserList&quot;</span>&gt;</span></span><br><span class="line">			            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">slot</span>=<span class="string">&quot;append&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-search&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;getUserList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">			          <span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">			        <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">			        <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">			          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;addDialogVisible = true&quot;</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">			        <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">			      <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">				  </span><br><span class="line">				  <span class="comment">&lt;!-- 用户列表  border 边框 stripe 隔行变色 --&gt;</span></span><br><span class="line">				  <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;userlist&quot;</span> <span class="attr">border</span> <span class="attr">stripe</span> <span class="attr">class</span>=<span class="string">&quot;table-margin&quot;</span>&gt;</span></span><br><span class="line">				       <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">type</span>=<span class="string">&quot;index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span><span class="comment">&lt;!--索引列--&gt;</span></span><br><span class="line">				       <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">				       <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;邮箱&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">				       <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;密码(md5加密)&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">				       <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;角色&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;role&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">				       <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;状态&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;state&quot;</span>&gt;</span></span><br><span class="line">				       <span class="comment">&lt;!--作用域插槽 scope.row 存储了当前行的信息 --&gt;</span></span><br><span class="line">				           <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span><span class="comment">&lt;!--数据模板--&gt;</span></span><br><span class="line">				                  <span class="tag">&lt;<span class="name">el-switch</span> <span class="attr">v-model</span>=<span class="string">&quot;scope.row.state&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;userStateChanged(scope.row)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-switch</span>&gt;</span></span><br><span class="line">				           <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">				       <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">				  	 <span class="comment">&lt;!--自定义插槽--&gt;</span></span><br><span class="line">				       <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span>&gt;</span></span><br><span class="line">				            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">				              <span class="comment">&lt;!-- 修改 --&gt;</span></span><br><span class="line">				              <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-edit&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showUpdateDialog(scope.row.id)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">				              <span class="comment">&lt;!-- 删除 --&gt;</span></span><br><span class="line">				              <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-delete&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteUser(scope.row.id)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">				              <span class="comment">&lt;!-- 权限 --&gt;</span></span><br><span class="line">				              <span class="tag">&lt;<span class="name">el-tooltip</span> <span class="attr">effect</span>=<span class="string">&quot;dark&quot;</span> <span class="attr">content</span>=<span class="string">&quot;分配权限&quot;</span> <span class="attr">placement</span>=<span class="string">&quot;top-start&quot;</span> <span class="attr">:enterable</span>=<span class="string">&quot;false&quot;</span>&gt;</span><span class="comment">&lt;!--文字提示 enterable 隐藏--&gt;</span></span><br><span class="line">				                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-setting&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">				              <span class="tag">&lt;/<span class="name">el-tooltip</span>&gt;</span></span><br><span class="line">				            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">				  	<span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">				  <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">				  </span><br><span class="line">				  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">					  <span class="comment">&lt;!-- 分页 size-change 每页最大数变化 current-change 页数变化 layout 功能组件--&gt;</span></span><br><span class="line">					  &lt;el-pagination</span><br><span class="line">					          @size-change=&quot;handleSizeChange&quot;</span><br><span class="line">					          @current-change=&quot;handleCurrentChange&quot;</span><br><span class="line">					          :current-page=&quot;queryInfo.pageNum&quot;</span><br><span class="line">					          :page-sizes=&quot;[2, 5, 100]&quot;</span><br><span class="line">					          :page-size=&quot;queryInfo.pageSize&quot;</span><br><span class="line">					          layout=&quot;total, sizes, prev, pager, next, jumper&quot;</span><br><span class="line">					          :total=&quot;total&quot;</span><br><span class="line">					  &gt;<span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br><span class="line">				  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">el-card</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 新增用户 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">title</span>=<span class="string">&quot;添加用户&quot;</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;addDialogVisible&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span> @<span class="attr">close</span>=<span class="string">&quot;addDialogClosed&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;addForm&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;addFormRef&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;70px&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;用户名&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;addForm.username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;密码&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;addForm.password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;邮箱&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;email&quot;</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;addForm.email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;addDialogVisible = false&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;addUser&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">title</span>=<span class="string">&quot;修改用户&quot;</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;updateDialogVisible&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span> @<span class="attr">close</span>=<span class="string">&quot;updateDialogClosed&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;updateForm&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;updateFormRef&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;70px&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;用户名&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;updateForm.username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;密码&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;updateForm.password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;邮箱&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;email&quot;</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;updateForm.email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;updateDialogVisible = false&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;updateUser&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="javascript">		<span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">		    <span class="built_in">this</span>.getUserList();</span></span><br><span class="line">		&#125;,</span><br><span class="line"><span class="javascript">		<span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">				 <span class="comment">// 请求数据</span></span></span><br><span class="line">				queryInfo: &#123;</span><br><span class="line"><span class="javascript">				  query: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line">				  pageNum: 1,</span><br><span class="line">				  pageSize: 5</span><br><span class="line">				&#125;,</span><br><span class="line"><span class="javascript">				userlist: [],<span class="comment">// 用户列表</span></span></span><br><span class="line"><span class="javascript">				total: <span class="number">0</span>, <span class="comment">// 最大数据记录</span></span></span><br><span class="line"><span class="javascript">				addDialogVisible: <span class="literal">false</span>,</span></span><br><span class="line">				addForm:&#123;</span><br><span class="line"><span class="javascript">					username:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">					password:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">					email:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line">				&#125;,</span><br><span class="line">				updateForm:&#123;</span><br><span class="line">					</span><br><span class="line">				&#125;,</span><br><span class="line"><span class="javascript">				updateDialogVisible: <span class="literal">false</span>,</span></span><br><span class="line">				rules:&#123;</span><br><span class="line"><span class="javascript">					<span class="comment">//校验用户名</span></span></span><br><span class="line">					username:[</span><br><span class="line"><span class="javascript">						&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入用户名&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">						&#123; <span class="attr">min</span>: <span class="number">4</span>, <span class="attr">max</span>: <span class="number">12</span>, <span class="attr">message</span>: <span class="string">&#x27;长度在 4 ~ 12 个字符&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;</span></span><br><span class="line">					],</span><br><span class="line"><span class="javascript">					<span class="comment">//校验密码</span></span></span><br><span class="line">					password:[</span><br><span class="line"><span class="javascript">						&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入密码&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">						&#123; <span class="attr">min</span>: <span class="number">6</span>, <span class="attr">max</span>: <span class="number">12</span>, <span class="attr">message</span>: <span class="string">&#x27;长度在 6 ~ 12 个字符&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;</span></span><br><span class="line">					],</span><br><span class="line">					email:[</span><br><span class="line"><span class="javascript">						&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入邮箱&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">						&#123; <span class="attr">min</span>: <span class="number">5</span>, <span class="attr">max</span>: <span class="number">25</span>, <span class="attr">message</span>: <span class="string">&#x27;格式不正确&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;</span></span><br><span class="line">					]</span><br><span class="line">				&#125;,</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		methods:&#123;</span><br><span class="line"><span class="javascript">			 <span class="keyword">async</span> <span class="function"><span class="title">getUserList</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">			      <span class="comment">// 调用get请求</span></span></span><br><span class="line"><span class="javascript">			      <span class="keyword">const</span> &#123; <span class="attr">data</span>: res &#125; = <span class="keyword">await</span> <span class="built_in">this</span>.$http.get(<span class="string">&quot;/allUser&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">			        params: <span class="built_in">this</span>.queryInfo</span></span><br><span class="line">			      &#125;);</span><br><span class="line"><span class="javascript">			      <span class="built_in">this</span>.userlist = res.data; <span class="comment">// 将返回数据赋值</span></span></span><br><span class="line"><span class="javascript">			      <span class="built_in">this</span>.total = res.numbers; <span class="comment">// 总个数</span></span></span><br><span class="line">			    &#125;,</span><br><span class="line"><span class="javascript">				<span class="comment">// 监听pageSize改变的事件</span></span></span><br><span class="line"><span class="javascript">				<span class="function"><span class="title">handleSizeChange</span>(<span class="params">newSize</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">this</span>.queryInfo.pageSize = newSize;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">this</span>.getUserList(); <span class="comment">// 数据发生改变重新申请数据</span></span></span><br><span class="line">				&#125;,</span><br><span class="line"><span class="javascript">				<span class="comment">// 监听pageNum改变的事件</span></span></span><br><span class="line"><span class="javascript">				<span class="function"><span class="title">handleCurrentChange</span>(<span class="params">newPage</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">this</span>.queryInfo.pageNum = newPage;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">this</span>.getUserList(); <span class="comment">// 数据发生改变重新申请数据</span></span></span><br><span class="line">				&#125;,</span><br><span class="line"><span class="javascript">				<span class="keyword">async</span> <span class="function"><span class="title">userStateChanged</span>(<span class="params">userinfo</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">					<span class="keyword">const</span> &#123; <span class="attr">data</span>: res &#125; = <span class="keyword">await</span> <span class="built_in">this</span>.$http.get(</span></span><br><span class="line"><span class="javascript">				        <span class="string">&quot;/userState&quot;</span>, &#123;</span></span><br><span class="line">				          params: &#123;id:userinfo.id,state:userinfo.state&#125;</span><br><span class="line">				        &#125;</span><br><span class="line">				    );</span><br><span class="line"><span class="javascript">				    <span class="keyword">if</span> (res != <span class="string">&quot;success&quot;</span>) &#123;</span></span><br><span class="line">				        userinfo.state = !userinfo.state;</span><br><span class="line"><span class="javascript">				        <span class="keyword">return</span> <span class="built_in">this</span>.$message.error(<span class="string">&quot;账号状态更新失败！&quot;</span>);</span></span><br><span class="line">				      &#125;</span><br><span class="line"><span class="javascript">				    <span class="built_in">this</span>.$message.success(<span class="string">&quot;账号状态已更新！&quot;</span>);</span></span><br><span class="line">				&#125;,</span><br><span class="line"><span class="javascript">				<span class="function"><span class="title">addDialogClosed</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">this</span>.$refs.addFormRef.resetFields();</span></span><br><span class="line">				&#125;,</span><br><span class="line"><span class="javascript">				<span class="function"><span class="title">addUser</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">this</span>.$refs.addFormRef.validate(<span class="keyword">async</span> vaild=&gt;&#123;</span></span><br><span class="line"><span class="javascript">						<span class="keyword">if</span>(!vaild)&#123;</span></span><br><span class="line"><span class="javascript">							<span class="keyword">return</span>;</span></span><br><span class="line">						&#125;</span><br><span class="line"><span class="javascript">						<span class="keyword">const</span> &#123;<span class="attr">data</span>:res&#125; = <span class="keyword">await</span> <span class="built_in">this</span>.$http.post(<span class="string">&quot;/addUser&quot;</span>,<span class="built_in">this</span>.addForm);</span></span><br><span class="line"><span class="javascript">						<span class="keyword">if</span>(res!=<span class="string">&quot;success&quot;</span>)&#123;</span></span><br><span class="line"><span class="javascript">							<span class="keyword">return</span> <span class="built_in">this</span>.$message.error(<span class="string">&quot;添加失败！&quot;</span>);</span></span><br><span class="line">						&#125;</span><br><span class="line"><span class="javascript">						<span class="built_in">this</span>.$message.success(<span class="string">&quot;添加成功！&quot;</span>);</span></span><br><span class="line"><span class="javascript">						<span class="built_in">this</span>.addDialogVisible = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">						<span class="built_in">this</span>.getUserList();</span></span><br><span class="line">					&#125;)</span><br><span class="line">				&#125;,</span><br><span class="line"><span class="javascript">				<span class="keyword">async</span> <span class="function"><span class="title">deleteUser</span>(<span class="params">id</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="keyword">const</span> confirmResult = <span class="keyword">await</span> <span class="built_in">this</span>.$confirm(<span class="string">&#x27;此操作将永久删除用户，是否继续？&#x27;</span>,<span class="string">&#x27;提示&#x27;</span>,&#123;</span></span><br><span class="line"><span class="javascript">						confirmButtonText:<span class="string">&#x27;确定&#x27;</span>,</span></span><br><span class="line"><span class="javascript">						cancelButtonText:<span class="string">&#x27;取消&#x27;</span>,</span></span><br><span class="line"><span class="javascript">						type:<span class="string">&#x27;warning&#x27;</span></span></span><br><span class="line"><span class="javascript">					&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> err);</span></span><br><span class="line"><span class="javascript">					<span class="keyword">if</span>(confirmResult!=<span class="string">&#x27;confirm&#x27;</span>)&#123;</span></span><br><span class="line"><span class="javascript">						<span class="keyword">return</span> <span class="built_in">this</span>.$message.warning(<span class="string">&quot;已取消删除！&quot;</span>);</span></span><br><span class="line">					&#125;</span><br><span class="line"><span class="javascript">					<span class="keyword">const</span> &#123;<span class="attr">data</span>:res&#125; = <span class="keyword">await</span> <span class="built_in">this</span>.$http.get(<span class="string">&quot;/deleteUser&quot;</span>,&#123;</span></span><br><span class="line">						params: &#123;id:id&#125;</span><br><span class="line">					&#125;);</span><br><span class="line"><span class="javascript">					<span class="keyword">if</span>(res!=<span class="string">&quot;success&quot;</span>)&#123;</span></span><br><span class="line"><span class="javascript">						<span class="keyword">return</span> <span class="built_in">this</span>.$message.error(<span class="string">&quot;删除失败！&quot;</span>);</span></span><br><span class="line">					&#125;</span><br><span class="line"><span class="javascript">					<span class="built_in">this</span>.$message.success(<span class="string">&quot;删除成功！&quot;</span>);</span></span><br><span class="line"><span class="javascript">					<span class="built_in">this</span>.getUserList();</span></span><br><span class="line">				&#125;,</span><br><span class="line"><span class="javascript">				<span class="keyword">async</span> <span class="function"><span class="title">showUpdateDialog</span>(<span class="params">id</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="keyword">const</span> &#123;<span class="attr">data</span>:res&#125; = <span class="keyword">await</span> <span class="built_in">this</span>.$http.get(<span class="string">&quot;/getUpdateUser&quot;</span>,&#123;</span></span><br><span class="line">						params: &#123;id:id&#125;</span><br><span class="line">					&#125;);</span><br><span class="line"><span class="javascript">					<span class="built_in">this</span>.updateForm = res;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">this</span>.updateDialogVisible = <span class="literal">true</span>;</span></span><br><span class="line">				&#125;,</span><br><span class="line"><span class="javascript">				<span class="function"><span class="title">updateDialogClosed</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">this</span>.$refs.updateFormRef.resetFields();</span></span><br><span class="line">				&#125;,</span><br><span class="line"><span class="javascript">				<span class="function"><span class="title">updateUser</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">this</span>.$refs.updateFormRef.validate(<span class="keyword">async</span> vaild=&gt;&#123;</span></span><br><span class="line"><span class="javascript">						<span class="keyword">if</span>(!vaild)&#123;</span></span><br><span class="line"><span class="javascript">							<span class="keyword">return</span>;</span></span><br><span class="line">						&#125;</span><br><span class="line"><span class="javascript">						<span class="keyword">const</span> &#123;<span class="attr">data</span>:res&#125; = <span class="keyword">await</span> <span class="built_in">this</span>.$http.post(<span class="string">&quot;/updateUser&quot;</span>,<span class="built_in">this</span>.updateForm);</span></span><br><span class="line"><span class="javascript">						<span class="keyword">if</span>(res!=<span class="string">&quot;success&quot;</span>)&#123;</span></span><br><span class="line"><span class="javascript">							<span class="keyword">return</span> <span class="built_in">this</span>.$message.error(<span class="string">&quot;更新失败！&quot;</span>);</span></span><br><span class="line">						&#125;</span><br><span class="line"><span class="javascript">						<span class="built_in">this</span>.$message.success(<span class="string">&quot;更新成功！&quot;</span>);</span></span><br><span class="line"><span class="javascript">						<span class="built_in">this</span>.updateDialogVisible = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">						<span class="built_in">this</span>.getUserList();</span></span><br><span class="line">					&#125;);</span><br><span class="line">				&#125;,</span><br><span class="line">				</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="comment">/* 面包屑样式 */</span></span></span><br><span class="line"><span class="css">	<span class="selector-class">.el-breadcrumb</span>&#123;</span></span><br><span class="line">	    margin-bottom: 15px;</span><br><span class="line">	    font-size: 16px;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>路由设置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">&#x27;../components/Login.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;../components/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Welcome <span class="keyword">from</span> <span class="string">&#x27;../components/welcome.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> UserList <span class="keyword">from</span> <span class="string">&#x27;../components/admin/UserList.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">	&#123;</span><br><span class="line">		path: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">		redirect: <span class="string">&quot;/login&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		path: <span class="string">&quot;/login&quot;</span>,</span><br><span class="line">		component: Login</span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		path: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">		component: Home,</span><br><span class="line">		redirect: <span class="string">&quot;/welcome&quot;</span>,</span><br><span class="line">		children:[</span><br><span class="line">			&#123;<span class="attr">path</span>: <span class="string">&quot;/welcome&quot;</span>,<span class="attr">component</span>: Welcome,&#125;,</span><br><span class="line">			&#123;<span class="attr">path</span>: <span class="string">&quot;/user&quot;</span>,<span class="attr">component</span>: UserList,&#125;,</span><br><span class="line">		]</span><br><span class="line">	&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载路由导航守卫</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// to:将要访问的路径</span></span><br><span class="line">  <span class="comment">// from:从哪里访问的路径</span></span><br><span class="line">  <span class="comment">// next:之后要做的任务，是一个函数</span></span><br><span class="line">  <span class="comment">//    next（）放行， next（&#x27;/URL&#x27;）强制跳转的路径。</span></span><br><span class="line">  <span class="keyword">if</span> (to.path == <span class="string">&#x27;/login&#x27;</span>) <span class="keyword">return</span> next();<span class="comment">// 访问路径为登录</span></span><br><span class="line">  <span class="comment">// 获取flag</span></span><br><span class="line">  <span class="keyword">const</span> userInfo = <span class="built_in">window</span>.sessionStorage.getItem(<span class="string">&quot;user&quot;</span>);<span class="comment">// session取值</span></span><br><span class="line">  <span class="keyword">if</span> (!userInfo) <span class="keyword">return</span> next(<span class="string">&#x27;/login&#x27;</span>);<span class="comment">// 没登录去登录</span></span><br><span class="line">  next();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./plugins/element.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./assets/css/global.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./assets/font/iconfont.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//挂载axios</span></span><br><span class="line">Vue.prototype.$http = axios</span><br><span class="line"><span class="comment">//设置访问根路径</span></span><br><span class="line">axios.defaults.baseURL = <span class="string">&quot;http://localhost:8081&quot;</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>


<h2 id="SpringBoot（后端）"><a href="#SpringBoot（后端）" class="headerlink" title="SpringBoot（后端）"></a>SpringBoot（后端）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/allUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserList</span><span class="params">(QueryInfo queryInfo)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> numbers = userDao.getUserCounts(<span class="string">&quot;%&quot;</span> + queryInfo.getQuery() + <span class="string">&quot;%&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> pageStart = (queryInfo.getPageNum()-<span class="number">1</span>)*queryInfo.getPageSize();</span><br><span class="line">        List&lt;User&gt; users = userDao.getAllUser(<span class="string">&quot;%&quot;</span>+queryInfo.getQuery()+<span class="string">&quot;%&quot;</span>,pageStart,queryInfo.getPageSize());</span><br><span class="line">        HashMap&lt;String, Object&gt; res = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        res.put(<span class="string">&quot;numbers&quot;</span>,numbers);</span><br><span class="line">        res.put(<span class="string">&quot;data&quot;</span>,users);</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/userState&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateUserState</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> Integer  id,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  <span class="meta">@RequestParam(&quot;state&quot;)</span> Boolean state)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = userDao.updateState(id, state);</span><br><span class="line">        <span class="keyword">return</span> i &gt;<span class="number">0</span>?<span class="string">&quot;success&quot;</span>:<span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/addUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>&#123;</span><br><span class="line">        user.setRole(<span class="string">&quot;普通用户&quot;</span>);</span><br><span class="line">        user.setState(<span class="keyword">false</span>);</span><br><span class="line">        user.setPassword(MD5Utils.code(user.getPassword()));</span><br><span class="line">        <span class="keyword">int</span> i = userDao.addUser(user);</span><br><span class="line">        <span class="keyword">return</span> i&gt;<span class="number">0</span>?<span class="string">&quot;success&quot;</span>:<span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/deleteUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = userDao.deleteUser(id);</span><br><span class="line">        <span class="keyword">return</span> i&gt;<span class="number">0</span>?<span class="string">&quot;success&quot;</span>:<span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getUpdateUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUpdateUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        User user = userDao.getUpdateUser(id);</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/updateUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>&#123;</span><br><span class="line">        user.setPassword(MD5Utils.code(user.getPassword()));</span><br><span class="line">        <span class="keyword">int</span> i = userDao.updateUser(user);</span><br><span class="line">        <span class="keyword">return</span> i&gt;<span class="number">0</span>?<span class="string">&quot;success&quot;</span>:<span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UserMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.fanchen.sport.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByMessage&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.fanchen.sport.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from easyuser where username = #&#123;username&#125; and state = 1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.fanchen.sport.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM easyuser</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username !=null &quot;</span>&gt;</span></span><br><span class="line">            WHERE username like #&#123;username&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        LIMIT #&#123;pageStart&#125;,#&#123;pageSize&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserCounts&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span></span><br><span class="line">        SELECT count(*) FROM `easyuser`</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username !=null &quot;</span>&gt;</span></span><br><span class="line">            WHERE username like #&#123;username&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateState&quot;</span>&gt;</span></span><br><span class="line">   UPDATE easyuser SET state = #&#123;state&#125; WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span>&gt;</span></span><br><span class="line">        insert into easyuser (username,password,email,role,state) values (#&#123;username&#125;,#&#123;password&#125;,#&#123;email&#125;,#&#123;role&#125;,#&#123;state&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span>&gt;</span></span><br><span class="line">        delete from easyuser where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUpdateUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.fanchen.sport.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from easyuser where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span>&gt;</span></span><br><span class="line">        update easyuser set username = #&#123;username&#125;, password = #&#123;password&#125;,email = #&#123;email&#125; where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Vue</tag>
        <tag>前后端分离</tag>
      </tags>
  </entry>
  <entry>
    <title>微信聊天记录数据库解密并导出</title>
    <url>/posts/7de13740/</url>
    <content><![CDATA[<h1 id="微信数据库解码"><a href="#微信数据库解码" class="headerlink" title="微信数据库解码"></a>微信数据库解码</h1><p><img src="https://pic.rmb.bdstatic.com/bjh/bfe8f02b3a0bcb12f69389140194efc5.png"></p>
<a id="more"></a>

<p>上图为导出后的聊天信息数据的表格文件，接下来请看我的操作步骤。</p>
<h2 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h2><ol>
<li>夜神模拟器 并安装微信</li>
<li>PC版微信 以及 你正在使用的有聊天记录的手机（Android IOS都可以）</li>
<li>SQLCipher 用来解密数据库</li>
</ol>
<h2 id="获取微信的数据库文件"><a href="#获取微信的数据库文件" class="headerlink" title="获取微信的数据库文件"></a>获取微信的数据库文件</h2><p>首先用正在使用的手机登陆微信，再登录PC版微信（两个设备需要在同一局域网下），然后使用备份与恢复。</p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/23bd5fb3ff994c45111a1a8fd425bb1d.png"></p>
<p>然后选择备份连天记录到电脑。</p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/3c921bdb7183459aa5827f345f971317.png"></p>
<p>在手机上确定，并可以指定聊天记录或者全部备份。</p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/244a76ece3d858e8fadf77ecf1e87355.png"></p>
<p>这是保存在电脑上的备份数据文件，因为比较难于解密和分析，所以我们不做处理。接下来将聊天记录恢复到安卓模拟器中，再进行数据库的提取。</p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/19ca7fc5cf2ec8da7fd62b5fb3bce215.png"></p>
<p>登录好模拟器上的微信后，选择恢复聊天记录到手机，并在模拟器上确认。恢复聊天记录完成后，打开文件管理器。</p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/ea86ff2d3983193994c061051c5bdac4.png"></p>
<p>数据库文件在<strong>根目录/data/data/com.tencent.mm/MicroMsg</strong>中。加密的数据库文件在两个长名字文件夹之一中，优先选择<strong>修改日期最新</strong>的那个。</p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/1a01fce9f73c6400b00b85d18d05dd64.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/7cd632942a41f87df4b7391b61e71f93.png"></p>
<h2 id="获取数据库密码"><a href="#获取数据库密码" class="headerlink" title="获取数据库密码"></a>获取数据库密码</h2><p>在下图的路径中找到对应的xml文件，其中有账号对应的UIN号。</p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/2dd5ad072b0d65deb748319fe9ad97e5.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/8ed9911140cdea860509418012ff37bd.png"></p>
<p>在模拟器设置中查看自己的IMEI号。</p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/1762bcfa593d9675137686277f87f2bb.png"></p>
<p>在加密网站中，将IMEI和UIN号进行拼接（<strong>保留负号</strong>），加密方式选择<strong>32位小</strong>。</p>
<p><a href="https://link.zhihu.com/?target=https://tool.chinaz.com/tools/md5.aspx">MD5在线加密/解密/破解 - 站长工具</a></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/c76dda4055f8b30e2001b55e0bcf8786.png"></p>
<h2 id="数据库处理"><a href="#数据库处理" class="headerlink" title="数据库处理"></a>数据库处理</h2><p>根据拿到的密码查看数据库。</p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/79523907938a6f6318d818b9989bb4e5.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/f10b4d50439b4236899764df097623f6.png"></p>
<p>导出为表格文件。</p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/cb7088579a9c22beb0e4e08b9a3510cd.png"></p>
<h2 id="密码不对的情况"><a href="#密码不对的情况" class="headerlink" title="密码不对的情况"></a>密码不对的情况</h2><p>如果出现这样的情况说明你的密码不对。</p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/6a17ff1af5205835e77b51b31fac58ae.png"></p>
<p>可以尝试使用MD5加密 1234567890ABCDEF + UIN生成的前七位字符试一下。</p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/80f2edfa24b314dc804ce9fe4574df0b.png"></p>
<h2 id="聊天数据整理"><a href="#聊天数据整理" class="headerlink" title="聊天数据整理"></a>聊天数据整理</h2><p>使用python的jieba分词等，对csv文件进行数据清洗，因为太简单就不附上代码了，下面直接放上成品图。</p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/82b8d74eab4559b4a485b3a49291c3d3.png"></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>常大教务成绩爬取</title>
    <url>/posts/e6c4ccf7/</url>
    <content><![CDATA[<h1 id="常州大学官网-教务成绩信息爬取"><a href="#常州大学官网-教务成绩信息爬取" class="headerlink" title="常州大学官网-教务成绩信息爬取"></a>常州大学官网-教务成绩信息爬取</h1><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ul>
<li>cookie问题 由requests下的session解决</li>
<li>lxml下的etree负责解析网页数据</li>
<li>封装账号信息post模拟登录</li>
<li>在页面中的隐含域下获取请求的参数值，如lt，execution</li>
</ul>
<a id="more"></a>

<h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">login_url = <span class="string">&#x27;http://sso.cczu.edu.cn/sso/login?service=http%3A%2F%2Fs.cczu.edu.cn%2F&#x27;</span></span><br><span class="line">home_url = <span class="string">&#x27;http://219.230.159.132/web_cas/web_cas_login_jwgl.aspx&#x27;</span></span><br><span class="line">grade_url = <span class="string">&#x27;http://219.230.159.132/web_cjgl/cx_cj_xh.aspx&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class="line">                  <span class="string">&#x27;Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.66 &#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">session = requests.session()</span><br><span class="line">login_page_data = etree.HTML(session.get(url=login_url, headers=headers).content.decode())</span><br><span class="line">execution = login_page_data.xpath(<span class="string">&#x27;//input[@name=&quot;execution&quot;]/@value&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">lt = login_page_data.xpath(<span class="string">&#x27;//input[@name=&quot;lt&quot;]/@value&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;lt&#x27;</span>: lt,</span><br><span class="line">    <span class="string">&#x27;execution&#x27;</span>: execution,</span><br><span class="line">    <span class="string">&#x27;_eventId&#x27;</span>: <span class="string">&#x27;submit&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;useVCode&#x27;</span>: <span class="string">&#x27;false&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">session.post(url=login_url, data=data, headers=headers)</span><br><span class="line">session.get(url=home_url, headers=headers)</span><br><span class="line">grade_page = session.get(url=grade_url, headers=headers).content.decode()</span><br><span class="line">grade_data = etree.HTML(grade_page)</span><br><span class="line">trs = grade_data.xpath(<span class="string">&#x27;//table[@id=&quot;gvcj1&quot;]/tr[@class=&quot;dg1-item&quot;]&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> tr <span class="keyword">in</span> trs:</span><br><span class="line">    s_id = tr.xpath(<span class="string">&#x27;./td[1]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    s_name = tr.xpath(<span class="string">&#x27;./td[2]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    s_term = tr.xpath(<span class="string">&#x27;./td[3]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    s_subject = tr.xpath(<span class="string">&#x27;./td[4]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    s_type = tr.xpath(<span class="string">&#x27;./td[5]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    s_grade = tr.xpath(<span class="string">&#x27;./td[6]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    s_properties = tr.xpath(<span class="string">&#x27;./td[7]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    s_point = tr.xpath(<span class="string">&#x27;./td[8]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    s_time = tr.xpath(<span class="string">&#x27;./td[9]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    s_code = tr.xpath(<span class="string">&#x27;./td[10]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    s_hour = tr.xpath(<span class="string">&#x27;./td[11]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    print(<span class="string">&#x27; 学号：&#x27;</span> + s_id + <span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;姓名：&#x27;</span> + s_name + <span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;学期：&#x27;</span> + s_term + <span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;科目：&#x27;</span> + s_subject + <span class="string">&#x27;\n&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;类别：&#x27;</span> + s_type + <span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;学分：&#x27;</span> + s_grade + <span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;分数：&#x27;</span> + s_properties + <span class="string">&#x27;\n&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;性质：&#x27;</span> + s_point + <span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;绩点：&#x27;</span> + s_time + <span class="string">&#x27;\n&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;课程代码：&#x27;</span> + s_code + <span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;课时：&#x27;</span> + s_hour + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>教务系统</tag>
        <tag>成绩查询</tag>
      </tags>
  </entry>
  <entry>
    <title>微博个人主页的信息爬取</title>
    <url>/posts/989be291/</url>
    <content><![CDATA[<h2 id="微博个人主页的信息爬取"><a href="#微博个人主页的信息爬取" class="headerlink" title="微博个人主页的信息爬取"></a>微博个人主页的信息爬取</h2><p><strong>闲话少说，先进入分析过程。</strong><br><strong>因为相对而言移动端的界面会比较好爬取，所以今天我们爬取移动端微博的页面，如下：</strong><br><img src="https://img-blog.csdnimg.cn/20210103162026854.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"></p>
<a id="more"></a>

<p>这里是前后端分离异步加载的数据，所以我们去抓包工具下寻找对应的接口地址：<br><img src="https://img-blog.csdnimg.cn/20210103162328461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>很明显可以看到crads下对应了多条数据，而其中的mblog下存放着对应微博的相关数据：<br><img src="https://img-blog.csdnimg.cn/20210103162516499.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>不要着急现在就去解析界面数据，先去看看下一页的加载，怎样去请求下一条数据：<br><img src="https://img-blog.csdnimg.cn/20210103162816242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>对比看到多出了一个since_id的数据，发现这个数据的来源是上一条json数据中的：<br><img src="https://img-blog.csdnimg.cn/20210103163205858.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>到这里我们的分析就结束了，接下来进行代码的编写。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 个人微博内容循环爬取，基于强大的requests库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 伪装头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;m.weibo.cn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://m.weibo.cn/u/6816603335&quot;</span>,</span><br><span class="line">    <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 8.0; Pixel 2 Build/OPD3.170816.012) AppleWebKit/537.36 (KHTML, &quot;</span></span><br><span class="line">                  <span class="string">&quot;like Gecko) Chrome/87.0.4280.88 Mobile Safari/537.36 Edg/87.0.664.66 &quot;</span>,</span><br><span class="line">    <span class="string">&quot;X-Requested-With&quot;</span>: <span class="string">&quot;XMXLHttpRequest&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 接口链接模板</span></span><br><span class="line">base_url = <span class="string">&#x27;https://m.weibo.cn/api/container/getIndex?&#x27;</span></span><br><span class="line"><span class="comment"># ip代理池</span></span><br><span class="line">proxy_pool = [&#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;27.206.178.75:9000&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;175.42.122.226:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;175.42.158.31:9999&#x27;</span>&#125;,</span><br><span class="line">              &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;175.44.109.38:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;42.238.91.46:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;175.42.158.146:9999&#x27;</span>&#125;,</span><br><span class="line">              &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;123.160.69.171:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;115.221.240.115:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;183.166.110.5:9999&#x27;</span>&#125;,</span><br><span class="line">              &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;125.121.123.115:8888&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;117.64.237.222:1133&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;182.87.39.163:9000&#x27;</span>&#125;,</span><br><span class="line">              &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;120.79.184.148:8118&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;122.234.24.178:9000&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;175.42.158.74:9999&#x27;</span>&#125;]</span><br><span class="line"><span class="comment"># 预定义字典</span></span><br><span class="line">weibo = &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>接下来我们进行函数的编写，封装两个函数，用来请求数据 和 解析数据。<br>请求参数如下：<br><img src="https://img-blog.csdnimg.cn/20210103163707214.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对链接的请求函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span>(<span class="params">since_id=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="comment"># 爬取用户的参数</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&#x27;uid&#x27;</span>: <span class="string">&#x27;2946150412&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;luicode&#x27;</span>: <span class="string">&#x27;10000011&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;lfid&#x27;</span>: <span class="string">&#x27;231093_-_selffollowed&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;uid&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;2946150412&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;containerid&#x27;</span>: <span class="string">&#x27;1076032946150412&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;since_id&#x27;</span>: since_id</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># url拼接</span></span><br><span class="line">    url = base_url + urlencode(params)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 对拼接字符串进行访问</span></span><br><span class="line">        response = requests.get(url=url, headers=headers, proxies=random.choice(proxy_pool))</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="comment"># 响应成功后，将返回的json数据解析，返回json和其中的since_id</span></span><br><span class="line">            <span class="comment"># since_id是为了循环爬取下一条</span></span><br><span class="line">            json = response.json()</span><br><span class="line">            next_since_id = json.get(<span class="string">&#x27;data&#x27;</span>).get(<span class="string">&#x27;cardlistInfo&#x27;</span>).get(<span class="string">&#x27;since_id&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> json, next_since_id</span><br><span class="line">    <span class="keyword">except</span> requests.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 失败 控制台抛出异常</span></span><br><span class="line">        print(<span class="string">&quot;错误：&quot;</span>, e.args)</span><br></pre></td></tr></table></figure>
<p>上面的函数会返回一个json对象和since_id的数据，json对象用来解析微博的对应信息，since_id为我们的下次爬取提供参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解析传回来的json</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span>(<span class="params">json</span>):</span></span><br><span class="line">    <span class="comment"># 部分card属性下，存放着mblog，即是对应的微博内容</span></span><br><span class="line">    cards = json.get(<span class="string">&#x27;data&#x27;</span>).get(<span class="string">&#x27;cards&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> card <span class="keyword">in</span> cards:</span><br><span class="line">        mblog = card.get(<span class="string">&#x27;mblog&#x27;</span>)</span><br><span class="line">        <span class="comment"># 循环遍历，获取对应的每一条数据，有mblog属性再解析</span></span><br><span class="line">        <span class="keyword">if</span> mblog:</span><br><span class="line">            <span class="comment"># 发布微博的来源</span></span><br><span class="line">            weibo[<span class="string">&#x27;source&#x27;</span>] = mblog[<span class="string">&#x27;source&#x27;</span>]</span><br><span class="line">            <span class="comment"># 创建时间</span></span><br><span class="line">            weibo[<span class="string">&#x27;created_at&#x27;</span>] = mblog[<span class="string">&#x27;created_at&#x27;</span>]</span><br><span class="line">            <span class="comment"># 文本内容</span></span><br><span class="line">            weibo[<span class="string">&#x27;raw_text&#x27;</span>] = mblog[<span class="string">&#x27;raw_text&#x27;</span>]</span><br><span class="line">            <span class="comment"># 图片</span></span><br><span class="line">            weibo[<span class="string">&#x27;original_pic&#x27;</span>] = mblog.get(<span class="string">&#x27;original_pic&#x27;</span>)</span><br><span class="line">            <span class="comment"># 图床的相关处理</span></span><br><span class="line">            pics = []</span><br><span class="line">            p = mblog.get(<span class="string">&#x27;pics&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> p:</span><br><span class="line">                <span class="keyword">for</span> pic <span class="keyword">in</span> p:</span><br><span class="line">                    pics.append(pic[<span class="string">&#x27;url&#x27;</span>])</span><br><span class="line">                weibo[<span class="string">&#x27;pics&#x27;</span>] = <span class="string">&#x27; , &#x27;</span>.join(pics)</span><br><span class="line">                <span class="comment"># 提交</span></span><br><span class="line">            <span class="keyword">yield</span> weibo</span><br></pre></td></tr></table></figure>
<p>最后封装一个函数调用上面的两个方法，并做到循环请求和解析的效果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 调用封装好的函数并进行持久化存储</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">domain</span>():</span></span><br><span class="line">    <span class="keyword">global</span> return_data</span><br><span class="line">    <span class="comment"># 循环请求数据接口，200次已经很多了，获取不到对应的since_id时，程序会报错停止</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">    <span class="comment"># 由于第一页没有since_id参数，这里特殊处理</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">&quot;正在爬取第&#123;&#125;页....&quot;</span>.<span class="built_in">format</span>(i + <span class="number">1</span>))</span><br><span class="line">            <span class="comment"># 第一个接口没有since_id参数 传值为空</span></span><br><span class="line">            return_data = get_page()</span><br><span class="line">            <span class="comment"># 下面的语句参照else中的注释</span></span><br><span class="line">            results = parse_page(return_data[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">for</span> res <span class="keyword">in</span> results:</span><br><span class="line">                img = res.get(<span class="string">&#x27;original_pic&#x27;</span>)</span><br><span class="line">                pics = res.get(<span class="string">&#x27;pics&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> img <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    img = <span class="string">&quot;无&quot;</span></span><br><span class="line">                <span class="keyword">if</span> pics <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    pics = <span class="string">&quot;无&quot;</span></span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                    file.write(<span class="string">&#x27;时间：&#x27;</span> + res[<span class="string">&#x27;created_at&#x27;</span>] + <span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;来源：&#x27;</span> + res[<span class="string">&#x27;source&#x27;</span>] + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">                               + <span class="string">&#x27;内容：&#x27;</span> + res[<span class="string">&#x27;raw_text&#x27;</span>] + <span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;附图链接地址：&#x27;</span> + img + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">                               + <span class="string">&#x27;图床：&#x27;</span> + pics + <span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;正在爬取第&#123;&#125;页....&quot;</span>.<span class="built_in">format</span>(i + <span class="number">1</span>))</span><br><span class="line">            <span class="comment"># 传入返回的第二个值since_id</span></span><br><span class="line">            return_data = get_page(return_data[<span class="number">1</span>])</span><br><span class="line">            <span class="comment"># 传入解析的第一个值json对象</span></span><br><span class="line">            results = parse_page(return_data[<span class="number">0</span>])</span><br><span class="line">            <span class="comment"># 遍历提交的结果</span></span><br><span class="line">            <span class="keyword">for</span> res <span class="keyword">in</span> results:</span><br><span class="line">                <span class="comment"># 对照片和图床进行非空判断</span></span><br><span class="line">                img = res.get(<span class="string">&#x27;original_pic&#x27;</span>)</span><br><span class="line">                pics = res.get(<span class="string">&#x27;pics&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> img <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    img = <span class="string">&quot;无&quot;</span></span><br><span class="line">                <span class="keyword">if</span> pics <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    pics = <span class="string">&quot;无&quot;</span></span><br><span class="line">                <span class="comment"># 持久化存储用文本实现</span></span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                    file.write(<span class="string">&#x27;时间：&#x27;</span> + res[<span class="string">&#x27;created_at&#x27;</span>] + <span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;来源：&#x27;</span> + res[<span class="string">&#x27;source&#x27;</span>] + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">                               + <span class="string">&#x27;内容：&#x27;</span> + res[<span class="string">&#x27;raw_text&#x27;</span>] + <span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;附图链接地址：&#x27;</span> + img + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">                               + <span class="string">&#x27;图床：&#x27;</span> + pics + <span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>运行结果如下：<br><img src="https://img-blog.csdnimg.cn/20210103164347188.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>最后看一下我们的结果文件：<br><img src="https://img-blog.csdnimg.cn/20210103164430693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210103164453243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>可以看到最早的2015年的微博也获取到了，对应的图片链接也是可以访问没有问题的。<br><strong>注：案例仅供学习</strong></p>
]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>微博</tag>
      </tags>
  </entry>
  <entry>
    <title>微博爬取相册的所有图片</title>
    <url>/posts/2a5b7162/</url>
    <content><![CDATA[<font color=#999AAA >
微博相册的批量爬取
</font>

<p><font color=#999AAA >微博有相册功能，那么我们如何批量下载相册中的所有照片呢？</font></p>
<p><font color=#999AAA >以下是本篇文章正文内容，下面案例可供参考</p>
<h1 id="一、分析实现思路"><a href="#一、分析实现思路" class="headerlink" title="一、分析实现思路"></a>一、分析实现思路</h1><p><font color=#999AAA >因为微博相册也是前后端分离，所以我们先去抓包对应的json数据<br><img src="https://img-blog.csdnimg.cn/20210103180658279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"></p>
<a id="more"></a>

<p>这里以李荣浩的相册为例，一共有25页：<br><img src="https://img-blog.csdnimg.cn/20210103180747572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>分析得出实际的链接应该为：’<a href="https://wx4.sinaimg.cn/large/&#39;">https://wx4.sinaimg.cn/large/&#39;</a> + pic_name<br><strong>再来看看链接循环爬取的分析</strong><br><img src="https://img-blog.csdnimg.cn/20210103181211482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>这里只需要更改page的值即可实现循环爬取</p>
<h1 id="二、编写代码"><a href="#二、编写代码" class="headerlink" title="二、编写代码"></a>二、编写代码</h1><h2 id="1-引入库"><a href="#1-引入库" class="headerlink" title="1.引入库"></a>1.引入库</h2><p><font color=#999AAA >代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent <span class="comment"># 伪装机型</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread <span class="comment"># 多进程</span></span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue <span class="comment"># 队列</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">	<span class="comment"># cookie 每天会变化，需要即使更换</span></span><br><span class="line">    <span class="string">&#x27;cookie&#x27;</span>: <span class="string">&#x27;SINAGLOBAL=74744724261.95033.1605948585466; wvr=6; &#x27;</span></span><br><span class="line">              <span class="string">&#x27;SUBP=0033WrSXqPxfM725Ws9jqgMF55529P9D9Whrq6C5pCwQBNf5XnQhDpfE5JpX5KMhUgL.Fo&#x27;</span></span><br><span class="line">              <span class="string">&#x27;-cehB7eoqpSKM2dJLoIEBLxKBLBonL12BLxKqL1KnL12-LxKnLBKML1h.LxKMLBKqLB.zt; ALF=1641197487; &#x27;</span></span><br><span class="line">              <span class="string">&#x27;SSOLoginState=1609661488; &#x27;</span></span><br><span class="line">              <span class="string">&#x27;SCF=AqFdnOicaqrQ3UjYRBY-C8Kp3PwjrkfR1lPLA0W8mjbwb9rIU1MBf0l9kWk3ahdAXFldqtvqcZ7UW_ehPXfM1JE.; &#x27;</span></span><br><span class="line">              <span class="string">&#x27;SUB=_2A25y9QxgDeRhGeNI61YR8ijNzjuIHXVRg3qorDV8PUNbmtAKLVTukW9NSH08UxX8Md1T1NOxjdEP88XVg1aJmi7t; &#x27;</span></span><br><span class="line">              <span class="string">&#x27;_s_tentry=login.sina.com.cn; Apache=9994350802777.143.1609661492706; &#x27;</span></span><br><span class="line">              <span class="string">&#x27;ULV=1609661492740:9:6:2:9994350802777.143.1609661492706:1609657348149; UOR=,,www.baidu.com; &#x27;</span></span><br><span class="line">              <span class="string">&#x27;webim_unReadCount=%7B%22time%22%3A1609666074015%2C%22dm_pub_total%22%3A0%2C%22chat_group_client%22%3A0&#x27;</span></span><br><span class="line">              <span class="string">&#x27;%2C%22chat_group_notice%22%3A0%2C%22allcountNum%22%3A3%2C%22msgbox%22%3A0%7D; &#x27;</span></span><br><span class="line">              <span class="string">&#x27;WBStorage=8daec78e6a891122|undefined&#x27;</span>,</span><br><span class="line">    <span class="comment"># 从哪里来</span></span><br><span class="line">    <span class="string">&#x27;referer&#x27;</span>: <span class="string">&#x27;https://photo.weibo.com/6816603335/talbum/index&#x27;</span>,</span><br><span class="line">    <span class="comment"># 伪装头</span></span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class="line">                  <span class="string">&#x27;Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.66 &#x27;</span>,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 下载时图片的伪装头</span></span><br><span class="line">fake = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: UserAgent().random</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># ip代理池</span></span><br><span class="line">proxy_pool = [&#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;183.166.70.110:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;58.22.177.215:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;175.44.109.28:9999&#x27;</span>&#125;,</span><br><span class="line">              &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;175.42.128.211:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;113.121.76.254:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;175.42.122.166:9999&#x27;</span>&#125;,</span><br><span class="line">              &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;175.42.122.233:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;113.121.42.214:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;113.195.152.127:9999&#x27;</span>&#125;,</span><br><span class="line">              &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;175.42.129.78:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;171.35.213.172:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;113.121.37.163:9999&#x27;</span>&#125;]</span><br><span class="line"><span class="comment"># 访问json数据的url</span></span><br><span class="line">url = <span class="string">&#x27;https://photo.weibo.com/photos/get_all&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-多进程的编写"><a href="#2-多进程的编写" class="headerlink" title="2.多进程的编写"></a>2.多进程的编写</h2><p><font color=#999AAA >代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpiderImg</span>(<span class="params">Thread</span>):</span></span><br><span class="line">	<span class="comment"># 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, d</span>):</span></span><br><span class="line">        Thread.__init__(self)</span><br><span class="line">        self.data = d</span><br><span class="line">	<span class="comment"># 重写run方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">    	<span class="comment"># 当队列不为空的时候下载对应的url下的图片</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.data.empty():</span><br><span class="line">        	<span class="comment"># 取队列</span></span><br><span class="line">            a = self.data.get()</span><br><span class="line">            <span class="comment"># 获得id和url数据</span></span><br><span class="line">            i_id = <span class="built_in">list</span>(a.keys())[<span class="number">0</span>]</span><br><span class="line">            i_url = <span class="built_in">list</span>(a.values())[<span class="number">0</span>]</span><br><span class="line">            <span class="comment"># 访问链接取得数据</span></span><br><span class="line">            img = requests.get(url=i_url, headers=fake, proxies=random.choice(proxy_pool)).content</span><br><span class="line">            <span class="comment"># 将文件写入指定路径下的文件夹</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;E:/SpiderImg/李荣浩/&#123;&#125;.jpg&#x27;</span>.<span class="built_in">format</span>(i_id), <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> t:</span><br><span class="line">                t.write(img)</span><br><span class="line">                print(i_id + <span class="string">&#x27;.jpg&#x27;</span> + <span class="string">&#x27; &#x27;</span> * <span class="number">4</span> + <span class="string">&#x27;下载完毕&#x27;</span> + <span class="string">&#x27;.&#x27;</span> * <span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<p><font color=#999AAA >为了开启多进程爬取图片</p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h2 id="3-主函数的编写"><a href="#3-主函数的编写" class="headerlink" title="3.主函数的编写"></a>3.主函数的编写</h2><p><font color=#999AAA >代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	<span class="comment"># 初始化队列</span></span><br><span class="line">    data_queue = Queue()</span><br><span class="line">    <span class="comment"># 循环</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">26</span>):</span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">&#x27;uid&#x27;</span>: <span class="string">&#x27;1739046981&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;album_id&#x27;</span>: <span class="string">&#x27;3581934839144367&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;count&#x27;</span>: <span class="string">&#x27;30&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;page&#x27;</span>: i,</span><br><span class="line">            <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;3&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__rnd&#x27;</span>: <span class="string">&#x27;1609667183074&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        print(<span class="string">&#x27;正在爬取第&#123;&#125;页&#x27;</span>.<span class="built_in">format</span>(i) + <span class="string">&#x27;.&#x27;</span> * <span class="number">4</span>)</span><br><span class="line">        response = requests.get(url=url, params=params, headers=headers).json()</span><br><span class="line">		<span class="comment"># 解析数据</span></span><br><span class="line">        photo_list = response.get(<span class="string">&#x27;data&#x27;</span>).get(<span class="string">&#x27;photo_list&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> photo <span class="keyword">in</span> photo_list:</span><br><span class="line">        	<span class="comment"># 取得其中的pic_name 和 pic_name </span></span><br><span class="line">            pic_name = photo.get(<span class="string">&#x27;pic_name&#x27;</span>)</span><br><span class="line">            pic_name = photo.get(<span class="string">&#x27;photo_id&#x27;</span>)</span><br><span class="line">            photo_url = <span class="string">&#x27;https://wx4.sinaimg.cn/large/&#x27;</span> + pic_name</span><br><span class="line">            <span class="comment"># 添加到队列中</span></span><br><span class="line">            data_queue.put(&#123;photo_id: photo_url&#125;)</span><br><span class="line">	<span class="comment"># 开启多进程，根据队列中存放的url数据，下载图片</span></span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">        spider = SpiderImg(data_queue)</span><br><span class="line">        spider.start()</span><br></pre></td></tr></table></figure>
<h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p><font color=#999AAA >程序运行结果：<br><img src="https://img-blog.csdnimg.cn/20210103182940445.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br><strong>注：案例仅供学习</strong></p>
]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>微博</tag>
        <tag>相册</tag>
      </tags>
  </entry>
  <entry>
    <title>按日期爬取b站弹幕二</title>
    <url>/posts/24b45e76/</url>
    <content><![CDATA[<font color=#999AAA >
上次的b站爬取需要手动输入日期等信息，这次直接在程序内根据时间差进行爬取，直接放上完整代码。
</font>




<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>上次的分析链接在此：<a href="https://blog.csdn.net/HandsomeFishman/article/details/112171386">b站弹幕爬取分析</a><br><font color=#999AAA >直接附上完整代码：</font></p>
<a id="more"></a>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BarrageSpider</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, bv</span>):</span></span><br><span class="line">        <span class="comment"># 需要一个bv号，在接下来的代码中进行替换操作</span></span><br><span class="line">        self.bv = bv</span><br><span class="line">        self.video_name = <span class="literal">None</span></span><br><span class="line">        <span class="comment"># 不需要登录的弹幕接口地址 只能爬取部分弹幕</span></span><br><span class="line">        self.barrage_url = <span class="string">&#x27;https://comment.bilibili.com/&#123;&#125;.xml&#x27;</span></span><br><span class="line">        <span class="comment"># 需要登陆的弹幕接口地址 根据日期进行分类 需要循环爬取 最后归总数据</span></span><br><span class="line">        self.date_url = <span class="string">&#x27;https://api.bilibili.com/x/v2/dm/history?type=1&amp;oid=&#123;&#125;&amp;date=&#123;&#125;&#x27;</span>  <span class="comment"># 2021-01-01</span></span><br><span class="line">        <span class="comment"># 点击按钮弹出日历的数据接口，这里我们用来作索引</span></span><br><span class="line">        self.index_url = <span class="string">&#x27;https://api.bilibili.com/x/v2/dm/history/index?type=1&amp;oid=&#123;&#125;&amp;month=&#123;&#125;&#x27;</span>  <span class="comment"># 2021-01</span></span><br><span class="line">        <span class="comment"># 在抓包工具中找的一个简洁的请求，里面有我们需要的oid或者是cid</span></span><br><span class="line">        self.bv_url = <span class="string">&#x27;https://api.bilibili.com/x/player/pagelist?bvid=&#x27;</span> + bv + <span class="string">&#x27;&amp;jsonp=jsonp&#x27;</span></span><br><span class="line">        <span class="comment"># 视频时间获取</span></span><br><span class="line">        self.video_url = <span class="string">&#x27;https://www.bilibili.com/video/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(bv)</span><br><span class="line">        <span class="comment"># 不需要登录接口的伪装头</span></span><br><span class="line">        self.comment = &#123;</span><br><span class="line">            <span class="string">&#x27;referer&#x27;</span>: <span class="string">&#x27;https://www.bilibili.com/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class="line">                          <span class="string">&#x27;Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.66 &#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 需要登录的伪装头 因为需要登录 ip代理已经没有意义了 这里就不再使用IP代理</span></span><br><span class="line">        self.date_headers = &#123;</span><br><span class="line">            <span class="string">&quot;referer&quot;</span>: <span class="string">&quot;https://www.bilibili.com/&quot;</span>,</span><br><span class="line">            <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;https://www.bilibili.com&quot;</span>,</span><br><span class="line">            <span class="string">&quot;cookie&quot;</span>: <span class="string">&quot;你的cookie 爬很久远的视频 会被封ip 后面接收到的都是空结果&quot;</span>,</span><br><span class="line">            <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &quot;</span></span><br><span class="line">                          <span class="string">&quot;Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.66 &quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从接口返回的json中获取到我们的cid 注： cid = oid</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_cid</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 定位到数据data中下面的cid</span></span><br><span class="line">        <span class="keyword">return</span> requests.get(url=self.bv_url, headers=self.comment).json()[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;cid&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_video_time</span>(<span class="params">self</span>):</span></span><br><span class="line">        time_data = requests.get(url=self.video_url, headers=self.comment).text</span><br><span class="line">        video_page = etree.HTML(time_data)</span><br><span class="line">        v_time = video_page.xpath(<span class="string">&#x27;//div[@class=&quot;video-data&quot;]/span[3]/text()&#x27;</span>)[<span class="number">0</span>].split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        self.video_name = video_page.xpath(<span class="string">&#x27;//h1[@class=&quot;video-title&quot;]/span/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> v_time</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析不需要登录的接口 返回类型是xml文件</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_url</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 获取指定视频的cid/oid</span></span><br><span class="line">        cid = self.get_cid()</span><br><span class="line">        <span class="comment"># 对页面进行伪装请求，这里注意不要转换成text，使用二进制</span></span><br><span class="line">        response = requests.get(url=self.barrage_url.<span class="built_in">format</span>(cid), headers=self.comment).content</span><br><span class="line">        <span class="comment"># etree解析</span></span><br><span class="line">        data = etree.HTML(response)</span><br><span class="line">        <span class="comment"># 定位到所有的d元素</span></span><br><span class="line">        barrage_list = data.xpath(<span class="string">&#x27;//d&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> barrage <span class="keyword">in</span> barrage_list:</span><br><span class="line">            <span class="comment"># 获取d元素的p属性值</span></span><br><span class="line">            info = barrage.xpath(<span class="string">&#x27;./@p&#x27;</span>)[<span class="number">0</span>].split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">            <span class="comment"># 获取弹幕内容</span></span><br><span class="line">            content = barrage.xpath(<span class="string">&#x27;./text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            item = &#123;<span class="string">&#x27;出现时间&#x27;</span>: info[<span class="number">0</span>], <span class="string">&#x27;弹幕模式&#x27;</span>: info[<span class="number">1</span>], <span class="string">&#x27;字体大小&#x27;</span>: info[<span class="number">2</span>], <span class="string">&#x27;颜色&#x27;</span>: info[<span class="number">3</span>], <span class="string">&#x27;发送时间&#x27;</span>: info[<span class="number">4</span>], <span class="string">&#x27;弹幕池&#x27;</span>: info[<span class="number">5</span>],</span><br><span class="line">                    <span class="string">&#x27;用户ID&#x27;</span>: info[<span class="number">6</span>], <span class="string">&#x27;rowID&#x27;</span>: info[<span class="number">7</span>], <span class="string">&#x27;内容&#x27;</span>: content&#125;</span><br><span class="line">            <span class="comment"># 因为这只是一部分弹幕 所以就没有进行持久化存储 没有必要</span></span><br><span class="line">            print(item)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 循环爬取所有弹幕 需要传入month的数据 根据视频发布的日期到现在的所有月份</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_date_url</span>(<span class="params">self, month</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;正在爬取&#123;&#125;月份的数据&#x27;</span>.<span class="built_in">format</span>(month))</span><br><span class="line">        <span class="comment"># 存放爬到的数据</span></span><br><span class="line">        result = []</span><br><span class="line">        <span class="comment"># 获取视频的oid</span></span><br><span class="line">        oid = self.get_cid()</span><br><span class="line">        <span class="comment"># 获取日期索引</span></span><br><span class="line">        date_by_month = requests.get(url=self.index_url.<span class="built_in">format</span>(oid, month), headers=self.date_headers).json().get(</span><br><span class="line">            <span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">        <span class="comment"># 根据日期索引循环请求</span></span><br><span class="line">        <span class="keyword">if</span> date_by_month:</span><br><span class="line">            <span class="keyword">for</span> day <span class="keyword">in</span> date_by_month:</span><br><span class="line">                print(<span class="string">&#x27;&#123;&#125;月份数据下的&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(month, day))</span><br><span class="line">                <span class="comment"># 注意还是二进制文件</span></span><br><span class="line">                date_page = requests.get(url=self.date_url.<span class="built_in">format</span>(oid, day), headers=self.date_headers).content</span><br><span class="line">                date_data = etree.HTML(date_page)</span><br><span class="line">                <span class="comment"># 解析到到所有的d元素</span></span><br><span class="line">                barrage_list = date_data.xpath(<span class="string">&#x27;//d&#x27;</span>)</span><br><span class="line">                <span class="comment"># 循环解析数据</span></span><br><span class="line">                <span class="keyword">for</span> barrage <span class="keyword">in</span> barrage_list:</span><br><span class="line">                    <span class="comment"># 获取d元素的p属性值</span></span><br><span class="line">                    things = barrage.xpath(<span class="string">&#x27;./@p&#x27;</span>)[<span class="number">0</span>].split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">                    <span class="comment"># 获取弹幕内容 并去掉所有空格</span></span><br><span class="line">                    content = barrage.xpath(<span class="string">&#x27;./text()&#x27;</span>)[<span class="number">0</span>].replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">                    item = &#123;<span class="string">&#x27;出现时间&#x27;</span>: things[<span class="number">0</span>], <span class="string">&#x27;弹幕模式&#x27;</span>: things[<span class="number">1</span>], <span class="string">&#x27;字体大小&#x27;</span>: things[<span class="number">2</span>], <span class="string">&#x27;颜色&#x27;</span>: things[<span class="number">3</span>], <span class="string">&#x27;发送时间&#x27;</span>: things[<span class="number">4</span>],</span><br><span class="line">                            <span class="string">&#x27;弹幕池&#x27;</span>: things[<span class="number">5</span>],</span><br><span class="line">                            <span class="string">&#x27;用户ID&#x27;</span>: things[<span class="number">6</span>], <span class="string">&#x27;rowID&#x27;</span>: things[<span class="number">7</span>], <span class="string">&#x27;内容&#x27;</span>: content&#125;</span><br><span class="line">                    result.append(item)</span><br><span class="line">        <span class="comment"># 返回封装好的数据</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据现在的时间遍历所有的月份信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_month</span>(<span class="params">self</span>):</span></span><br><span class="line">        start_day = datetime.datetime.strptime(self.get_video_time(), <span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line">        end_day = datetime.date.today()</span><br><span class="line">        months = (end_day.year - start_day.year) * <span class="number">12</span> + end_day.month - start_day.month</span><br><span class="line">        m_list = []</span><br><span class="line">        <span class="keyword">for</span> mon <span class="keyword">in</span> <span class="built_in">range</span>(start_day.month - <span class="number">1</span>, start_day.month + months):</span><br><span class="line">            <span class="keyword">if</span> (mon % <span class="number">12</span> + <span class="number">1</span>) &lt; <span class="number">10</span>:</span><br><span class="line">                m_list.append(<span class="string">&#x27;&#123;&#125;-0&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(start_day.year + mon // <span class="number">12</span>, mon % <span class="number">12</span> + <span class="number">1</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                m_list.append(<span class="string">&#x27;&#123;&#125;-&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(start_day.year + mon // <span class="number">12</span>, mon % <span class="number">12</span> + <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> m_list</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 舍友指导下的一行代码生成词云 编译器自动格式化了 本质还是一行代码</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wordCloud</span>(<span class="params">self</span>):</span></span><br><span class="line">        WordCloud(font_path=<span class="string">&quot;C:/Windows/Fonts/simfang.ttf&quot;</span>, background_color=<span class="string">&#x27;white&#x27;</span>, scale=<span class="number">16</span>).generate(<span class="string">&quot; &quot;</span>.join(</span><br><span class="line">            [c <span class="keyword">for</span> c <span class="keyword">in</span> jieba.cut(<span class="string">&quot;&quot;</span>.join(<span class="built_in">str</span>((pd.read_csv(<span class="string">&#x27;&#123;&#125;弹幕池数据集.csv&#x27;</span>.<span class="built_in">format</span>(self.video_name))[<span class="string">&#x27;内容&#x27;</span>]).tolist()))) <span class="keyword">if</span></span><br><span class="line">             <span class="built_in">len</span>(c) &gt; <span class="number">1</span>])).to_file(</span><br><span class="line">            <span class="string">&quot;&#123;&#125;词云.png&quot;</span>.<span class="built_in">format</span>(self.video_name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 输入指定的视频bv号</span></span><br><span class="line">    bv_id = <span class="built_in">input</span>(<span class="string">&#x27;输入视频对应的bv号:&#x27;</span>)</span><br><span class="line">    <span class="comment"># new一个对象</span></span><br><span class="line">    spider = BarrageSpider(bv_id)</span><br><span class="line">    spider.parse_month()</span><br><span class="line">    <span class="comment"># 请求今年1月和去年12月的数据 并合并数据</span></span><br><span class="line">    word_data = []</span><br><span class="line">    months = spider.parse_month()</span><br><span class="line">    <span class="comment"># 循环遍历爬取</span></span><br><span class="line">    <span class="keyword">for</span> month <span class="keyword">in</span> months:</span><br><span class="line">        word = spider.parse_date_url(month)</span><br><span class="line">        word_data.extend(word)</span><br><span class="line">    <span class="comment"># 数据格式化处理 并输出csv格式文件</span></span><br><span class="line">    data = pd.DataFrame(word_data)</span><br><span class="line">    data.drop_duplicates(subset=[<span class="string">&#x27;rowID&#x27;</span>], keep=<span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">    <span class="comment"># 字符集编码需要为utf-8-sig 不然会乱码</span></span><br><span class="line">    data.to_csv(<span class="string">&#x27;&#123;&#125;弹幕池数据集.csv&#x27;</span>.<span class="built_in">format</span>(spider.video_name), index=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8-sig&#x27;</span>)</span><br><span class="line">    <span class="comment"># # 生成词云</span></span><br><span class="line">    spider.wordCloud()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p><img src="https://img-blog.csdnimg.cn/2021010714345345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210107143523237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210107143558160.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>这里只有十八万行…是因为刚开始测试的时候忘记在月份前加0。代码里已经更正。<br>更正后 爬取了骚猪的视频：<br><img src="https://img-blog.csdnimg.cn/2021010717522992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>视频上显示16万弹幕，实际则有67万，而且爬到19年后，获取的都为空数据，预测实际弹幕有100万左右。<br><img src="https://img-blog.csdnimg.cn/20210107175840869.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210107175851199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"></p>
<p>可以通过多账号的方式爬取完整弹幕，这里就不做了。</p>
]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>B站</tag>
        <tag>弹幕</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构-第三章-栈和队列</title>
    <url>/posts/5116f53a/</url>
    <content><![CDATA[<h1 id="栈的基本操作"><a href="#栈的基本操作" class="headerlink" title="栈的基本操作"></a>栈的基本操作</h1><p><img src="https://pic.rmb.bdstatic.com/bjh/15382f39117333117b6470477593053d.png"></p>
<a id="more"></a>

<h1 id="栈的顺序存储"><a href="#栈的顺序存储" class="headerlink" title="栈的顺序存储"></a>栈的顺序存储</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Maxsize 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> data[Maxsize];</span><br><span class="line">	<span class="keyword">int</span> top;</span><br><span class="line">&#125;SqStack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStack</span><span class="params">(SqStack&amp; S)</span> </span>&#123;</span><br><span class="line">	S.top = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(SqStack S)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> S.top == <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push</span><span class="params">(SqStack&amp; S, <span class="keyword">int</span> element)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (S.top == Maxsize - <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	S.data[++S.top] = element;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Pop</span><span class="params">(SqStack&amp; S)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (S.top == <span class="number">-1</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> S.data[S.top--];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetTop</span><span class="params">(SqStack S)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (S.top == <span class="number">-1</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> S.data[S.top];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowStack</span><span class="params">(SqStack S)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= S.top; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, S.data[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SqStack S;</span><br><span class="line">	InitStack(S);</span><br><span class="line">	Push(S, <span class="number">1</span>);</span><br><span class="line">	Push(S, <span class="number">3</span>);</span><br><span class="line">	Push(S, <span class="number">5</span>);</span><br><span class="line">	Push(S, <span class="number">7</span>);</span><br><span class="line">	Push(S, <span class="number">9</span>);</span><br><span class="line">	<span class="keyword">if</span> (isEmpty(S)) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;空的\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;不是空的\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	ShowStack(S);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n出栈的元素是：%d&quot;</span>, Pop(S));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n出栈的元素是：%d\n&quot;</span>, Pop(S));</span><br><span class="line">	ShowStack(S);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.rmb.bdstatic.com/bjh/b3824ab532b7fbc47ce496678440bb4b.png"></p>
<p>另一种方式，初始化时top=0</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Maxsize 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> data[Maxsize];</span><br><span class="line">	<span class="keyword">int</span> top;</span><br><span class="line">&#125;SqStack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStack</span><span class="params">(SqStack &amp;S)</span> </span>&#123;</span><br><span class="line">	S.top = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push</span><span class="params">(SqStack &amp;S, <span class="keyword">int</span> element)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (S.top == Maxsize)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	S.data[S.top++] = element;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Pop</span><span class="params">(SqStack &amp;S)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!S.data[<span class="number">0</span>])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> S.data[--S.top];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>共享栈</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Maxsize 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> data[Maxsize];</span><br><span class="line">	<span class="keyword">int</span> top0;</span><br><span class="line">	<span class="keyword">int</span> top1;</span><br><span class="line">&#125;SqStack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStack</span><span class="params">(SqStack &amp;S)</span> </span>&#123;</span><br><span class="line">	S.top0 = <span class="number">-1</span>;</span><br><span class="line">	S.top1 = Maxsize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>栈的链式存储</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;*LiStack;</span><br></pre></td></tr></table></figure>
<h1 id="队列的基本操作"><a href="#队列的基本操作" class="headerlink" title="队列的基本操作"></a>队列的基本操作</h1><p><img src="https://pic.rmb.bdstatic.com/bjh/76f11fdd5d493e9627900c9df7803820.png"></p>
<h1 id="队列的顺序实现"><a href="#队列的顺序实现" class="headerlink" title="队列的顺序实现"></a>队列的顺序实现</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Maxsize 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> data[Maxsize];</span><br><span class="line">	<span class="keyword">int</span> front, rear;</span><br><span class="line">&#125;SqQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化队列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(SqQueue &amp;Q)</span> </span>&#123;</span><br><span class="line">	Q.rear = Q.front = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(SqQueue Q)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> Q.front == Q.rear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">EnQueue</span><span class="params">(SqQueue &amp;Q, <span class="keyword">int</span> element)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//判断队列是否已满</span></span><br><span class="line">	<span class="keyword">if</span> ((Q.rear + <span class="number">1</span>) % Maxsize == Q.front)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	Q.data[Q.rear] = element;</span><br><span class="line">	Q.rear = (Q.rear + <span class="number">1</span>) % Maxsize;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DeQueue</span><span class="params">(SqQueue &amp;Q)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//判断队列是否为空</span></span><br><span class="line">	<span class="keyword">if</span> (Q.rear == Q.rear)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> element = Q.data[Q.front];</span><br><span class="line">	Q.front = (Q.front + <span class="number">1</span>) / Maxsize;</span><br><span class="line">	<span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetHead</span><span class="params">(SqQueue &amp;Q)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//判断队列是否为空</span></span><br><span class="line">	<span class="keyword">if</span> (Q.rear == Q.front)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> Q.data[Q.front];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="队列的链式实现"><a href="#队列的链式实现" class="headerlink" title="队列的链式实现"></a>队列的链式实现</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;LinkNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	LinkNode* front, * rear;</span><br><span class="line">&#125;LinkQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//带头结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(LinkQueue &amp;Q)</span> </span>&#123;</span><br><span class="line">	Q.front = Q.rear = (LinkNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">	Q.front-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不带头节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueueNoHead</span><span class="params">(LinkQueue &amp;Q)</span> </span>&#123;</span><br><span class="line">	Q.front = Q.rear = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(LinkQueue Q)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> Q.front == Q.rear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新元素入队 带头结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EnQueue</span><span class="params">(LinkQueue &amp;Q, <span class="keyword">int</span> element)</span> </span>&#123;</span><br><span class="line">	LinkNode* new_point = (LinkNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">	new_point-&gt;data = element;</span><br><span class="line">	new_point-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	Q.rear-&gt;next = new_point;</span><br><span class="line">	Q.rear = new_point;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新元素入队 不带头节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EnQueueNoHead</span><span class="params">(LinkQueue &amp;Q, <span class="keyword">int</span> element)</span> </span>&#123;</span><br><span class="line">	LinkNode* new_point = (LinkNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">	new_point-&gt;data = element;</span><br><span class="line">	new_point-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">if</span> (Q.front == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		Q.front = new_point;</span><br><span class="line">		Q.rear = new_point;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		Q.rear-&gt;next = new_point;</span><br><span class="line">		Q.rear = new_point;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出队 带头结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeQueue</span><span class="params">(LinkQueue &amp;Q)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Q.front == Q.rear)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;队列为空&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		LinkNode* point = Q.front-&gt;next;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;出队的元素是%d\n&quot;</span>, point-&gt;data);</span><br><span class="line">		Q.front-&gt;next = point-&gt;next;</span><br><span class="line">		<span class="keyword">if</span> (Q.rear == point)</span><br><span class="line">		&#123;</span><br><span class="line">			Q.rear = Q.front;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">free</span>(point);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出队 不带头节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeQueueNoHead</span><span class="params">(LinkQueue &amp;Q)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Q.front = <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;队列为空&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		LinkNode* point = Q.front;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;出队的元素是%d\n&quot;</span>, point-&gt;data);</span><br><span class="line">		Q.front = point-&gt;next;</span><br><span class="line">		<span class="keyword">if</span> (Q.rear == point)</span><br><span class="line">		&#123;</span><br><span class="line">			Q.front = Q.rear = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">free</span>(point);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowQueue</span><span class="params">(LinkQueue Q)</span> </span>&#123;</span><br><span class="line">	LinkNode* point = Q.front-&gt;next;</span><br><span class="line">	<span class="keyword">while</span> (point!= <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, point-&gt;data);</span><br><span class="line">		point = point-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(point);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	LinkQueue Q;</span><br><span class="line">	InitQueue(Q);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		EnQueue(Q, i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (isEmpty(Q))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;队列为空&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;队列不为空&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	ShowQueue(Q);</span><br><span class="line">	DeQueue(Q);</span><br><span class="line">	DeQueue(Q);</span><br><span class="line">	DeQueue(Q);</span><br><span class="line">	EnQueue(Q, <span class="number">0</span>);</span><br><span class="line">	EnQueue(Q, <span class="number">1</span>);</span><br><span class="line">	EnQueue(Q, <span class="number">2</span>);</span><br><span class="line">	ShowQueue(Q);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.rmb.bdstatic.com/bjh/069590cce32148cc51763b80e2b86185.png"></p>
<h1 id="栈在括号匹配中的引用"><a href="#栈在括号匹配中的引用" class="headerlink" title="栈在括号匹配中的引用"></a>栈在括号匹配中的引用</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Maxsize 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">char</span> data[Maxsize];</span><br><span class="line">	<span class="keyword">int</span> top;</span><br><span class="line">&#125;SqStack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStack</span><span class="params">(SqStack&amp; S)</span> </span>&#123;</span><br><span class="line">	S.top = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(SqStack S)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> S.top == <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push</span><span class="params">(SqStack&amp; S, <span class="keyword">char</span> element)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (S.top == Maxsize - <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	S.data[++S.top] = element;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Pop</span><span class="params">(SqStack&amp; S)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (S.top == <span class="number">-1</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> S.data[S.top--];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetTop</span><span class="params">(SqStack S)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (S.top == <span class="number">-1</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> S.data[S.top];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowStack</span><span class="params">(SqStack S)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= S.top; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, S.data[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bracketCheck</span><span class="params">(<span class="keyword">char</span> str[], <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">	SqStack S;</span><br><span class="line">	InitStack(S);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (str[i] == <span class="string">&#x27;(&#x27;</span> || str[i] == <span class="string">&#x27;[&#x27;</span> || str[i] == <span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			Push(S, str[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (isEmpty(S))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;栈为空&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">char</span> topElement = Pop(S);</span><br><span class="line">				<span class="keyword">if</span> (str[i] == <span class="string">&#x27;)&#x27;</span> &amp;&amp; topElement != <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;匹配不正确！&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (str[i] == <span class="string">&#x27;]&#x27;</span> &amp;&amp; topElement != <span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;匹配不正确！&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (str[i] == <span class="string">&#x27;&#125;&#x27;</span> &amp;&amp; topElement != <span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;匹配不正确！&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (isEmpty(S))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;匹配成功！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;匹配失败！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">	<span class="keyword">char</span> str_char[] = &#123; <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span> &#125;;</span><br><span class="line">	bracketCheck(str_char, (<span class="keyword">sizeof</span>(str_char)/<span class="keyword">sizeof</span>(str_char[<span class="number">0</span>])));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.rmb.bdstatic.com/bjh/eec0d16d0052e9bcb803c70320dd6d91.png"></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>考研</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构-第五章-树与二叉树</title>
    <url>/posts/abac19d0/</url>
    <content><![CDATA[<h1 id="二叉树的存储"><a href="#二叉树的存储" class="headerlink" title="二叉树的存储"></a>二叉树的存储</h1><p><img src="https://pic.rmb.bdstatic.com/bjh/3a7e2ffff9a918faa752fa5e69416b93.png"></p>
<a id="more"></a>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Maxsize 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//顺序存储</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> value;</span><br><span class="line">	<span class="keyword">bool</span> isEmpty;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="comment">//TreeNode t[Maxsize];</span></span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; Maxsize; i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	t[i].isEmpty = true;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉树的链式存储</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ElemType</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> &#123;</span></span><br><span class="line">	ElemType data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>* <span class="title">left_child</span>, * <span class="title">right_child</span>, * <span class="title">parent</span>;</span></span><br><span class="line">&#125;BiTNode, * BiTree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//定义一颗空树</span></span><br><span class="line">	BiTree root = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="comment">//插入空结点</span></span><br><span class="line">	root = (BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTree));</span><br><span class="line">	root-&gt;data.value = &#123; <span class="number">1</span> &#125;;</span><br><span class="line">	root-&gt;left_child = <span class="literal">NULL</span>;</span><br><span class="line">	root-&gt;right_child = <span class="literal">NULL</span>;</span><br><span class="line">	root-&gt;parent = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="comment">//插入新的结点</span></span><br><span class="line">	BiTNode* point = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">	point-&gt;data.value = &#123; <span class="number">2</span> &#125;;</span><br><span class="line">	point-&gt;left_child = <span class="literal">NULL</span>;</span><br><span class="line">	point-&gt;right_child = <span class="literal">NULL</span>;</span><br><span class="line">	point-&gt;parent = root;</span><br><span class="line">	root-&gt;left_child = point;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="二叉树的先中后序遍历"><a href="#二叉树的先中后序遍历" class="headerlink" title="二叉树的先中后序遍历"></a>二叉树的先中后序遍历</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ElemType</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> &#123;</span></span><br><span class="line">	ElemType data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>* <span class="title">left_child</span>, * <span class="title">right_child</span>;</span></span><br><span class="line">&#125;BiTNode, * BiTree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(BiTNode B)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, B.data.value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(BiTree B)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, B-&gt;data.value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrder</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		visit(T);</span><br><span class="line">		PreOrder(T-&gt;left_child);</span><br><span class="line">		PreOrder(T-&gt;right_child);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrder</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		InOrder(T-&gt;left_child);</span><br><span class="line">		visit(T);</span><br><span class="line">		InOrder(T-&gt;right_child);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrder</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		PostOrder(T-&gt;left_child);</span><br><span class="line">		PostOrder(T-&gt;right_child);</span><br><span class="line">		visit(T);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求树的深度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">treeDepth</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (T == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> left = treeDepth(T-&gt;left_child);</span><br><span class="line">		<span class="keyword">int</span> right = treeDepth(T-&gt;right_child);</span><br><span class="line">		<span class="keyword">return</span> left &gt; right ? left + <span class="number">1</span> : right + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="二叉树的层次遍历"><a href="#二叉树的层次遍历" class="headerlink" title="二叉树的层次遍历"></a>二叉树的层次遍历</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉树的链式存储</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> &#123;</span></span><br><span class="line">	<span class="keyword">char</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>* <span class="title">left_child</span>, * <span class="title">right_child</span>;</span></span><br><span class="line">&#125;BiTNode, * BiTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链式队列结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span> &#123;</span></span><br><span class="line">	BiTNode* data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;LinkNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//队头队尾</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	LinkNode* front, * rear;</span><br><span class="line">&#125;LinkQueue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(BiTNode B)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, B.data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(BiTree B)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, B-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化队列 带头结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(LinkQueue &amp;Q)</span> </span>&#123;</span><br><span class="line">	Q.front = Q.rear = (LinkNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">	Q.front-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(LinkQueue Q)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> Q.front == Q.rear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新元素入队</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EnQueue</span><span class="params">(LinkQueue &amp;Q, BiTNode* element)</span> </span>&#123;</span><br><span class="line">	LinkNode* new_point = (LinkNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">	new_point-&gt;data = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">	new_point-&gt;data = element;</span><br><span class="line">	new_point-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	Q.rear-&gt;next = new_point;</span><br><span class="line">	Q.rear = new_point;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeQueue</span><span class="params">(LinkQueue &amp;Q, BiTree&amp; T)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Q.front == Q.rear)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;队列为空&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		LinkNode* new_point = Q.front-&gt;next;</span><br><span class="line">		T = new_point-&gt;data;</span><br><span class="line">		Q.front-&gt;next = new_point-&gt;next;</span><br><span class="line">		<span class="keyword">if</span> (Q.rear == new_point)</span><br><span class="line">		&#123;</span><br><span class="line">			Q.rear = Q.front;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">free</span>(new_point);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据先序排列建立二叉树</span></span><br><span class="line"><span class="function">BiTNode* <span class="title">InitTree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	BiTNode* point = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">char</span> ch;</span><br><span class="line">	scanf_s(<span class="string">&quot;%c&quot;</span>, &amp;ch);</span><br><span class="line">	<span class="keyword">if</span> (ch == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		point == <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		point = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">		point-&gt;data = ch;</span><br><span class="line">		point-&gt;left_child = InitTree();</span><br><span class="line">		point-&gt;right_child = InitTree();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> point;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//层序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LevelOrder</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">	LinkQueue Q;</span><br><span class="line">	InitQueue(Q);</span><br><span class="line">	BiTree point;</span><br><span class="line">	EnQueue(Q, T);</span><br><span class="line">	<span class="keyword">while</span> (!isEmpty(Q))</span><br><span class="line">	&#123;</span><br><span class="line">		DeQueue(Q, point);</span><br><span class="line">		visit(point);</span><br><span class="line">		<span class="keyword">if</span> (point-&gt;left_child)</span><br><span class="line">		&#123;</span><br><span class="line">			EnQueue(Q, point-&gt;left_child);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (point-&gt;right_child)</span><br><span class="line">		&#123;</span><br><span class="line">			EnQueue(Q, point-&gt;right_child);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	BiTree T = InitTree();</span><br><span class="line">	LevelOrder(T);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.rmb.bdstatic.com/bjh/f1def503c4b0e0de5e35829e99a10709.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/8ce3b1f731785ffd3c9573be513d28a4.png"></p>
<h1 id="二叉树的线索化"><a href="#二叉树的线索化" class="headerlink" title="二叉树的线索化"></a>二叉树的线索化</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ThreadNode</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">ThreadNode</span>* <span class="title">left_child</span>, * <span class="title">right_child</span>;</span></span><br><span class="line">	<span class="keyword">int</span> left_flag, right_flag;</span><br><span class="line">&#125;ThreadNode, * ThreadTree;</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.rmb.bdstatic.com/bjh/5bf1a126c315f48eeb8f6992f41c2d00.png"></p>
<h2 id="中序线索化"><a href="#中序线索化" class="headerlink" title="中序线索化"></a>中序线索化</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ThreadNode</span> &#123;</span></span><br><span class="line">	<span class="keyword">char</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">ThreadNode</span>* <span class="title">left_child</span>, * <span class="title">right_child</span>;</span></span><br><span class="line">	<span class="keyword">int</span> left_flag, right_flag;</span><br><span class="line">&#125;ThreadNode, * ThreadTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局变量pre，指向当前访问结点的前驱</span></span><br><span class="line">ThreadNode* pre = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(ThreadNode *point)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (point-&gt;left_child == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		point-&gt;left_child = pre;</span><br><span class="line">		point-&gt;left_flag = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (pre != <span class="literal">NULL</span> &amp;&amp; pre-&gt;right_child == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		pre-&gt;right_child = point;</span><br><span class="line">		pre-&gt;right_flag = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	pre = point;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序遍历二叉树，一边遍历一边线索化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InThread</span><span class="params">(ThreadTree T)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		InThread(T-&gt;left_child);</span><br><span class="line">		visit(T);</span><br><span class="line">		InThread(T-&gt;right_child);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序线索化二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateInThread</span><span class="params">(ThreadTree T)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		InThread(T);</span><br><span class="line">		<span class="keyword">if</span> (pre-&gt;right_child == <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			pre-&gt;right_flag = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="先序线索化"><a href="#先序线索化" class="headerlink" title="先序线索化"></a>先序线索化</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ThreadNode</span> &#123;</span></span><br><span class="line">	<span class="keyword">char</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">ThreadNode</span>* <span class="title">left_child</span>, * <span class="title">right_child</span>;</span></span><br><span class="line">	<span class="keyword">int</span> left_flag, right_flag;</span><br><span class="line">&#125;ThreadNode, * ThreadTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局变量pre，指向当前访问结点的前驱</span></span><br><span class="line">ThreadNode* pre = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(ThreadNode *point)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (point-&gt;left_child == <span class="literal">NULL</span>)<span class="comment">//左子树为空，建立前驱线索</span></span><br><span class="line">	&#123;</span><br><span class="line">		point-&gt;left_child = pre;</span><br><span class="line">		point-&gt;left_flag = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (pre != <span class="literal">NULL</span> &amp;&amp; pre-&gt;right_child == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		pre-&gt;right_child = point;<span class="comment">//建立前驱节点的后继线索</span></span><br><span class="line">		pre-&gt;right_flag = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	pre = point;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先序遍历二叉树，一边遍历一边线索化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreThread</span><span class="params">(ThreadTree T)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		visit(T);</span><br><span class="line">		<span class="keyword">if</span> (T-&gt;left_flag == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			PreThread(T-&gt;left_child);</span><br><span class="line">		&#125;</span><br><span class="line">		PreThread(T-&gt;right_child);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先序线索化二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreatePreThread</span><span class="params">(ThreadTree T)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		PreThread(T);</span><br><span class="line">		<span class="keyword">if</span> (pre-&gt;right_child == <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			pre-&gt;right_flag = <span class="number">1</span>;<span class="comment">//处理遍历的最后一个节点</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="后序线索化"><a href="#后序线索化" class="headerlink" title="后序线索化"></a>后序线索化</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ThreadNode</span> &#123;</span></span><br><span class="line">	<span class="keyword">char</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">ThreadNode</span>* <span class="title">left_child</span>, * <span class="title">right_child</span>;</span></span><br><span class="line">	<span class="keyword">int</span> left_flag, right_flag;</span><br><span class="line">&#125;ThreadNode, * ThreadTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局变量pre，指向当前访问结点的前驱</span></span><br><span class="line">ThreadNode* pre = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(ThreadNode *point)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (point-&gt;left_child == <span class="literal">NULL</span>)<span class="comment">//左子树为空，建立前驱线索</span></span><br><span class="line">	&#123;</span><br><span class="line">		point-&gt;left_child = pre;</span><br><span class="line">		point-&gt;left_flag = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (pre != <span class="literal">NULL</span> &amp;&amp; pre-&gt;right_child == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		pre-&gt;right_child = point;<span class="comment">//建立前驱节点的后继线索</span></span><br><span class="line">		pre-&gt;right_flag = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	pre = point;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后序遍历二叉树，一边遍历一边线索化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostThread</span><span class="params">(ThreadTree T)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		PostThread(T-&gt;left_child);</span><br><span class="line">		PostThread(T-&gt;right_child);</span><br><span class="line">		visit(T);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后序线索化二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreatePreThread</span><span class="params">(ThreadTree T)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		PostThread(T);</span><br><span class="line">		<span class="keyword">if</span> (pre-&gt;right_child == <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			pre-&gt;right_flag = <span class="number">1</span>;<span class="comment">//处理遍历的最后一个节点</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="线索二叉数中照前驱后继"><a href="#线索二叉数中照前驱后继" class="headerlink" title="线索二叉数中照前驱后继"></a>线索二叉数中照前驱后继</h1><p><img src="https://pic.rmb.bdstatic.com/bjh/680607acd202ef0d3b6dbbfdb08d1338.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/b7b1d3dc64d746c3f16491101926a88c.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/2f5d107ed3e2929ea2181f3c2503b9a6.png"></p>
<h1 id="树的顺序存储（双亲表示法）"><a href="#树的顺序存储（双亲表示法）" class="headerlink" title="树的顺序存储（双亲表示法）"></a>树的顺序存储（双亲表示法）</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max_Tree_Size 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">char</span> data;</span><br><span class="line">	<span class="keyword">int</span> parent;</span><br><span class="line">&#125;PTNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	PTNode nodes[Max_Tree_Size];</span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">&#125;PTreee;</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.rmb.bdstatic.com/bjh/0e925e3cf171b8da141e38deea858f65.png"></p>
<p>删除元素（方案二） 将最后一个元素替换到要删除元素的位置</p>
<p>缺点 查找指定元素的时候只能从头开始遍历</p>
<h1 id="树的顺序-链式存储（孩子表示法）"><a href="#树的顺序-链式存储（孩子表示法）" class="headerlink" title="树的顺序+链式存储（孩子表示法）"></a>树的顺序+链式存储（孩子表示法）</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max_Tree_Size 100</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CTNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> child;<span class="comment">//孩子结点在数组中的位置</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">CTNode</span>* <span class="title">next</span>;</span><span class="comment">//下一个孩子</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">CTNode</span>* <span class="title">firstChild</span>;</span><span class="comment">//指向第一个孩子</span></span><br><span class="line">&#125;CTBox;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	CTBox nodes[Max_Tree_Size];</span><br><span class="line">	<span class="keyword">int</span> num, root;<span class="comment">//结点数和根的位置</span></span><br><span class="line">&#125;CTree;</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.rmb.bdstatic.com/bjh/0114d78e5f1217131e9078b085eb1968.png"></p>
<h1 id="树的链式存储（孩子兄弟表示法）"><a href="#树的链式存储（孩子兄弟表示法）" class="headerlink" title="树的链式存储（孩子兄弟表示法）"></a>树的链式存储（孩子兄弟表示法）</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CSNode</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">CSNode</span>* <span class="title">first_child</span>, * <span class="title">next_sibling</span>;</span><span class="comment">//第一个孩子 和 右兄弟指针</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.rmb.bdstatic.com/bjh/a49587c9ba24d1e47567e41f422d732f.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/2b378e71a1310bed21a44dcf6f5725bf.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/ff1fdc90281ac013ee125e64877c817e.png"></p>
<h1 id="树和森林的遍历"><a href="#树和森林的遍历" class="headerlink" title="树和森林的遍历"></a>树和森林的遍历</h1><p><img src="https://pic.rmb.bdstatic.com/bjh/800b2a9e1ded579d8599a1f261ab8a79.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/dc8cb02357c06516c0c664d7881373e0.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/b6c3f94232dff7f372d1e7f78dec07b4.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/4bbdd09e90f21909420f81aeb01b5704.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/bf9334a7d95cdcf40b5dcd697e00f6bb.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/5b81bdaf5ae217cd242541b2ed6788b1.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/def01f364f81e7b21b8de59577d9b09c.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/17ae66118584ad2ec26746de372d9ad7.png"></p>
<h1 id="二叉排序树的定义"><a href="#二叉排序树的定义" class="headerlink" title="二叉排序树的定义"></a>二叉排序树的定义</h1><p><img src="https://pic.rmb.bdstatic.com/bjh/0599db313340bb5608d3e8827af88bce.png"></p>
<h1 id="二叉排序树的构建和查找"><a href="#二叉排序树的构建和查找" class="headerlink" title="二叉排序树的构建和查找"></a>二叉排序树的构建和查找</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉排序树的结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BSTNode</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> key;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BSTNode</span>* <span class="title">left_child</span>, * <span class="title">right_child</span>;</span></span><br><span class="line">&#125;BSTNode, * BSTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在二叉排序树中查找值为key的结点 最坏空间复杂度 O(1)</span></span><br><span class="line"><span class="function">BSTNode* <span class="title">BST_Search</span><span class="params">(BSTree T, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (T != <span class="literal">NULL</span> &amp;&amp; key != T-&gt;key)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (key &lt; T-&gt;key)<span class="comment">//小于在左子树上查找</span></span><br><span class="line">		&#123;</span><br><span class="line">			T = T-&gt;left_child;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span><span class="comment">//大于在右子树上查找</span></span><br><span class="line">		&#123;</span><br><span class="line">			T = T-&gt;right_child;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归实现二叉排序树的查找 最坏空间复杂度 O(h)</span></span><br><span class="line"><span class="function">BSTNode* <span class="title">BSTSearch</span><span class="params">(BSTree T, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (T == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (key == T-&gt;key)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> T;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (key &lt; T-&gt;key)</span><br><span class="line">	&#123;</span><br><span class="line">		BSTSearch(T-&gt;left_child, key);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		BSTSearch(T-&gt;right_child, key);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉排序树的插入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BST_Insert</span><span class="params">(BSTree &amp;T, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (T == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		T = (BSTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BSTNode));</span><br><span class="line">		T-&gt;key = value;</span><br><span class="line">		T-&gt;left_child = T-&gt;right_child = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;插入数据%d成功\n&quot;</span>, value);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (value == T-&gt;key)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;存在相同的数据，插入失败！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (value &lt; T-&gt;key)</span><br><span class="line">	&#123;</span><br><span class="line">		BST_Insert(T-&gt;left_child, value);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		BST_Insert(T-&gt;right_child, value);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据关键字数组构建二叉排序树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Create_BST</span><span class="params">(BSTree &amp;T, <span class="keyword">int</span> value[], <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">	T = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (i &lt; num)</span><br><span class="line">	&#123;</span><br><span class="line">		BST_Insert(T, value[i]);</span><br><span class="line">		i += <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	BSTree T;</span><br><span class="line">	<span class="keyword">int</span> data[] = &#123; <span class="number">50</span>,<span class="number">66</span>,<span class="number">60</span>,<span class="number">26</span>,<span class="number">21</span>,<span class="number">30</span>,<span class="number">70</span>,<span class="number">68</span> &#125;;</span><br><span class="line">	Create_BST(T, data, (<span class="keyword">sizeof</span>(data)/<span class="keyword">sizeof</span>(data[<span class="number">0</span>])));</span><br><span class="line">	BSTNode* result = BST_Search(T, <span class="number">68</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;查找结果为：%d&quot;</span>, result-&gt;key);</span><br><span class="line">	BSTNode* res = BSTSearch(T, <span class="number">60</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n递归查找结果为：%d&quot;</span>, res-&gt;key);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.rmb.bdstatic.com/bjh/8dd648259462dcc4b62ba52a5c682f67.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/fd9996a918feae0daae145cabe015002.png"></p>
<h1 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h1><p><img src="https://pic.rmb.bdstatic.com/bjh/dd570d35b9131d6e40bb0688e23c9eca.png"></p>
<p>二叉树插入和调整最小不平衡子树是重点</p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/2974aca0535c5ddeafe8cb0bc2a92174.png"></p>
<p>查找效率分析看看这个图个乐</p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/b73e68227cb8c1c568f816e619dab4e1.png"></p>
<h1 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h1><p><img src="https://pic.rmb.bdstatic.com/bjh/1fba7abaddc7b90918856f5b174abcfe.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/fdbc54c82b84d7cff9b66090d7901b6d.png"></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>考研</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构-第二章-线性表</title>
    <url>/posts/e87c7b5c/</url>
    <content><![CDATA[<h1 id="线性表的基本操作"><a href="#线性表的基本操作" class="headerlink" title="线性表的基本操作"></a>线性表的基本操作</h1><p><img src="https://pic.rmb.bdstatic.com/bjh/c95d369f9c7885afd120e7d149f8f658.png"></p>
<a id="more"></a>

<h1 id="顺序表的实现-静态分配"><a href="#顺序表的实现-静态分配" class="headerlink" title="顺序表的实现-静态分配"></a>顺序表的实现-静态分配</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Maxsize 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> data[Maxsize];</span><br><span class="line">	<span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化顺序表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(SqList &amp;L)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Maxsize; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		L.data[i] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	L.length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环遍历打印顺序表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListItem</span><span class="params">(SqList &amp;L)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Maxsize; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;data[%d]=%d\n&quot;</span>, i, L.data[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	SqList L;</span><br><span class="line">	InitList(L);</span><br><span class="line">	ListItem(L);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.rmb.bdstatic.com/bjh/94c8fbf0b6ca861e1ea9e344e6f2de99.png"></p>
<h1 id="顺序表的实现-动态分配"><a href="#顺序表的实现-动态分配" class="headerlink" title="顺序表的实现-动态分配"></a>顺序表的实现-动态分配</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> InitSize 15</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="comment">//动态分配 声明指针</span></span><br><span class="line">	<span class="keyword">int</span>* data;</span><br><span class="line">	<span class="keyword">int</span> MaxSize;</span><br><span class="line">	<span class="keyword">int</span> length;</span><br><span class="line">&#125;SeqList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(SeqList &amp;L)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//申请一个长度15的数组</span></span><br><span class="line">	L.data = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(InitSize * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">	L.length = <span class="number">0</span>;</span><br><span class="line">	L.MaxSize = InitSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态增加顺序表的数组长度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IncreaseList</span><span class="params">(SeqList &amp;L, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span>* data = L.data;</span><br><span class="line">	L.data = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>((L.MaxSize + size) * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">	L.length = <span class="number">0</span>;</span><br><span class="line">	L.MaxSize = L.MaxSize + size;</span><br><span class="line">	<span class="built_in">free</span>(data);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;现在的顺序表长度为：%d\n&quot;</span>, L.MaxSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitData</span><span class="params">(SeqList &amp;L)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.MaxSize; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		L.data[i] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环遍历打印数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListItem</span><span class="params">(SeqList &amp;L)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.MaxSize; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;data[%d]=%d\n&quot;</span>, i, L.data[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	SeqList L;</span><br><span class="line">	InitList(L);</span><br><span class="line">	IncreaseList(L, <span class="number">5</span>);</span><br><span class="line">	InitData(L);</span><br><span class="line">	ListItem(L);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.rmb.bdstatic.com/bjh/33233d3848346589d8b6c9c9e580aa24.png"></p>
<h1 id="顺序表的插入"><a href="#顺序表的插入" class="headerlink" title="顺序表的插入"></a>顺序表的插入</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Maxsize 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> data[Maxsize];</span><br><span class="line">	<span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(SqList&amp; L)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Maxsize; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		L.data[i] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	L.length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitData</span><span class="params">(SqList &amp;L, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		L.data[i] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	L.length = size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环遍历打印数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListItem</span><span class="params">(SqList &amp;L)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.length; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;data[%d]=%d\n&quot;</span>, i, L.data[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入数据</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(SqList &amp;L, <span class="keyword">int</span> index, <span class="keyword">int</span> element)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//插入位置的合法性判断</span></span><br><span class="line">	<span class="keyword">if</span> (index &lt; <span class="number">1</span> || index &gt; L.length+<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//判断是否已满</span></span><br><span class="line">	<span class="keyword">if</span> (L.length &gt;= Maxsize)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//将插入位置后的数据全部后移</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = L.length; i &gt;= index; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		L.data[i] = L.data[i - <span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	L.data[index<span class="number">-1</span>] = element;</span><br><span class="line">	L.length += <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	SqList L;</span><br><span class="line">	InitList(L);</span><br><span class="line">	InitData(L, <span class="number">7</span>);</span><br><span class="line">	<span class="keyword">if</span> (ListInsert(L, <span class="number">7</span>, <span class="number">99</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;插入成功！\n&quot;</span>);</span><br><span class="line">		ListItem(L);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;插入失败！\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.rmb.bdstatic.com/bjh/48d551b65a1ef4e067acd7957e210106.png"></p>
<h1 id="顺序表的删除"><a href="#顺序表的删除" class="headerlink" title="顺序表的删除"></a>顺序表的删除</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Maxsize 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> data[Maxsize];</span><br><span class="line">	<span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(SqList&amp; L)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Maxsize; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		L.data[i] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	L.length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitData</span><span class="params">(SqList &amp;L, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		L.data[i] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	L.length = size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListItem</span><span class="params">(SqList &amp;L)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;data[%d]=%d\n&quot;</span>, i, L.data[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListDelete</span><span class="params">(SqList &amp;L, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//删除位置合法性判断</span></span><br><span class="line">	<span class="keyword">if</span> (index &lt; <span class="number">1</span> || index &gt; L.length) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;正在删除的数据为：data[%d]=%d\n&quot;</span>, index - <span class="number">1</span>, L.data[index - <span class="number">1</span>]);</span><br><span class="line">    <span class="comment">//逻辑删除元素</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; L.length; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		L.data[i - <span class="number">1</span>] = L.data[i];</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;正在赋值为：data[%d]=%d &lt;= data[%d]=%d\n&quot;</span>, i - <span class="number">1</span>, L.data[i - <span class="number">1</span>], i, L.data[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	L.data[L.length - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">	L.length -= <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	SqList L;</span><br><span class="line">	InitList(L);</span><br><span class="line">	InitData(L, <span class="number">5</span>);</span><br><span class="line">	<span class="keyword">if</span> (ListDelete(L, <span class="number">2</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;删除成功！\n&quot;</span>);</span><br><span class="line">		ListItem(L);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;删除失败！\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.rmb.bdstatic.com/bjh/c37e52ac3cd520ac594bb99e572c634c.png"></p>
<h1 id="顺序表的按位查找"><a href="#顺序表的按位查找" class="headerlink" title="顺序表的按位查找"></a>顺序表的按位查找</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Maxsize 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> data[Maxsize];</span><br><span class="line">	<span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(SqList&amp; L)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Maxsize; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		L.data[i] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	L.length = Maxsize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按位查找</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getListItem</span><span class="params">(SqList &amp;L, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;data[%d]=%d&quot;</span>, index, L.data[index]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	SqList L;</span><br><span class="line">	InitList(L);</span><br><span class="line">	getListItem(L, <span class="number">5</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.rmb.bdstatic.com/bjh/22cb223c8ecbcfd4025aa869f89fbc9f.png"></p>
<h1 id="顺序表的按值查找"><a href="#顺序表的按值查找" class="headerlink" title="顺序表的按值查找"></a>顺序表的按值查找</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Maxsize 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> data[Maxsize];</span><br><span class="line">	<span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(SqList&amp; L)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Maxsize; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		L.data[i] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	L.length = Maxsize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按值查找</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getListItemByValue</span><span class="params">(SqList &amp;L, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.length; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (L.data[i] == value) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;与%d匹配的有：data[%d]=%d&quot;</span>, value, i, L.data[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	SqList L;</span><br><span class="line">	InitList(L);</span><br><span class="line">	getListItemByValue(L, <span class="number">5</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.rmb.bdstatic.com/bjh/4437d14f2e26274d0882a24b9357432b.png"></p>
<h1 id="单链表的基本操作合集"><a href="#单链表的基本操作合集" class="headerlink" title="单链表的基本操作合集"></a>单链表的基本操作合集</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//struct LNode &#123;</span></span><br><span class="line"><span class="comment">//	ElemType data;</span></span><br><span class="line"><span class="comment">//	struct LNode* next;</span></span><br><span class="line"><span class="comment">//&#125;;</span></span><br><span class="line"><span class="comment">//typedef struct LNode LNode；</span></span><br><span class="line"><span class="comment">//typedef struct LNode* LinkList;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//等价定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;LNode, *LinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无头结点创建</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitListNoHead</span><span class="params">(LinkList &amp;L)</span> </span>&#123;</span><br><span class="line">	L = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有头节点创建</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitList</span><span class="params">(LinkList &amp;L)</span> </span>&#123;</span><br><span class="line">	L = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">	<span class="keyword">if</span> (L == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//头插法建立单链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListHeadInsert</span><span class="params">(LinkList &amp;L, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">	LNode* new_point;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		new_point = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">		new_point-&gt;data = i + <span class="number">1</span>;</span><br><span class="line">		new_point-&gt;next = L-&gt;next;</span><br><span class="line">		L-&gt;next = new_point;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尾插法建立单链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListTailInsert</span><span class="params">(LinkList &amp;L, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">	LNode* new_point;</span><br><span class="line">	LNode* last_point = L;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		new_point = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">		new_point-&gt;data = i + <span class="number">1</span>;</span><br><span class="line">		last_point-&gt;next = new_point;</span><br><span class="line">		last_point = new_point;</span><br><span class="line">	&#125;</span><br><span class="line">	last_point-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求单链表的长度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowListLenght</span><span class="params">(LinkList &amp;L)</span> </span>&#123;</span><br><span class="line">	LNode* point = L-&gt;next;</span><br><span class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (point != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		point = point-&gt;next;</span><br><span class="line">		num += <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;单链表长度为：%d\n&quot;</span>, num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印单链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowList</span><span class="params">(LinkList &amp;L)</span> </span>&#123;</span><br><span class="line">	LNode* point = L-&gt;next;</span><br><span class="line">	<span class="keyword">while</span> (point != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, point-&gt;data);</span><br><span class="line">		point = point-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非空判断</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(LinkList L)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (L == <span class="literal">NULL</span> || L-&gt;next == <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定结点的后插操作</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertNextNode</span><span class="params">(LNode* point, <span class="keyword">int</span> element)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (point == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	LNode* next_point = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">	<span class="keyword">if</span> (next_point == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	next_point-&gt;data = element;</span><br><span class="line">	next_point-&gt;next = point-&gt;next;</span><br><span class="line">	point-&gt;next = next_point;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按位序插入（无头结点）</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">LinkInsertNoHead</span><span class="params">(LinkList &amp;L, <span class="keyword">int</span> index, <span class="keyword">int</span> element)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (index &lt; <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (index == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		LNode* next_point = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">		next_point-&gt;data = element;</span><br><span class="line">		next_point-&gt;next = L-&gt;next;</span><br><span class="line">		L = next_point;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	LNode* point = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">	point = L;</span><br><span class="line">	<span class="keyword">while</span> (point != <span class="literal">NULL</span> &amp;&amp; i &lt; index)</span><br><span class="line">	&#123;</span><br><span class="line">		point = point-&gt;next;</span><br><span class="line">		i += <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (point == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> InsertNextNode(point, element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按位序插入（有头节点）</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(LinkList &amp;L, <span class="keyword">int</span> index, <span class="keyword">int</span> element)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (index &lt; <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	LNode* point;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	point = L;</span><br><span class="line">	<span class="keyword">while</span> (point != <span class="literal">NULL</span> &amp;&amp; i &lt; index - <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		point = point-&gt;next;</span><br><span class="line">		i += <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (point == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> InsertNextNode(point, element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//巧妙进行指定节点的前插操作</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertPriorNode</span><span class="params">(LNode* point, <span class="keyword">int</span> element)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (point == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	LNode* prior_point = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">	prior_point-&gt;next = point-&gt;next;</span><br><span class="line">	point-&gt;next = prior_point;</span><br><span class="line">	prior_point-&gt;data = point-&gt;data;</span><br><span class="line">	point-&gt;data = element;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定结点的前插操作</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertPriorNode</span><span class="params">(LNode* point, LNode* prior_point)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (point == <span class="literal">NULL</span> || prior_point == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	prior_point-&gt;next = point-&gt;next;</span><br><span class="line">	point-&gt;next = prior_point;</span><br><span class="line">	<span class="keyword">int</span> temp = point-&gt;data;</span><br><span class="line">	point-&gt;data = prior_point-&gt;data;</span><br><span class="line">	prior_point-&gt;data = temp;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//带头结点的 按位序删除</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListDelete</span><span class="params">(LinkList &amp;L, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (index &lt; <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	LNode* point = L;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (point != <span class="literal">NULL</span> &amp;&amp; i &lt; index - <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		point = point-&gt;next;</span><br><span class="line">		i += <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (point-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	LNode* delete_point = point-&gt;next;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;正在删除的是 %d\n&quot;</span>, delete_point-&gt;data);</span><br><span class="line">	point-&gt;next = delete_point-&gt;next;</span><br><span class="line">	<span class="built_in">free</span>(delete_point);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定节点的删除操作</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListDelete</span><span class="params">(LNode* point)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (point == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	LNode* temp_point = point-&gt;next;</span><br><span class="line">	point-&gt;data = temp_point-&gt;data;</span><br><span class="line">	point-&gt;next = temp_point-&gt;next;</span><br><span class="line">	<span class="built_in">free</span>(temp_point);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetLNodeByIndex</span><span class="params">(LinkList L, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (index &lt; <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;输入有误\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	LNode* point = L;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (point != <span class="literal">NULL</span> &amp;&amp; i &lt; index)</span><br><span class="line">	&#123;</span><br><span class="line">		point = point-&gt;next;</span><br><span class="line">		i += <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;单链表中第%d位的值为：%d&quot;</span>, index, point-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据值查找</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetLNodeByValue</span><span class="params">(LinkList &amp;L, <span class="keyword">int</span> element)</span> </span>&#123;</span><br><span class="line">	LNode* point = L;</span><br><span class="line">	<span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (point != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (point-&gt;data == element)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;查询到单链表中第%d位为：%d\n&quot;</span>, index, element);</span><br><span class="line">		&#125;</span><br><span class="line">		point = point-&gt;next;</span><br><span class="line">		index += <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	LinkList L;</span><br><span class="line">	InitList(L);</span><br><span class="line">	ListTailInsert(L, <span class="number">10</span>);</span><br><span class="line">	ShowList(L);</span><br><span class="line">	ShowListLenght(L);</span><br><span class="line">	GetLNodeByValue(L, <span class="number">5</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>部分函数运行截图：</p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/76e0896eff74e94d58d5099226032e81.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/edba85c3aaf54946f0296849f72262d9.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/77c032a9f7975fc0e4dd70915aecfd6b.png"></p>
<h1 id="双链表的基本操作"><a href="#双链表的基本操作" class="headerlink" title="双链表的基本操作"></a>双链表的基本操作</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//基本定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">DNode</span>* <span class="title">next</span>, * <span class="title">prior</span>;</span></span><br><span class="line">&#125;DNode,* DLinklist;</span><br><span class="line"></span><br><span class="line"><span class="comment">//带头结点的初始化</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitDLinklist</span><span class="params">(DLinklist &amp;L)</span> </span>&#123;</span><br><span class="line">	L = (DNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DNode));</span><br><span class="line">	<span class="keyword">if</span> (L==<span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	L-&gt;prior = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断双链表是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(DLinklist &amp;L)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span>(!L-&gt;next);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//双链表的插入操作</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertNextDNode</span><span class="params">(DNode *base_point, DNode *next_point)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (base_point == <span class="literal">NULL</span> || next_point == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	next_point-&gt;next = base_point-&gt;next;</span><br><span class="line">	<span class="keyword">if</span> (base_point-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		base_point-&gt;next-&gt;prior = next_point;</span><br><span class="line">	&#125;</span><br><span class="line">	next_point-&gt;prior = base_point;</span><br><span class="line">	base_point-&gt;next = next_point;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除某个点后的后继节点 只需要将两个元素链接起来就可以</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteNextDNode</span><span class="params">(DNode *point)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (point == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	DNode* delete_point = point-&gt;next;</span><br><span class="line">	<span class="keyword">if</span> (delete_point == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//设置该节点的后置节点</span></span><br><span class="line">	point-&gt;next = delete_point-&gt;next;</span><br><span class="line">	<span class="keyword">if</span> (delete_point-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//设置后置节点的前置节点</span></span><br><span class="line">		delete_point-&gt;next-&gt;prior = point;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">free</span>(delete_point);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除整个双链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestoryList</span><span class="params">(DLinklist &amp;L)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (L-&gt;next !=<span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		DeleteNextDNode(L);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">free</span>(L);</span><br><span class="line">	L = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历双链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showList</span><span class="params">(DNode *point)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//后向遍历</span></span><br><span class="line">	<span class="keyword">while</span> (point != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		point = point-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//前向遍历</span></span><br><span class="line">	<span class="keyword">while</span> (point != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		point = point-&gt;prior;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//前向遍历（跳过头结点）</span></span><br><span class="line">	<span class="keyword">while</span> (point-&gt;prior != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		point = point-&gt;prior;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	DLinklist L;</span><br><span class="line">	InitDLinklist(L);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="循环单链表"><a href="#循环单链表" class="headerlink" title="循环单链表"></a>循环单链表</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;LNode, * Linklist;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitList</span><span class="params">(Linklist &amp;L)</span> </span>&#123;</span><br><span class="line">	L = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">	<span class="keyword">if</span> (L == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	L-&gt;next = L;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(Linklist &amp;L)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> L-&gt;next == L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isTail</span><span class="params">(Linklist &amp;L, LNode *point)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> point-&gt;next == L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="循环双链表"><a href="#循环双链表" class="headerlink" title="循环双链表"></a>循环双链表</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">DNode</span>* <span class="title">prior</span>, * <span class="title">next</span>;</span></span><br><span class="line">&#125;DNode, * Dlinklist;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitDLinklist</span><span class="params">(Dlinklist &amp;L)</span> </span>&#123;</span><br><span class="line">	L = (DNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DNode));</span><br><span class="line">	<span class="keyword">if</span> (L == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	L-&gt;prior = L;</span><br><span class="line">	L-&gt;next = L;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(Dlinklist &amp;L)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> L-&gt;next = L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isTail</span><span class="params">(Dlinklist &amp;L, DNode *point)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> point-&gt;next == L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertNextNode</span><span class="params">(DNode *point, DNode *next_point)</span> </span>&#123;</span><br><span class="line">	next_point-&gt;next = point-&gt;next;</span><br><span class="line">	point-&gt;next-&gt;prior = next_point;</span><br><span class="line">	next_point-&gt;prior = point;</span><br><span class="line">	point-&gt;next = next_point;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteNode</span><span class="params">(DNode *point)</span> </span>&#123;</span><br><span class="line">	DNode* prior_point = point-&gt;prior;</span><br><span class="line">	prior_point-&gt;next = point-&gt;next;</span><br><span class="line">	point-&gt;next-&gt;prior = prior_point;</span><br><span class="line">	<span class="built_in">free</span>(point);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Maxsize 10</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">	<span class="keyword">int</span> next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">	<span class="keyword">int</span> next;</span><br><span class="line">&#125;SLinklist[Maxsize];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span> <span class="title">x</span>;</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(x));</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span> <span class="title">l</span>[<span class="title">Maxsize</span>];</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(l));</span><br><span class="line"></span><br><span class="line">	SLinklist L;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(L));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.rmb.bdstatic.com/bjh/3e54ded0c1020e44e88fc38fd13b4c2b.png"></p>
<h1 id="顺序表和链表的比较"><a href="#顺序表和链表的比较" class="headerlink" title="顺序表和链表的比较"></a>顺序表和链表的比较</h1><p><img src="https://pic.rmb.bdstatic.com/bjh/63041b2cd5d8bbee4bc7fdc4b3f47ebd.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/cfee7c94673e1402f3fc52c66d6c5983.png"></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>考研</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构-第八章-排序</title>
    <url>/posts/d311869f/</url>
    <content><![CDATA[<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = a;</span><br><span class="line">	a = b;</span><br><span class="line">	b = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = n - <span class="number">1</span>; j &gt; i; j--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (A[j - <span class="number">1</span>] &gt; A[j])</span><br><span class="line">			&#123;</span><br><span class="line">				swap(A[j - <span class="number">1</span>], A[j]);</span><br><span class="line">				flag = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag == <span class="literal">false</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, A[i]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> A[] = &#123; <span class="number">52</span>,<span class="number">6</span>,<span class="number">65</span>,<span class="number">52</span>,<span class="number">85</span>,<span class="number">33</span>,<span class="number">99</span>,<span class="number">125</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">55</span>,<span class="number">66</span>,<span class="number">55</span>,<span class="number">88</span>,<span class="number">77</span>,<span class="number">55</span>,<span class="number">66</span>,<span class="number">55</span>,<span class="number">22</span>,<span class="number">59</span> &#125;;</span><br><span class="line">	BubbleSort(A, (<span class="keyword">sizeof</span>(A)/<span class="keyword">sizeof</span>(<span class="keyword">int</span>)));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.rmb.bdstatic.com/bjh/8d5c4549b88da45725495f5f40a78191.png"></p>
<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> pivot = A[low];</span><br><span class="line">	<span class="keyword">while</span> (low &lt; high)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span> (low &lt; high &amp;&amp; A[high] &gt;= pivot)</span><br><span class="line">		&#123;</span><br><span class="line">			high -= <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		A[low] = A[high];</span><br><span class="line">		<span class="keyword">while</span> (low &lt; high &amp;&amp; A[low] &lt;= pivot)</span><br><span class="line">		&#123;</span><br><span class="line">			low += <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		A[high] = A[low];</span><br><span class="line">	&#125;</span><br><span class="line">	A[low] = pivot;</span><br><span class="line">	<span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (low &lt; high)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> point = Partition(A, low, high);</span><br><span class="line">		QuickSort(A, low, point - <span class="number">1</span>);</span><br><span class="line">		QuickSort(A, point + <span class="number">1</span>, high);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> A[] = &#123; <span class="number">52</span>,<span class="number">6</span>,<span class="number">65</span>,<span class="number">52</span>,<span class="number">85</span>,<span class="number">33</span>,<span class="number">99</span>,<span class="number">125</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">55</span>,<span class="number">66</span>,<span class="number">55</span>,<span class="number">88</span>,<span class="number">77</span>,<span class="number">55</span>,<span class="number">66</span>,<span class="number">55</span>,<span class="number">22</span>,<span class="number">59</span> &#125;;</span><br><span class="line">	QuickSort(A, <span class="number">0</span>, (<span class="keyword">sizeof</span>(A) / <span class="keyword">sizeof</span>(A[<span class="number">0</span>]) - <span class="number">1</span>));</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">sizeof</span>(A) / <span class="keyword">sizeof</span>(A[<span class="number">0</span>])); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, A[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.rmb.bdstatic.com/bjh/c82d2b540bb1a17c996b2adb8c59eb70.png"></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>考研</tag>
      </tags>
  </entry>
  <entry>
    <title>有道翻译js逆向</title>
    <url>/posts/cb40ebbd/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20210109180814355.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"></p>
<p>对有道翻译进行的js逆向爬虫分析。</p>
<a id="more"></a>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><font color=#999AAA >js逆向第一战。</font></p>
<h1 id="一、JS逆向是什么？"><a href="#一、JS逆向是什么？" class="headerlink" title="一、JS逆向是什么？"></a>一、JS逆向是什么？</h1><p><font color=#999AAA >抓取网页端数据时，经常被加密参数、加密数据所困扰，获取不到想要的数据。这个时候需要根据JavaScript的代码逆向进行解决问题。</p>
<h1 id="二、分析和编写代码"><a href="#二、分析和编写代码" class="headerlink" title="二、分析和编写代码"></a>二、分析和编写代码</h1><h2 id="1-分析"><a href="#1-分析" class="headerlink" title="1.分析"></a>1.分析</h2><p>地址：<a href="http://fanyi.youdao.com/?keyfrom=fanyi-new.logo">有道翻译</a><br>在输入框内输入英文，抓包工具中新增一个接口：<br><img src="https://img-blog.csdnimg.cn/20210109180814355.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>显而易见，这就是我们想要的数据，那么我们来看看请求头。<br><img src="https://img-blog.csdnimg.cn/20210109180952378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>对比多个请求头的参数后发现，salt，sign，和lts是一直动态变化的，我们去搜索一下sign在js文件中出现的位置，并初步排除一下代码段。<br><img src="https://img-blog.csdnimg.cn/20210109181143454.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>搜到一条结果，格式化一下，再在其中搜索sign：<br><img src="https://img-blog.csdnimg.cn/20210109181256786.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>有十五个值，我们根据特征逐条查看一下，找到了其中的关键片段：<br><img src="https://img-blog.csdnimg.cn/2021010918144276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>这里可以很清楚的看到：</p>
<ul>
<li>调用了工具md5加密</li>
<li>(new Date).getTime() 时间戳</li>
<li>parseInt(10 * Math.random(), 10) 10以内的随机数</li>
<li>n.md5(“fanyideskweb” + e + i + “Tbh5E8=q6U3EXe+&amp;L[4c@”) 拼接字符串后，进行md5加密<br>于是，打断点进行测试，注意在语句运行之后打断点：<br><img src="https://img-blog.csdnimg.cn/20210109181839947.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>于是这里的e就是我们输入的英文字符串，r是时间戳，i是时间戳后加一个随机数，对应关系为：</li>
<li>ts: r</li>
<li>salt: i</li>
<li>sign: 拼接并加密后的e<br>与我们的请求头对应上了，接下来我们只需要在python中模仿其做出相同的操作即可。</li>
</ul>
<h2 id="2-编写代码"><a href="#2-编写代码" class="headerlink" title="2.编写代码"></a>2.编写代码</h2><p><font color=#999AAA >代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TranslationSpider</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, word</span>):</span></span><br><span class="line">        <span class="comment"># 先请求基本页面再请求接口，session中会存在对应的cookie等参数</span></span><br><span class="line">        self.base_url = <span class="string">&#x27;http://fanyi.youdao.com/?keyfrom=fanyi-new.logo&#x27;</span></span><br><span class="line">        <span class="comment"># 接口地址</span></span><br><span class="line">        self.url = <span class="string">&#x27;http://fanyi.youdao.com/translate_o?smartresult=dict&amp;smartresult=rule&#x27;</span></span><br><span class="line">        <span class="comment"># 初始化session</span></span><br><span class="line">        self.session = requests.session()</span><br><span class="line">        <span class="comment"># 初始化伪装头</span></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;http://fanyi.youdao.com/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class="line">                          <span class="string">&#x27;Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.66 &#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 初始化参数</span></span><br><span class="line">        self.word = word</span><br><span class="line">        self.data = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generator_data</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 获得时间戳</span></span><br><span class="line">        ts = <span class="built_in">str</span>(<span class="built_in">int</span>(time.time() * <span class="number">1000</span>))</span><br><span class="line">        <span class="comment"># 时间戳加随机数</span></span><br><span class="line">        salt = ts + <span class="built_in">str</span>(random.randint(<span class="number">0</span>, <span class="number">10</span>))</span><br><span class="line">        <span class="comment"># md5加密</span></span><br><span class="line">        sign = <span class="string">&quot;fanyideskweb&quot;</span> + self.word + salt + <span class="string">&quot;Tbh5E8=q6U3EXe+&amp;L[4c@&quot;</span></span><br><span class="line">        md5 = hashlib.md5()</span><br><span class="line">        md5.update(sign.encode())</span><br><span class="line">        sign = md5.hexdigest()</span><br><span class="line">        <span class="comment"># post请求的参数</span></span><br><span class="line">        self.data = &#123;</span><br><span class="line">            <span class="string">&quot;i&quot;</span>: self.word,</span><br><span class="line">            <span class="string">&quot;from&quot;</span>: <span class="string">&quot;AUTO&quot;</span>,</span><br><span class="line">            <span class="string">&quot;to&quot;</span>: <span class="string">&quot;AUTO&quot;</span>,</span><br><span class="line">            <span class="string">&quot;smartresult&quot;</span>: <span class="string">&quot;dict&quot;</span>,</span><br><span class="line">            <span class="string">&quot;client&quot;</span>: <span class="string">&quot;fanyideskweb&quot;</span>,</span><br><span class="line">            <span class="string">&quot;salt&quot;</span>: salt,</span><br><span class="line">            <span class="string">&quot;sign&quot;</span>: sign,</span><br><span class="line">            <span class="string">&quot;lts&quot;</span>: ts,</span><br><span class="line">            <span class="string">&quot;bv&quot;</span>: <span class="string">&quot;b286f0a34340b928819a6f64492585e8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;doctype&quot;</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">            <span class="string">&quot;version&quot;</span>: <span class="string">&quot;2.1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;keyfrom&quot;</span>: <span class="string">&quot;fanyi.web&quot;</span>,</span><br><span class="line">            <span class="string">&quot;action&quot;</span>: <span class="string">&quot;FY_BY_REALTlME&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_request</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 请求初始界面</span></span><br><span class="line">        self.session.get(url=self.base_url, headers=self.headers)</span><br><span class="line">        <span class="comment"># 再请求接口地址 并返回json</span></span><br><span class="line">        response = self.session.post(url=self.url, data=self.data, headers=self.headers).json()</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_json</span>(<span class="params">self, json</span>):</span></span><br><span class="line">        <span class="comment"># 解析传过来的json数据</span></span><br><span class="line">        tgt = json[<span class="string">&#x27;translateResult&#x27;</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="string">&#x27;tgt&#x27;</span>]</span><br><span class="line">        entries = json[<span class="string">&#x27;smartResult&#x27;</span>][<span class="string">&#x27;entries&#x27;</span>]</span><br><span class="line">        print(<span class="string">&#x27;英文&#123;&#125;翻译结果为：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.word, tgt))</span><br><span class="line">        print(<span class="string">&#x27;&#x27;</span>.join(entries))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 调用封装好的方法</span></span><br><span class="line">        self.generator_data()</span><br><span class="line">        self.parse_json(self.get_request())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 循环翻译</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        w = <span class="built_in">input</span>(<span class="string">&#x27;输入需要翻译的英文：&#x27;</span>)</span><br><span class="line">        <span class="comment"># 输入exit0退出</span></span><br><span class="line">        <span class="keyword">if</span> w == <span class="string">&#x27;exit0&#x27;</span>:</span><br><span class="line">            print(<span class="string">&#x27;退出成功！&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># new一个对象</span></span><br><span class="line">        spider = TranslationSpider(w)</span><br><span class="line">        <span class="comment"># 运行</span></span><br><span class="line">        spider.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><font color=#999AAA >第一个js逆向的项目结束，以后再见。</p>
]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>有道翻译</tag>
        <tag>js逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构-第四章-串</title>
    <url>/posts/ca01dcf1/</url>
    <content><![CDATA[<h1 id="串的基本操作"><a href="#串的基本操作" class="headerlink" title="串的基本操作"></a>串的基本操作</h1><p><img src="https://pic.rmb.bdstatic.com/bjh/ec9cfc6be46553c85e42d23a856a460c.png"></p>
<a id="more"></a>

<h1 id="串的顺序存储"><a href="#串的顺序存储" class="headerlink" title="串的顺序存储"></a>串的顺序存储</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Maxlength 255</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">char</span> ch[Maxlength];</span><br><span class="line">	<span class="keyword">int</span> length;</span><br><span class="line">&#125;SString;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">char</span>* ch;</span><br><span class="line">	<span class="keyword">int</span> length;</span><br><span class="line">&#125;HString;</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态生成</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitHString</span><span class="params">(HString &amp;S)</span> </span>&#123;</span><br><span class="line">	S.ch = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(Maxlength * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">	S.length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="串的链式存储"><a href="#串的链式存储" class="headerlink" title="串的链式存储"></a>串的链式存储</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//存储密度低</span></span><br><span class="line"><span class="comment">//typedef struct &#123;</span></span><br><span class="line"><span class="comment">//	char ch;</span></span><br><span class="line"><span class="comment">//	struct StringNode* next;</span></span><br><span class="line"><span class="comment">//&#125;StringNode, * String;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//提高存储密度</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">char</span> ch[<span class="number">4</span>];</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">StringNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;StringNode, *String;</span><br></pre></td></tr></table></figure>
<h1 id="基本操作的实现"><a href="#基本操作的实现" class="headerlink" title="基本操作的实现"></a>基本操作的实现</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Maxlen 255</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">char</span> ch[Maxlen];</span><br><span class="line">	<span class="keyword">int</span> length;</span><br><span class="line">&#125;SString;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitString</span><span class="params">(SString&amp; S)</span> </span>&#123;</span><br><span class="line">	strcpy_s(S.ch, <span class="string">&quot;abcdefghijk&quot;</span>);</span><br><span class="line">	S.length = <span class="number">11</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求子串</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SubString</span><span class="params">(SString S, <span class="keyword">int</span> pos, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (pos + len - <span class="number">1</span> &gt; S.length)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;越界了&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;从字符串%s的第%d位开始取%d位的结果为：&quot;</span>, S.ch, pos, len);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = pos - <span class="number">1</span>; i &lt; pos - <span class="number">1</span> + len; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, S.ch[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SubString</span><span class="params">(SString&amp; Sub, SString S, <span class="keyword">int</span> pos, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (pos + len - <span class="number">1</span> &gt; S.length)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = pos - <span class="number">1</span>; i &lt; pos + len - <span class="number">1</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			Sub.ch[i - pos] = S.ch[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//比较操作</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StrCompare</span><span class="params">(SString S, SString T)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S.length &amp;&amp; i &lt; T.length; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (S.ch[i] != T.ch[i])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> S.ch[i] - T.ch[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> S.length - T.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定位操作</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IndexString</span><span class="params">(SString S, SString T)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>, n = S.length, m = T.length;</span><br><span class="line">	SString Sub;</span><br><span class="line">	<span class="keyword">while</span> (i &lt;= n - m)</span><br><span class="line">	&#123;</span><br><span class="line">		SubString(Sub, S, i, m);</span><br><span class="line">		<span class="keyword">if</span> (StrCompare(Sub, T) != <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			i += <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	SString S;</span><br><span class="line">	InitString(S);</span><br><span class="line">	SubString(S, <span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.rmb.bdstatic.com/bjh/752b4bc5bc1a011093a0bdae1468eb0e.png"></p>
<h1 id="朴素模式匹配算法"><a href="#朴素模式匹配算法" class="headerlink" title="朴素模式匹配算法"></a>朴素模式匹配算法</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Maxlen 255</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">char</span> ch[Maxlen];</span><br><span class="line">	<span class="keyword">int</span> length;</span><br><span class="line">&#125;SString;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化字符串赋值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitString</span><span class="params">(SString &amp;S, <span class="keyword">const</span> <span class="keyword">char</span> *element)</span> </span>&#123;</span><br><span class="line">	strcpy_s(S.ch, element);</span><br><span class="line">	S.length = <span class="built_in">strlen</span>(element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Index</span><span class="params">(SString S, SString T)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (i&lt;S.length &amp;&amp; j&lt;T.length)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (S.ch[i] == T.ch[j])</span><br><span class="line">		&#123;</span><br><span class="line">			i += <span class="number">1</span>;</span><br><span class="line">			j += <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			k += <span class="number">1</span>;</span><br><span class="line">			i = k;</span><br><span class="line">			j = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (j = T.length)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> k + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	SString S;</span><br><span class="line">	InitString(S, <span class="string">&quot;fioqnionqvnnakmdl1kasmopgqowmc&quot;</span>);</span><br><span class="line">	SString T;</span><br><span class="line">	InitString(T, <span class="string">&quot;qowmc&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;从%d位置开始相同&quot;</span>, Index(S, T));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.rmb.bdstatic.com/bjh/4de24e85a61cdd790ab34d9d2eccf249.png"></p>
<h1 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Maxsize 255</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">char</span> ch[Maxsize];</span><br><span class="line">	<span class="keyword">int</span> length;</span><br><span class="line">&#125;String;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitString</span><span class="params">(String&amp; S, <span class="keyword">const</span> <span class="keyword">char</span>* c)</span> </span>&#123;</span><br><span class="line">	strcpy_s(S.ch, <span class="string">&quot; &quot;</span>);</span><br><span class="line">	strcat_s(S.ch, c);</span><br><span class="line">	S.length = <span class="built_in">strlen</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintString</span><span class="params">(String S)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;字符串为%s 长度为%d\n&quot;</span>, S.ch, S.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_Length</span><span class="params">(String S)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> S.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Get_Next</span><span class="params">(String S, <span class="keyword">int</span> *next)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>;</span><br><span class="line">	next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">	next[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (i &lt; S.length)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (j==<span class="number">0</span> || S.ch[i] == S.ch[j])</span><br><span class="line">		&#123;</span><br><span class="line">			++i;</span><br><span class="line">			++j;</span><br><span class="line">			next[i] = j;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			j = next[j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KMP</span><span class="params">(String S, String T, <span class="keyword">int</span> *next)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (i &lt;= S.length &amp;&amp; j &lt;= T.length)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (j == <span class="number">0</span> || S.ch[i] == T.ch[j])</span><br><span class="line">		&#123;</span><br><span class="line">			i += <span class="number">1</span>;</span><br><span class="line">			j += <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			j = next[j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (j &gt; T.length)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> i - T.length;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	String S;</span><br><span class="line">	InitString(S, <span class="string">&quot;ababaa&quot;</span>);</span><br><span class="line">	<span class="keyword">int</span>* next = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(S.length * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">	Get_Next(S, next);</span><br><span class="line">	String <span class="built_in">string</span>;</span><br><span class="line">	InitString(<span class="built_in">string</span>, <span class="string">&quot;cccccababaaccccc&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, KMP(<span class="built_in">string</span>, S, next));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.rmb.bdstatic.com/bjh/eb234fbcfe8a41eaff8581c958b8cd28.png"></p>
<h1 id="KMP算法的优化"><a href="#KMP算法的优化" class="headerlink" title="KMP算法的优化"></a>KMP算法的优化</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Get_Nextval</span><span class="params">(String S, <span class="keyword">int</span> *next)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">	next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">	next[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (i &lt; S.length)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (j == <span class="number">0</span> || S.ch[i] == S.ch[j])</span><br><span class="line">		&#123;</span><br><span class="line">			++i;</span><br><span class="line">			++j;</span><br><span class="line">			<span class="keyword">if</span> (S.ch[i] != S.ch[j])</span><br><span class="line">			&#123;</span><br><span class="line">				next[i] = j;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				next[i] = next[j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			j = next[j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	String S;</span><br><span class="line">	InitString(S, <span class="string">&quot;aaaab&quot;</span>);</span><br><span class="line">	<span class="keyword">int</span>* next = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(S.length * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">	Get_Next(S, next);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; S.length + <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, next[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	Get_Nextval(S, next);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; S.length + <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, next[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.rmb.bdstatic.com/bjh/23f2adf0e8035c6ed6d17310cb119059.png"></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>考研</tag>
      </tags>
  </entry>
  <entry>
    <title>爬取b站视频弹幕并制作词云一</title>
    <url>/posts/fc448f83/</url>
    <content><![CDATA[<font color=#999AAA >
用过B站的小伙伴们都知道，B站的弹幕是一绝。
今天我们爬取指定bv号视频下的弹幕，添加到csv文件中并制作成词云。
</font>

<p>优化后的完整代码：<a href="https://blog.csdn.net/HandsomeFishman/article/details/112309330">代码地址</a></p>
<h1 id="一、分析弹幕的接口url地址"><a href="#一、分析弹幕的接口url地址" class="headerlink" title="一、分析弹幕的接口url地址"></a>一、分析弹幕的接口url地址</h1><p><font color=#999AAA >这里有两个地址可以实现爬取弹幕，一个是有限条的，另一个则是根据日期循环爬取，可以实现所有弹幕的爬取。</font><br>案例是冰冰的vlog.001<br><img src="https://img-blog.csdnimg.cn/2021010412201182.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"></p>
<a id="more"></a>

<p>第一个不需要登录就可以爬取的接口为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://comment.bilibili.com/&#123;oid/cid&#125;.xml</span><br></pre></td></tr></table></figure>
<p>我抓包抓了很久也没有找到这样的包，b站现在把弹幕的接口藏得很深…不是很好找，最后是看着别人的博客在移动端的网页js中找到了这样的请求地址。<br><img src="https://img-blog.csdnimg.cn/20210104114429984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>可以看到返回的结果是一个xml界面，只需要请求这个界面使用xpath对其进行定位就可以很容易的获取到自己想要的数据。<br><strong>那么我们现在来分析第二个接口：</strong><br><img src="https://img-blog.csdnimg.cn/20210104114644958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>可以看到右侧有一个弹幕历史的功能，我们先把抓包记录清除一下，点击按钮看看有什么新抓到的包：<br><img src="https://img-blog.csdnimg.cn/20210104114811377.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>可以看到这里出现了一个新的请求，内容是这样的：<br><img src="https://img-blog.csdnimg.cn/20210104114937972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>这不就是对应的日期嘛，不用想，请求头中肯定会有对应的月份数据，按月份来分组，达到这样的日历点击效果。果然：<br><img src="https://img-blog.csdnimg.cn/20210104115154902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>点击十二月后，有了新的请求：<br><img src="https://img-blog.csdnimg.cn/20210104115253993.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>因为这个视频是12-31号发布的，所以十二月只有这一个数据。<br>点击具体的一天后：<br><img src="https://img-blog.csdnimg.cn/20210104115450413.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>弹幕的数据就出现了：<br><img src="https://img-blog.csdnimg.cn/2021010411552953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>所以我们只需要请求对应的日期索引（以月份分组），再循环遍历发送请求就好了，这里需要登录，所以我们使用到cookie，接下来看代码编写。</p>
<h1 id="二、代码编写"><a href="#二、代码编写" class="headerlink" title="二、代码编写"></a>二、代码编写</h1><h2 id="1-引入库"><a href="#1-引入库" class="headerlink" title="1.引入库"></a>1.引入库</h2><p><font color=#999AAA >代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> jieba</span><br></pre></td></tr></table></figure>
<h2 id="2-爬虫类编写"><a href="#2-爬虫类编写" class="headerlink" title="2.爬虫类编写"></a>2.爬虫类编写</h2><p><font color=#999AAA >初始化：</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BarrageSpider</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, bv</span>):</span></span><br><span class="line">        <span class="comment"># 需要一个bv号，在接下来的代码中进行替换操作</span></span><br><span class="line">        self.bv = bv</span><br><span class="line">        <span class="comment"># 不需要登录的弹幕接口地址 只能爬取部分弹幕</span></span><br><span class="line">        self.barrage_url = <span class="string">&#x27;https://comment.bilibili.com/&#123;&#125;.xml&#x27;</span></span><br><span class="line">        <span class="comment"># 需要登陆的弹幕接口地址 根据日期进行分类 需要循环爬取 最后归总数据</span></span><br><span class="line">        self.date_url = <span class="string">&#x27;https://api.bilibili.com/x/v2/dm/history?type=1&amp;oid=&#123;&#125;&amp;date=&#123;&#125;&#x27;</span>  <span class="comment"># 2021-01-01</span></span><br><span class="line">        <span class="comment"># 点击按钮弹出日历的数据接口，这里我们用来作索引</span></span><br><span class="line">        self.index_url = <span class="string">&#x27;https://api.bilibili.com/x/v2/dm/history/index?type=1&amp;oid=&#123;&#125;&amp;month=&#123;&#125;&#x27;</span>  <span class="comment"># 2021-01</span></span><br><span class="line">        <span class="comment"># 在抓包工具中找的一个简洁的请求，里面有我们需要的oid或者是cid</span></span><br><span class="line">        self.bv_url = <span class="string">&#x27;https://api.bilibili.com/x/player/pagelist?bvid=&#x27;</span> + bv + <span class="string">&#x27;&amp;jsonp=jsonp&#x27;</span></span><br><span class="line">        <span class="comment"># 不需要登录接口的伪装头</span></span><br><span class="line">        self.comment = &#123;</span><br><span class="line">            <span class="string">&#x27;referer&#x27;</span>: <span class="string">&#x27;https://www.bilibili.com/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class="line">                          <span class="string">&#x27;Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.66 &#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 需要登录的伪装头 因为需要登录 ip代理已经没有意义了 这里就不再使用IP代理</span></span><br><span class="line">        self.date_headers = &#123;</span><br><span class="line">            <span class="string">&quot;referer&quot;</span>: <span class="string">&quot;https://www.bilibili.com/&quot;</span>,</span><br><span class="line">            <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;https://www.bilibili.com&quot;</span>,</span><br><span class="line">            <span class="string">&quot;cookie&quot;</span>: <span class="string">&quot;cookie&quot;</span>,</span><br><span class="line">            <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &quot;</span></span><br><span class="line">                          <span class="string">&quot;Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.66 &quot;</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p><font color=#999AAA >封装函数：</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从接口返回的json中获取到我们的cid 注： cid = oid</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_cid</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 定位到数据data中下面的cid</span></span><br><span class="line">        <span class="keyword">return</span> requests.get(url=self.bv_url, headers=self.comment).json()[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;cid&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析不需要登录的接口 返回类型是xml文件</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_url</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 获取指定视频的cid/oid</span></span><br><span class="line">        cid = self.get_cid()</span><br><span class="line">        <span class="comment"># 对页面进行伪装请求，这里注意不要转换成text，使用二进制</span></span><br><span class="line">        response = requests.get(url=self.barrage_url.<span class="built_in">format</span>(cid), headers=self.comment).content</span><br><span class="line">        <span class="comment"># etree解析</span></span><br><span class="line">        data = etree.HTML(response)</span><br><span class="line">        <span class="comment"># 定位到所有的d元素</span></span><br><span class="line">        barrage_list = data.xpath(<span class="string">&#x27;//d&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> barrage <span class="keyword">in</span> barrage_list:</span><br><span class="line">            <span class="comment"># 获取d元素的p属性值</span></span><br><span class="line">            info = barrage.xpath(<span class="string">&#x27;./@p&#x27;</span>)[<span class="number">0</span>].split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">            <span class="comment"># 获取弹幕内容</span></span><br><span class="line">            content = barrage.xpath(<span class="string">&#x27;./text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            item = &#123;<span class="string">&#x27;出现时间&#x27;</span>: info[<span class="number">0</span>], <span class="string">&#x27;弹幕模式&#x27;</span>: info[<span class="number">1</span>], <span class="string">&#x27;字体大小&#x27;</span>: info[<span class="number">2</span>], <span class="string">&#x27;颜色&#x27;</span>: info[<span class="number">3</span>], <span class="string">&#x27;发送时间&#x27;</span>: info[<span class="number">4</span>], <span class="string">&#x27;弹幕池&#x27;</span>: info[<span class="number">5</span>],</span><br><span class="line">                    <span class="string">&#x27;用户ID&#x27;</span>: info[<span class="number">6</span>], <span class="string">&#x27;rowID&#x27;</span>: info[<span class="number">7</span>], <span class="string">&#x27;内容&#x27;</span>: content&#125;</span><br><span class="line">            <span class="comment"># 因为这只是一部分弹幕 所以就没有进行持久化存储 没有必要</span></span><br><span class="line">            print(item)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 循环爬取所有弹幕 需要传入month的数据 根据视频发布的日期到现在的所有月份</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_date_url</span>(<span class="params">self, month</span>):</span></span><br><span class="line">        <span class="comment"># 存放爬到的数据</span></span><br><span class="line">        result = []</span><br><span class="line">        <span class="comment"># 获取视频的oid</span></span><br><span class="line">        oid = self.get_cid()</span><br><span class="line">        <span class="comment"># 获取日期索引</span></span><br><span class="line">        date_by_month = requests.get(url=self.index_url.<span class="built_in">format</span>(oid, month), headers=self.date_headers).json()[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">        <span class="comment"># 根据日期索引循环请求</span></span><br><span class="line">        <span class="keyword">for</span> day <span class="keyword">in</span> date_by_month:</span><br><span class="line">            <span class="comment"># 注意还是二进制文件</span></span><br><span class="line">            date_page = requests.get(url=self.date_url.<span class="built_in">format</span>(oid, day), headers=self.date_headers).content</span><br><span class="line">            date_data = etree.HTML(date_page)</span><br><span class="line">            <span class="comment"># 解析到到所有的d元素</span></span><br><span class="line">            barrage_list = date_data.xpath(<span class="string">&#x27;//d&#x27;</span>)</span><br><span class="line">            <span class="comment"># 循环解析数据</span></span><br><span class="line">            <span class="keyword">for</span> barrage <span class="keyword">in</span> barrage_list:</span><br><span class="line">                <span class="comment"># 获取d元素的p属性值</span></span><br><span class="line">                things = barrage.xpath(<span class="string">&#x27;./@p&#x27;</span>)[<span class="number">0</span>].split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">                <span class="comment"># 获取弹幕内容 并去掉所有空格</span></span><br><span class="line">                content = barrage.xpath(<span class="string">&#x27;./text()&#x27;</span>)[<span class="number">0</span>].replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">                item = &#123;<span class="string">&#x27;出现时间&#x27;</span>: things[<span class="number">0</span>], <span class="string">&#x27;弹幕模式&#x27;</span>: things[<span class="number">1</span>], <span class="string">&#x27;字体大小&#x27;</span>: things[<span class="number">2</span>], <span class="string">&#x27;颜色&#x27;</span>: things[<span class="number">3</span>], <span class="string">&#x27;发送时间&#x27;</span>: things[<span class="number">4</span>],</span><br><span class="line">                        <span class="string">&#x27;弹幕池&#x27;</span>: things[<span class="number">5</span>],</span><br><span class="line">                        <span class="string">&#x27;用户ID&#x27;</span>: things[<span class="number">6</span>], <span class="string">&#x27;rowID&#x27;</span>: things[<span class="number">7</span>], <span class="string">&#x27;内容&#x27;</span>: content&#125;</span><br><span class="line">                result.append(item)</span><br><span class="line">        <span class="comment"># 返回封装好的数据</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 舍友指导下的一行代码生成词云 编译器自动格式化了 本质还是一行代码</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wordCloud</span>(<span class="params">self</span>):</span></span><br><span class="line">        WordCloud(font_path=<span class="string">&quot;C:/Windows/Fonts/simfang.ttf&quot;</span>, background_color=<span class="string">&#x27;white&#x27;</span>, scale=<span class="number">16</span>).generate(<span class="string">&quot; &quot;</span>.join(</span><br><span class="line">            [c <span class="keyword">for</span> c <span class="keyword">in</span> jieba.cut(<span class="string">&quot;&quot;</span>.join(<span class="built_in">str</span>((pd.read_csv(<span class="string">&#x27;&#123;&#125;弹幕池数据集.csv&#x27;</span>.<span class="built_in">format</span>(self.bv))[<span class="string">&#x27;内容&#x27;</span>]).tolist()))) <span class="keyword">if</span> <span class="built_in">len</span>(c) &gt; <span class="number">1</span>])).to_file(</span><br><span class="line">            <span class="string">&quot;&#123;&#125;词云.png&quot;</span>.<span class="built_in">format</span>(self.bv))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><font color=#999AAA >主函数调用：</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 输入指定的视频bv号</span></span><br><span class="line">    bv_id = <span class="built_in">input</span>(<span class="string">&#x27;输入视频对应的bv号:&#x27;</span>)</span><br><span class="line">    <span class="comment"># new一个对象</span></span><br><span class="line">    spider = BarrageSpider(bv_id)</span><br><span class="line">    <span class="comment"># 请求今年1月和去年12月的数据 并合并数据</span></span><br><span class="line">    one = spider.parse_date_url(<span class="string">&#x27;2021-01&#x27;</span>)</span><br><span class="line">    two = spider.parse_date_url(<span class="string">&#x27;2020-12&#x27;</span>)</span><br><span class="line">    one.extend(two)</span><br><span class="line">    <span class="comment"># 数据格式化处理 并输出csv格式文件</span></span><br><span class="line">    data = pd.DataFrame(one)</span><br><span class="line">    data.drop_duplicates(subset=[<span class="string">&#x27;rowID&#x27;</span>], keep=<span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">    <span class="comment"># 字符集编码需要为utf-8-sig 不然会乱码</span></span><br><span class="line">    data.to_csv(<span class="string">&#x27;&#123;&#125;弹幕池数据集.csv&#x27;</span>.<span class="built_in">format</span>(bv_id), index=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8-sig&#x27;</span>)</span><br><span class="line">    <span class="comment"># 生成词云</span></span><br><span class="line">    spider.wordCloud()</span><br></pre></td></tr></table></figure>



<h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p><img src="https://img-blog.csdnimg.cn/20210104121710597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20210104121629776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>可以看到有5000条数据。<br>词云如图：<br><img src="https://img-blog.csdnimg.cn/20210104121736154.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br><strong>注：案例仅供学习</strong></p>
]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>B站</tag>
        <tag>弹幕</tag>
      </tags>
  </entry>
  <entry>
    <title>爬取教务成绩的另一种姿势</title>
    <url>/posts/b27af333/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前已经有过一篇爬取成绩的实现blog，是基于学校官网的入口，再进入到教务系统进行查询，中途需要保持session。</p>
<p>现在发现了一个新的入口：</p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/f8036105c9a22d9d1dbc3ceb2c97ba79.png"></p>
<a id="more"></a>

<p>于是乎准备从这里进行成绩的爬取，经过一番分析后，发现爬取的姿势中需要包含一些参数，这些参数在网页的源代码中可以找到，即隐含域的值，input标签的hidden属性。如下图：</p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/77b2c8168b8a1bd981cace72ae77b5aa.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/3ca8b0366ec1acbc996d19fba8d6211c.png"></p>
<p>这样就需要先使用xpath分析网页源代码，取到想要的值，再作post提交的参数。</p>
<p>基本实现逻辑就是这样，下面进行代码的编写。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用到的url</span></span><br><span class="line">base_url = <span class="string">&#x27;http://202.195.102.33/&#x27;</span></span><br><span class="line">login_url = <span class="string">&#x27;http://202.195.102.33/login_gh.aspx&#x27;</span></span><br><span class="line">home_url = <span class="string">&#x27;http://202.195.102.33/web_xsxk/web_xs_xk_cjcx_fzjh.aspx&#x27;</span></span><br><span class="line">query_url = <span class="string">&#x27;http://202.195.102.33/web_cjgl/web_cj_xscj_cx_jy.aspx&#x27;</span></span><br><span class="line"><span class="comment"># ip代理池</span></span><br><span class="line">proxy_pool = [&#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;123.169.124.51:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;175.43.56.26:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;113.194.142.137:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;175.42.68.43:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;171.35.175.173:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;113.195.18.159:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;125.108.112.49:9000&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;113.195.23.235:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;121.232.199.237:9000&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;123.101.231.234:9999&#x27;</span>&#125;]</span><br><span class="line"><span class="comment"># 请求头伪装</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class="line">                  <span class="string">&#x27;Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.66 &#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 学号 密码 的数据源</span></span><br><span class="line">data = pd.read_excel(io=<span class="string">&#x27;./软件186.xlsx&#x27;</span>, nrows=<span class="number">37</span>)</span><br><span class="line">person = []</span><br><span class="line">grade = []</span><br><span class="line"><span class="comment"># 处理账号数据</span></span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> data.values:</span><br><span class="line">    person.append(</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&#x27;学号&#x27;</span>: d[<span class="number">1</span>],</span><br><span class="line">            <span class="string">&#x27;身份证号&#x27;</span>: d[<span class="number">4</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"><span class="comment"># 循环请求</span></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> person:</span><br><span class="line">    proxies = random.choice(proxy_pool)</span><br><span class="line">    session = requests.session()</span><br><span class="line">    base_data = etree.HTML(session.get(url=base_url, headers=headers, proxies=proxies).content.decode())</span><br><span class="line">    __VIEWSTATE = base_data.xpath(<span class="string">&#x27;//input[@id=&quot;__VIEWSTATE&quot;]/@value&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;__VIEWSTATE&#x27;</span>: __VIEWSTATE,</span><br><span class="line">        <span class="string">&#x27;UserName&#x27;</span>: p[<span class="string">&#x27;学号&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;Password&#x27;</span>: p[<span class="string">&#x27;身份证号&#x27;</span>][-<span class="number">6</span>:],</span><br><span class="line">        <span class="string">&#x27;getpassword&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    session.post(url=login_url, data=data, headers=headers, proxies=proxies)</span><br><span class="line">    __VIEWSTATE = etree.HTML(session.get(url=home_url, headers=headers, proxies=proxies).content.decode()).xpath(</span><br><span class="line">        <span class="string">&#x27;//input[@id=&quot;__VIEWSTATE&#x27;</span></span><br><span class="line">        <span class="string">&#x27;&quot;]/@value&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;__VIEWSTATE&#x27;</span>: __VIEWSTATE,</span><br><span class="line">        <span class="string">&#x27;ImageButton2.x&#x27;</span>: <span class="string">&#x27;47&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;ImageButton2.y&#x27;</span>: <span class="string">&#x27;55&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    session.post(url=home_url, headers=headers, data=data, proxies=proxies)</span><br><span class="line">    session.get(url=query_url, headers=headers, proxies=proxies).content.decode()</span><br><span class="line">    __VIEWSTATE = etree.HTML(session.get(url=query_url, headers=headers, proxies=proxies).content.decode()).xpath(</span><br><span class="line">        <span class="string">&#x27;//input[@id=&quot;__VIEWSTATE&quot;]/@value&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;ScriptManager1&#x27;</span>: <span class="string">&#x27;UpdatePanel1|Btcx&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;__EVENTTARGET&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;__EVENTARGUMENT&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;__VIEWSTATE&#x27;</span>: __VIEWSTATE,</span><br><span class="line">        <span class="string">&#x27;Btcx&#x27;</span>: <span class="string">&#x27;查询成绩&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.66 &#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;X-MicrosoftAjax&#x27;</span>: <span class="string">&#x27;Delta=true&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    query_page = session.post(url=query_url, headers=headers, data=data, proxies=proxies).content.decode()</span><br><span class="line">    table = etree.HTML(query_page)</span><br><span class="line">    trs = table.xpath(<span class="string">&#x27;//table[@id=&quot;gvcj1&quot;]/tr[@class=&quot;dg1-item&quot;]&#x27;</span>)</span><br><span class="line">    count = <span class="number">1</span></span><br><span class="line">    td_date = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> td <span class="keyword">in</span> trs:</span><br><span class="line">        name = td.xpath(<span class="string">&#x27;./td[2]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        subject = td.xpath(<span class="string">&#x27;./td[4]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        score = td.xpath(<span class="string">&#x27;./td[7]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> count == <span class="number">1</span>:</span><br><span class="line">            print(<span class="string">&#x27;正在爬取&#123;&#125;的成绩...&#x27;</span>.<span class="built_in">format</span>(name))</span><br><span class="line">            td_date[<span class="string">&#x27;姓名&#x27;</span>] = name</span><br><span class="line">        td_date[subject] = score</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    grade.append(td_date)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 持久化存储</span></span><br><span class="line">save = pd.DataFrame(grade)</span><br><span class="line">save.to_csv(<span class="string">&#x27;软件186班级成绩.csv&#x27;</span>, index=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8-sig&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="结果截图"><a href="#结果截图" class="headerlink" title="结果截图"></a>结果截图</h1><p><img src="https://pic.rmb.bdstatic.com/bjh/46610b138dc5600651538ba44fc9834b.png"></p>
]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>成绩查询</tag>
      </tags>
  </entry>
  <entry>
    <title>爬取豆瓣评论并进行数据可视化</title>
    <url>/posts/31c415b7/</url>
    <content><![CDATA[<font color=#999AAA >
使用python对豆瓣进行评论爬取，并数据可视化
</font>


<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><font color=#999AAA >对豆瓣界面进行分析，没有前后端分离，对界面元素分析后，爬取相关信息并保存在csv表格中，然后进行数据分析。</font></p>
<p><font color=#999AAA >提示：以下是本篇文章正文内容，下面案例可供参考</p>
<h1 id="一、思路分析"><a href="#一、思路分析" class="headerlink" title="一、思路分析"></a>一、思路分析</h1><p>分析豆瓣页面数据，以及怎样实现循环爬取。<br><img src="https://img-blog.csdnimg.cn/20210103191844540.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"></p>
<a id="more"></a>

<p>解析到class为review-list  的div中，存放着一片div列表，也就是评论界面。<br><img src="https://img-blog.csdnimg.cn/20210103192008970.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>将其中的元素一一对应起来，接下来进行下一页爬取的分析。<br><img src="https://img-blog.csdnimg.cn/20210103192120312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>get请求携带的start参数改变，并且步长是20，也就是20条数据。也就是说，循环请求的地址为：<br><a href="https://movie.douban.com/subject/27069428/reviews?start=0">https://movie.douban.com/subject/27069428/reviews?start=0</a><br><a href="https://movie.douban.com/subject/27069428/reviews?start=20">https://movie.douban.com/subject/27069428/reviews?start=20</a><br><a href="https://movie.douban.com/subject/27069428/reviews?start=40">https://movie.douban.com/subject/27069428/reviews?start=40</a><br><a href="https://movie.douban.com/subject/27069428/reviews?start=60">https://movie.douban.com/subject/27069428/reviews?start=60</a><br>……<br>接下来进行代码的编写。</p>
<h1 id="二、代码编写"><a href="#二、代码编写" class="headerlink" title="二、代码编写"></a>二、代码编写</h1><h2 id="1-引入库"><a href="#1-引入库" class="headerlink" title="1.引入库"></a>1.引入库</h2><p><font color=#999AAA >代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 伪装头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: UserAgent().random,</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;movie.douban.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 遍历用的url模板</span></span><br><span class="line">base_url = <span class="string">&#x27;https://movie.douban.com/subject/27069428/reviews?start=&#123;&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 代理池</span></span><br><span class="line">proxy_pool = [&#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://123.169.118.8:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://175.43.154.137:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://117.91.165.126:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://113.124.86.125:9999&#x27;</span>&#125;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="2-解析页面数据"><a href="#2-解析页面数据" class="headerlink" title="2.解析页面数据"></a>2.解析页面数据</h2><p><font color=#999AAA >代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_detail</span>(<span class="params">url</span>):</span></span><br><span class="line">	<span class="comment"># 网页请求</span></span><br><span class="line">    response = requests.get(url=url, headers=headers, proxies=random.choice(proxy_pool)).text</span><br><span class="line">    response_data = etree.HTML(response)</span><br><span class="line">    <span class="comment"># etree解析网页 获得评论的div列表</span></span><br><span class="line">    div_list = response_data.xpath(<span class="string">&#x27;//div[@class=&quot;review-list  &quot;]/div&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> div <span class="keyword">in</span> div_list:</span><br><span class="line">        <span class="comment"># 获取对应的数据 评论人 评价 评论时间 评论标题 评论主体 赞成数 反对数 回复数</span></span><br><span class="line">        name = div.xpath(<span class="string">&#x27;./div/header/a[@class=&quot;name&quot;]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        level = div.xpath(<span class="string">&#x27;./div/header/span[1]/@title&#x27;</span>)</span><br><span class="line">        <span class="comment"># 有的评价为空 list列表取[0]会报错</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(level):</span><br><span class="line">            level = level[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            level = <span class="string">&#x27;暂无评价&#x27;</span></span><br><span class="line">        time = div.xpath(<span class="string">&#x27;./div/header/span[@class=&quot;main-meta&quot;]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        title = div.xpath(<span class="string">&#x27;./div/div/h2/a/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        content = <span class="string">&quot;&quot;</span>.join(div.xpath(<span class="string">&#x27;./div/div/div[1]/div[@class=&quot;short-content&quot;]/text()&#x27;</span>)).replace(<span class="string">&quot;\n&quot;</span>,</span><br><span class="line">                                                            <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>).split(<span class="string">&quot;...&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">        up = div.xpath(<span class="string">&#x27;./div/div/div[@class=&quot;action&quot;]/a[1]/span/text()&#x27;</span>)[<span class="number">0</span>].replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        down = div.xpath(<span class="string">&#x27;./div/div/div[@class=&quot;action&quot;]/a[2]/span/text()&#x27;</span>)[<span class="number">0</span>].replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        reply = div.xpath(<span class="string">&#x27;./div/div/div[@class=&quot;action&quot;]/a[3]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        detail = [name, level, time, title, content, up, down, reply]</span><br><span class="line">        <span class="comment"># 返回对应的一条数据</span></span><br><span class="line">        <span class="keyword">yield</span> detail</span><br></pre></td></tr></table></figure>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h2 id="3-编写主函数"><a href="#3-编写主函数" class="headerlink" title="3.编写主函数"></a>3.编写主函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 打开表格文件 注意编码格式</span></span><br><span class="line">    file = <span class="built_in">open</span>(<span class="string">&#x27;有翡.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>, encoding=<span class="string">&#x27;utf-8-sig&#x27;</span>)</span><br><span class="line">    writer = csv.writer(file)</span><br><span class="line">    <span class="comment"># 写表格的头部</span></span><br><span class="line">    writer.writerow([<span class="string">&#x27;评论人&#x27;</span>, <span class="string">&#x27;评价&#x27;</span>, <span class="string">&#x27;评论时间&#x27;</span>, <span class="string">&#x27;评论标题&#x27;</span>, <span class="string">&#x27;评论主体&#x27;</span>, <span class="string">&#x27;赞成数&#x27;</span>, <span class="string">&#x27;反对数&#x27;</span>, <span class="string">&#x27;回复数&#x27;</span>])</span><br><span class="line">    <span class="comment"># 循环遍历 爬取所有评论</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">1101</span>, <span class="number">20</span>):</span><br><span class="line">        print(<span class="string">&#x27;正在爬取start=&#123;&#125;的数据&#x27;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">        <span class="comment"># 获得返回的数据</span></span><br><span class="line">        res = get_detail(base_url.<span class="built_in">format</span>(i))</span><br><span class="line">        <span class="comment"># 数据写入</span></span><br><span class="line">        writer.writerows(res)</span><br></pre></td></tr></table></figure>
<p>结果表格为：<br><img src="https://img-blog.csdnimg.cn/20210103192914142.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"></p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h2 id="4-词云"><a href="#4-词云" class="headerlink" title="4.词云"></a>4.词云</h2><p>直接上代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line">all_content = <span class="string">&#x27;&#x27;</span></span><br><span class="line">list_txt = []</span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;test.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data[<span class="string">&#x27;评论标题&#x27;</span>]:</span><br><span class="line">    all_content += <span class="built_in">str</span>(i)</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> jieba.cut(all_content):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(c) &gt;= <span class="number">2</span>:</span><br><span class="line">        list_txt.append(c)</span><br><span class="line">cut_text = <span class="string">&quot; &quot;</span>.join(list_txt)</span><br><span class="line">wordcloud = WordCloud(font_path=<span class="string">&quot;C:/Windows/Fonts/simfang.ttf&quot;</span>,</span><br><span class="line">                      background_color=<span class="string">&#x27;white&#x27;</span>,</span><br><span class="line">                      scale=<span class="number">32</span>,</span><br><span class="line">                      mode=<span class="string">&#x27;RGBA&#x27;</span>,</span><br><span class="line">                      margin=<span class="number">1</span>).generate(cut_text)</span><br><span class="line">filename = <span class="string">&quot;test.png&quot;</span></span><br><span class="line">wordcloud.to_file(filename)</span><br><span class="line">os.startfile(filename)</span><br></pre></td></tr></table></figure>
<p><strong>两张结果图片分别为：</strong></p>
<p>评论标题：<br><img src="https://img-blog.csdnimg.cn/20210103193316430.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>评论主体：<br><img src="https://img-blog.csdnimg.cn/20210103193418469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>在舍友的指点下，成功将词云的代码只用一行实现，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line">WordCloud(font_path=<span class="string">&quot;C:/Windows/Fonts/simfang.ttf&quot;</span>, background_color=<span class="string">&#x27;white&#x27;</span>, scale=<span class="number">16</span>).generate(<span class="string">&quot; &quot;</span>.join([c <span class="keyword">for</span> c <span class="keyword">in</span> jieba.cut(<span class="string">&quot;&quot;</span>.join(<span class="built_in">str</span>((pd.read_csv(<span class="string">&#x27;test.csv&#x27;</span>)[<span class="string">&#x27;评论主体&#x27;</span>]).tolist()))) <span class="keyword">if</span> <span class="built_in">len</span>(c) &gt; <span class="number">1</span>])).to_file(<span class="string">&quot;test.png&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="5-评分柱状图"><a href="#5-评分柱状图" class="headerlink" title="5.评分柱状图"></a>5.评分柱状图</h2><p>数据清洗直接上代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;test.csv&#x27;</span>)[<span class="string">&#x27;评价&#x27;</span>]</span><br><span class="line">star = []</span><br><span class="line"><span class="keyword">for</span> level <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">if</span> level == <span class="string">&#x27;力荐&#x27;</span>:</span><br><span class="line">        star.append(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">elif</span> level == <span class="string">&#x27;推荐&#x27;</span>:</span><br><span class="line">        star.append(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">elif</span> level == <span class="string">&#x27;还行&#x27;</span>:</span><br><span class="line">        star.append(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">elif</span> level == <span class="string">&#x27;较差&#x27;</span>:</span><br><span class="line">        star.append(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">elif</span> level == <span class="string">&#x27;很差&#x27;</span>:</span><br><span class="line">        star.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        star.append(<span class="number">0</span>)</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">plt.hist(star, bins=<span class="number">17</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;评价等级（0表示没有评分）&#x27;</span>, size=<span class="number">18</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;人数&#x27;</span>, size=<span class="number">20</span>)</span><br><span class="line">plt.savefig(<span class="string">&#x27;评分.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>结果图：<br><img src="https://img-blog.csdnimg.cn/20210103194704217.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><font color=#999AAA >以上就是今天要讲的内容，本文仅仅简单介绍了爬虫的使用和数据可视化的冰山一角，以后再见吧！<br><strong>注：案例仅供学习</strong></p>
]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>豆瓣</tag>
        <tag>评论</tag>
      </tags>
  </entry>
  <entry>
    <title>爬取链家二手房信息并存储到数据库</title>
    <url>/posts/2e361f77/</url>
    <content><![CDATA[<font color=#999AAA >
爬取链家的二手房信息，存储到数据库方便以后查看
</font>


<h1 id="页面分析"><a href="#页面分析" class="headerlink" title="页面分析"></a>页面分析</h1><p><font color=#999AAA >分析页面后发现是前后端未分离的状态，所以需要使用xpath分析界面元素</font><br><img src="https://img-blog.csdnimg.cn/20210103184811880.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"></p>
<a id="more"></a>

<p>在li中存放着对应的div，有相关的信息：<br><img src="https://img-blog.csdnimg.cn/2021010318494381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>分析请求链接：<br><img src="https://img-blog.csdnimg.cn/20210103185129747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>只需要更改pg后面的数字即可，页面分析完毕。</p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<p><font color=#999AAA >提示：以下是本篇文章正文内容，下面案例可供参考</p>
<h1 id="引入库"><a href="#引入库" class="headerlink" title="引入库"></a>引入库</h1><p><font color=#999AAA >代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代理池</span></span><br><span class="line">proxy_pool = [&#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;175.43.151.3:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;220.249.149.140:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;175.44.108.206:9999&#x27;</span>&#125;,</span><br><span class="line">              &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;120.83.101.115:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;175.42.122.233:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;60.13.42.107:9999&#x27;</span>&#125;,</span><br><span class="line">              &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;113.195.152.127:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;36.248.133.196:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;120.83.105.95:9999&#x27;</span>&#125;,</span><br><span class="line">              &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;112.111.217.160:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;171.12.221.158:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;113.121.72.221:9999&#x27;</span>&#125;]</span><br><span class="line"><span class="comment"># 伪装头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;nj.lianjia.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: UserAgent().random</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 开启数据库</span></span><br><span class="line">conn = pymysql.Connect(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">3306</span>, user=<span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">                       password=<span class="string">&#x27;数据库密码&#x27;</span>, db=<span class="string">&#x27;对应数据库&#x27;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="方法编写"><a href="#方法编写" class="headerlink" title="方法编写"></a>方法编写</h1><p><font color=#999AAA >代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span>(<span class="params">url</span>):</span></span><br><span class="line">	<span class="comment"># 请求页面</span></span><br><span class="line">    response = requests.get(url=url, headers=headers, proxies=random.choice(proxy_pool)).text</span><br><span class="line">    <span class="comment"># 使用etree解析对象</span></span><br><span class="line">    parse_data = etree.HTML(response)</span><br><span class="line">    <span class="comment"># 获取li的列表</span></span><br><span class="line">    li_list = parse_data.xpath(<span class="string">&#x27;//ul[@class=&quot;sellListContent&quot;]/li&#x27;</span>)</span><br><span class="line">    <span class="comment"># 循环</span></span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">    	<span class="comment"># 标题</span></span><br><span class="line">        title = li.xpath(<span class="string">&#x27;./div[@class=&quot;info clear&quot;]/div[@class=&quot;title&quot;]/a/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 地址</span></span><br><span class="line">        flood = li.xpath(<span class="string">&#x27;./div[@class=&quot;info clear&quot;]/div[@class=&quot;flood&quot;]/div[@class=&quot;positionInfo&quot;]/a[1]/text()&#x27;</span>)[<span class="number">0</span>] + \</span><br><span class="line">                <span class="string">&#x27;- &#x27;</span> + \</span><br><span class="line">                li.xpath(<span class="string">&#x27;./div[@class=&quot;info clear&quot;]/div[@class=&quot;flood&quot;]/div[@class=&quot;positionInfo&quot;]/a[2]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 房型描述</span></span><br><span class="line">        address = li.xpath(<span class="string">&#x27;./div[@class=&quot;info clear&quot;]/div[@class=&quot;address&quot;]/div[@class=&quot;houseInfo&quot;]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 状态</span></span><br><span class="line">        followInfo = li.xpath(<span class="string">&#x27;./div[@class=&quot;info clear&quot;]/div[@class=&quot;followInfo&quot;]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 总价</span></span><br><span class="line">        totalPrice = li.xpath(<span class="string">&#x27;./div[@class=&quot;info clear&quot;]/div[@class=&quot;priceInfo&quot;]/div[@class=&quot;totalPrice&quot;]/span[&#x27;</span></span><br><span class="line">                              <span class="string">&#x27;1]/text()&#x27;</span>)[<span class="number">0</span>] + <span class="string">&#x27;万&#x27;</span></span><br><span class="line">        <span class="comment"># 单价</span></span><br><span class="line">        unitPrice = li.xpath(<span class="string">&#x27;./div[@class=&quot;info clear&quot;]/div[@class=&quot;priceInfo&quot;]/div[@class=&quot;unitPrice&quot;]/span[1]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># mysql数据库操作语句</span></span><br><span class="line">        sql = <span class="string">&#x27;insert into lianjia(title, flood, address, followInfo,totalPrice, unitPrice) &#x27;</span> \</span><br><span class="line">              <span class="string">&#x27;values (&quot;&#123;&#125;&quot;, &quot;&#123;&#125;&quot;, &quot;&#123;&#125;&quot;, &quot;&#123;&#125;&quot;, &quot;&#123;&#125;&quot;, &quot;&#123;&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(title, flood, address, followInfo, totalPrice, unitPrice)</span><br><span class="line">        cursor = conn.cursor()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">        	<span class="comment"># 执行语句</span></span><br><span class="line">            cursor.execute(sql)</span><br><span class="line">            <span class="comment"># 事务</span></span><br><span class="line">            conn.commit()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            <span class="comment"># 异常则回滚，保证数据安全</span></span><br><span class="line">            conn.rollback()</span><br></pre></td></tr></table></figure>
<h1 id="主函数编写"><a href="#主函数编写" class="headerlink" title="主函数编写"></a>主函数编写</h1><p><font color=#999AAA >代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	<span class="comment"># 数据库模板</span></span><br><span class="line">    base_url = <span class="string">&#x27;https://nj.lianjia.com/ershoufang/pg&#123;&#125;/&#x27;</span></span><br><span class="line">    <span class="comment"># 循环遍历</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">        get_page(base_url.<span class="built_in">format</span>(i))</span><br><span class="line">        print(<span class="string">&#x27;正在存储第&#123;&#125;条&#x27;</span>.<span class="built_in">format</span>(i) + <span class="string">&#x27;....&#x27;</span>)</span><br><span class="line">    <span class="comment"># 关闭数据库链接</span></span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p><img src="https://img-blog.csdnimg.cn/20210103190350411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>对其进行条件查找，找出自己想要的数据：<br><img src="https://img-blog.csdnimg.cn/20210103190905199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br><strong>注：案例仅供学习</strong></p>
]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>链家</tag>
        <tag>二手房</tag>
      </tags>
  </entry>
  <entry>
    <title>笔趣网整本小说爬取</title>
    <url>/posts/cf49fdc5/</url>
    <content><![CDATA[<font color=#999AAA >
使用python对笔趣网小说进行逐页爬取。
</font>


<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><font color=#999AAA >这个网站的下载链接奇慢无比，闲来无事，使用python对其进行循环爬取。</font></p>
<p><font color=#999AAA >以下是本篇文章正文内容，下面案例可供参考</p>
<h1 id="一、页面分析"><a href="#一、页面分析" class="headerlink" title="一、页面分析"></a>一、页面分析</h1><p><img src="https://img-blog.csdnimg.cn/20210117152047206.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>很显然，这是书籍的详情页，我们在这个页面只需要两种数据，一个就是我们的书籍名称，还有就是对应章节的详情链接，只有获取了章节的详情链接我们才可以进行文字的爬取。</p>
<a id="more"></a>

<p><img src="https://img-blog.csdnimg.cn/20210117152300155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>可以看出来这个界面很简单，也没什么反爬措施，轻而易举获得我们想要的数据。<br><img src="https://img-blog.csdnimg.cn/20210117152403409.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>这里唯一要注意的就是获取的文字内容是list，我们需要在其中进行再遍历。<br>然后替换其中的换行之类的无用字符，最后写入到txt文件中。</p>
<h1 id="二、代码编写"><a href="#二、代码编写" class="headerlink" title="二、代码编写"></a>二、代码编写</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代理池</span></span><br><span class="line">proxy_pool = [&#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;175.42.129.251:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;175.43.156.31:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;175.43.58.14:9999&#x27;</span>&#125;,</span><br><span class="line">              &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;120.84.101.48:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;223.247.164.191:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;182.46.121.25:9999&#x27;</span>&#125;,</span><br><span class="line">              &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;115.221.245.116:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;58.22.177.192:9999&#x27;</span>&#125;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬虫类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BiQuSpider</span>:</span></span><br><span class="line">    <span class="comment"># 初始化类中成员</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, url</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;正在初始化...&#x27;</span>)</span><br><span class="line">        self.url = url</span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">&quot;Referer&quot;</span>: url,</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: UserAgent().random</span><br><span class="line">        &#125;</span><br><span class="line">        self.bookName = <span class="literal">None</span></span><br><span class="line">        self.url_pool = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取章节链接</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_urls</span>(<span class="params">self</span>):</span></span><br><span class="line">        response = requests.get(url=self.url, headers=self.headers, proxies=random.choice(proxy_pool))</span><br><span class="line">        result = etree.HTML(response.content.decode())</span><br><span class="line">        title = result.xpath(<span class="string">&#x27;//div[@id=&quot;info&quot;]/h1/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        self.bookName = title</span><br><span class="line">        urls = result.xpath(<span class="string">&#x27;//div[@class=&quot;book_list&quot;]/ul/li&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> urls:</span><br><span class="line">            url = <span class="string">&#x27;http://www.biquw.com/book/94/&#x27;</span> + i.xpath(<span class="string">&#x27;./a/@href&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            self.url_pool.append(url)</span><br><span class="line">        print(<span class="string">&#x27;章节链接爬取完毕...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 文本内容解析处理</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_text</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> self.url_pool:</span><br><span class="line">            data = []</span><br><span class="line">            content_page = requests.get(url=url, headers=self.headers, proxies=random.choice(proxy_pool))</span><br><span class="line">            result = etree.HTML(content_page.content.decode())</span><br><span class="line">            content = result.xpath(<span class="string">&#x27;//div[@id=&quot;htmlContent&quot;]&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            title = result.xpath(<span class="string">&#x27;//div[@class=&quot;h1title&quot;]/h1/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            print(<span class="string">&#x27;正在爬取&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(title))</span><br><span class="line">            <span class="keyword">for</span> t <span class="keyword">in</span> content.xpath(<span class="string">&#x27;./text()&#x27;</span>):</span><br><span class="line">                text = t.replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;\xa0&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> text:</span><br><span class="line">                    data.append(<span class="string">&#x27;   &#x27;</span> + text)</span><br><span class="line">            txt = <span class="string">&#x27;\n&#x27;</span>.join(data)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./&#123;&#125;.txt&#x27;</span>.<span class="built_in">format</span>(self.bookName), <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> w:</span><br><span class="line">                w.write(title + <span class="string">&#x27;\n&#x27;</span> + txt + <span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 运行 调用方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.get_urls()</span><br><span class="line">        self.get_text()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    spider = BiQuSpider(<span class="string">&#x27;http://www.biquw.com/book/94/&#x27;</span>)</span><br><span class="line">    spider.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p><img src="https://img-blog.csdnimg.cn/20210117152713346.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"></p>
]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>小说</tag>
      </tags>
  </entry>
  <entry>
    <title>百度翻译js逆向</title>
    <url>/posts/c39daa58/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20210114115804948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"></p>
<p>对百度翻译的js逆向爬虫分析。</p>
<a id="more"></a>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><font color=#999AAA >在有道翻译的基础上对百度翻译进行js逆向</font><br><font color=#999AAA >以下是本篇文章正文内容，下面案例可供参考</p>
<h1 id="一、分析接口"><a href="#一、分析接口" class="headerlink" title="一、分析接口"></a>一、分析接口</h1><p>在输入框输入英文，在自带的抓包工具中可以看到有一个新的异步请求：<br><img src="https://img-blog.csdnimg.cn/20210114115804948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>可以看到这里是需要cookie和token的：<br><img src="https://img-blog.csdnimg.cn/20210114115853560.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210114120028733.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>进行全局搜索sign：<br><img src="https://img-blog.csdnimg.cn/20210114120407509.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>可以看到这里就是我们传进去的参数，我们进行格式化，并找到相应的语句打断点：<br><img src="https://img-blog.csdnimg.cn/20210114120610152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>可以看到n就是我们输入的数据，token是根据 window.common.token生成的，simple_means_flag始终为 3，transtype始终为realtime。<br>我们最后解决一下sign生成的问题，看一下生成的函数：<br><img src="https://img-blog.csdnimg.cn/20210114120853522.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>可以看到函数很长，我们使用python进行模拟的话，工作量是很大的，于是使用第三方库直接编译js，并分析函数过程中需要哪些值，要传哪些参数。<br>运行中发现缺少i的值，是不变的，于是补齐：<br><img src="https://img-blog.csdnimg.cn/20210114121216367.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>又发现有一个函数n没有定义：<br><img src="https://img-blog.csdnimg.cn/20210114121314159.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>定位到n所在的位置，就在函数e的上方，并在js文件中补齐：<br><img src="https://img-blog.csdnimg.cn/20210114121350149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>到此分析已经结束，接下来进行代码的编写。</p>
<h1 id="二、代码编写"><a href="#二、代码编写" class="headerlink" title="二、代码编写"></a>二、代码编写</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模仿JavaScript生成sign参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sign</span>(<span class="params">word</span>):</span></span><br><span class="line">    <span class="comment"># 打开js文件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.js&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> js:</span><br><span class="line">        js_code = js.read()</span><br><span class="line">    <span class="comment"># 运行 js 文件</span></span><br><span class="line">    sign = execjs.<span class="built_in">compile</span>(js_code).call(<span class="string">&#x27;e&#x27;</span>, word)</span><br><span class="line">    <span class="comment"># 返回参数</span></span><br><span class="line">    <span class="keyword">return</span> sign</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求百度翻译接口</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request</span>(<span class="params">word</span>):</span></span><br><span class="line">    <span class="comment"># 中英文识别</span></span><br><span class="line">    <span class="keyword">if</span> word[<span class="number">0</span>] <span class="keyword">in</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>]:</span><br><span class="line">        f = <span class="string">&#x27;en&#x27;</span></span><br><span class="line">        t = <span class="string">&#x27;zh&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f = <span class="string">&#x27;zh&#x27;</span></span><br><span class="line">        t = <span class="string">&#x27;en&#x27;</span></span><br><span class="line">    <span class="comment"># 获取sign</span></span><br><span class="line">    sign = get_sign(word)</span><br><span class="line">    url = <span class="string">&#x27;https://fanyi.baidu.com/v2transapi?from=en&amp;to=zh&#x27;</span></span><br><span class="line">    <span class="comment"># 伪装头</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;cookie&#x27;</span>: <span class="string">&#x27;你的cookie&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;Chrome/87.0.4280.141 Safari/537.36 Edg/87.0.664.75 &#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># post提交的参数</span></span><br><span class="line">    formData = &#123;</span><br><span class="line">        <span class="string">&#x27;from&#x27;</span>: f,</span><br><span class="line">        <span class="string">&#x27;to&#x27;</span>: t,</span><br><span class="line">        <span class="string">&#x27;query&#x27;</span>: word,</span><br><span class="line">        <span class="string">&#x27;transtype&#x27;</span>: <span class="string">&#x27;realtime&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;simple_means_flag&#x27;</span>: <span class="string">&#x27;3&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sign&#x27;</span>: sign,</span><br><span class="line">        <span class="string">&#x27;token&#x27;</span>: <span class="string">&#x27;你的token&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;domain&#x27;</span>: <span class="string">&#x27;common&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 请求 并转json</span></span><br><span class="line">    response = requests.post(url=url, headers=headers, data=formData).json()</span><br><span class="line">    <span class="comment"># json数据分析</span></span><br><span class="line">    <span class="keyword">if</span> response.get(<span class="string">&#x27;liju_result&#x27;</span>).get(<span class="string">&#x27;tag&#x27;</span>):</span><br><span class="line">        print(<span class="string">&#x27;, &#x27;</span>.join(response.get(<span class="string">&#x27;liju_result&#x27;</span>).get(<span class="string">&#x27;tag&#x27;</span>)))</span><br><span class="line">    <span class="keyword">if</span> response.get(<span class="string">&#x27;trans_result&#x27;</span>).get(<span class="string">&#x27;data&#x27;</span>):</span><br><span class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> response.get(<span class="string">&#x27;trans_result&#x27;</span>).get(<span class="string">&#x27;data&#x27;</span>):</span><br><span class="line">            print(d[<span class="string">&#x27;dst&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        word = <span class="built_in">input</span>(<span class="string">&#x27;请输入需要翻译的英文（中文）：&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> word == <span class="string">&#x27;exit0&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        request(word)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>下面是JavaScript代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params">r</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="string">&#x27;320305.131321201&#x27;</span></span><br><span class="line">    <span class="keyword">var</span> o = r.match(<span class="regexp">/[\uD800-\uDBFF][\uDC00-\uDFFF]/g</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> === o) &#123;</span><br><span class="line">        <span class="keyword">var</span> t = r.length;</span><br><span class="line">        t &gt; <span class="number">30</span> &amp;&amp; (r = <span class="string">&quot;&quot;</span> + r.substr(<span class="number">0</span>, <span class="number">10</span>) + r.substr(<span class="built_in">Math</span>.floor(t / <span class="number">2</span>) - <span class="number">5</span>, <span class="number">10</span>) + r.substr(-<span class="number">10</span>, <span class="number">10</span>))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> e = r.split(<span class="regexp">/[\uD800-\uDBFF][\uDC00-\uDFFF]/</span>), C = <span class="number">0</span>, h = e.length, f = []; h &gt; C; C++)</span><br><span class="line">            <span class="string">&quot;&quot;</span> !== e[C] &amp;&amp; f.push.apply(f, a(e[C].split(<span class="string">&quot;&quot;</span>))),</span><br><span class="line">            C !== h - <span class="number">1</span> &amp;&amp; f.push(o[C]);</span><br><span class="line">        <span class="keyword">var</span> g = f.length;</span><br><span class="line">        g &gt; <span class="number">30</span> &amp;&amp; (r = f.slice(<span class="number">0</span>, <span class="number">10</span>).join(<span class="string">&quot;&quot;</span>) + f.slice(<span class="built_in">Math</span>.floor(g / <span class="number">2</span>) - <span class="number">5</span>, <span class="built_in">Math</span>.floor(g / <span class="number">2</span>) + <span class="number">5</span>).join(<span class="string">&quot;&quot;</span>) + f.slice(-<span class="number">10</span>).join(<span class="string">&quot;&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> u = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , l = <span class="string">&quot;&quot;</span> + <span class="built_in">String</span>.fromCharCode(<span class="number">103</span>) + <span class="built_in">String</span>.fromCharCode(<span class="number">116</span>) + <span class="built_in">String</span>.fromCharCode(<span class="number">107</span>);</span><br><span class="line">    u = <span class="literal">null</span> !== i ? i : (i = <span class="built_in">window</span>[l] || <span class="string">&quot;&quot;</span>) || <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> d = u.split(<span class="string">&quot;.&quot;</span>), m = <span class="built_in">Number</span>(d[<span class="number">0</span>]) || <span class="number">0</span>, s = <span class="built_in">Number</span>(d[<span class="number">1</span>]) || <span class="number">0</span>, S = [], c = <span class="number">0</span>, v = <span class="number">0</span>; v &lt; r.length; v++) &#123;</span><br><span class="line">        <span class="keyword">var</span> A = r.charCodeAt(v);</span><br><span class="line">        <span class="number">128</span> &gt; A ? S[c++] = A : (<span class="number">2048</span> &gt; A ? S[c++] = A &gt;&gt; <span class="number">6</span> | <span class="number">192</span> : (<span class="number">55296</span> === (<span class="number">64512</span> &amp; A) &amp;&amp; v + <span class="number">1</span> &lt; r.length &amp;&amp; <span class="number">56320</span> === (<span class="number">64512</span> &amp; r.charCodeAt(v + <span class="number">1</span>)) ? (A = <span class="number">65536</span> + ((<span class="number">1023</span> &amp; A) &lt;&lt; <span class="number">10</span>) + (<span class="number">1023</span> &amp; r.charCodeAt(++v)),</span><br><span class="line">        S[c++] = A &gt;&gt; <span class="number">18</span> | <span class="number">240</span>,</span><br><span class="line">        S[c++] = A &gt;&gt; <span class="number">12</span> &amp; <span class="number">63</span> | <span class="number">128</span>) : S[c++] = A &gt;&gt; <span class="number">12</span> | <span class="number">224</span>,</span><br><span class="line">        S[c++] = A &gt;&gt; <span class="number">6</span> &amp; <span class="number">63</span> | <span class="number">128</span>),</span><br><span class="line">        S[c++] = <span class="number">63</span> &amp; A | <span class="number">128</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> p = m, F = <span class="string">&quot;&quot;</span> + <span class="built_in">String</span>.fromCharCode(<span class="number">43</span>) + <span class="built_in">String</span>.fromCharCode(<span class="number">45</span>) + <span class="built_in">String</span>.fromCharCode(<span class="number">97</span>) + (<span class="string">&quot;&quot;</span> + <span class="built_in">String</span>.fromCharCode(<span class="number">94</span>) + <span class="built_in">String</span>.fromCharCode(<span class="number">43</span>) + <span class="built_in">String</span>.fromCharCode(<span class="number">54</span>)), D = <span class="string">&quot;&quot;</span> + <span class="built_in">String</span>.fromCharCode(<span class="number">43</span>) + <span class="built_in">String</span>.fromCharCode(<span class="number">45</span>) + <span class="built_in">String</span>.fromCharCode(<span class="number">51</span>) + (<span class="string">&quot;&quot;</span> + <span class="built_in">String</span>.fromCharCode(<span class="number">94</span>) + <span class="built_in">String</span>.fromCharCode(<span class="number">43</span>) + <span class="built_in">String</span>.fromCharCode(<span class="number">98</span>)) + (<span class="string">&quot;&quot;</span> + <span class="built_in">String</span>.fromCharCode(<span class="number">43</span>) + <span class="built_in">String</span>.fromCharCode(<span class="number">45</span>) + <span class="built_in">String</span>.fromCharCode(<span class="number">102</span>)), b = <span class="number">0</span>; b &lt; S.length; b++)</span><br><span class="line">        p += S[b],</span><br><span class="line">        p = n(p, F);</span><br><span class="line">    <span class="keyword">return</span> p = n(p, D),</span><br><span class="line">    p ^= s,</span><br><span class="line">    <span class="number">0</span> &gt; p &amp;&amp; (p = (<span class="number">2147483647</span> &amp; p) + <span class="number">2147483648</span>),</span><br><span class="line">    p %= <span class="number">1e6</span>,</span><br><span class="line">    p.toString() + <span class="string">&quot;.&quot;</span> + (p ^ m)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params">r, o</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="number">0</span>; t &lt; o.length - <span class="number">2</span>; t += <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> a = o.charAt(t + <span class="number">2</span>);</span><br><span class="line">        a = a &gt;= <span class="string">&quot;a&quot;</span> ? a.charCodeAt(<span class="number">0</span>) - <span class="number">87</span> : <span class="built_in">Number</span>(a),</span><br><span class="line">        a = <span class="string">&quot;+&quot;</span> === o.charAt(t + <span class="number">1</span>) ? r &gt;&gt;&gt; a : r &lt;&lt; a,</span><br><span class="line">        r = <span class="string">&quot;+&quot;</span> === o.charAt(t) ? r + a &amp; <span class="number">4294967295</span> : r ^ a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p><img src="https://img-blog.csdnimg.cn/20210114122048371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"></p>
]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>js逆向</tag>
        <tag>百度翻译</tag>
      </tags>
  </entry>
  <entry>
    <title>链家新房信息获取练习</title>
    <url>/posts/b3588f8a/</url>
    <content><![CDATA[<font color=#999AAA >
使用python对链家新房相关数据进行爬取，并进行持久化存储。
</font>

<div class="note default"><p>多练习 熟能生巧</p></div>


<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><font color=#999AAA >以下是本篇文章正文内容，下面案例可供参考</p>
<h1 id="一、页面分析"><a href="#一、页面分析" class="headerlink" title="一、页面分析"></a>一、页面分析</h1><p>老样子进行页面分析，ul下的li中存放着我们想要的信息，没什么好讲的。<br><img src="https://img-blog.csdnimg.cn/20210117134357570.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"></p>
<a id="more"></a>

<p>理清楚思路，对所有一共八十几个页面进行访问，随机伪装机型和ip代理，并找到链接的请求格式。<br><img src="https://img-blog.csdnimg.cn/20210117134539263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"><br>接下来只需要使用xpath定位到相关的元素信息即可，将解析的数据存入数据库中。<br>进入代码编写阶段。</p>
<h1 id="二、代码编写"><a href="#二、代码编写" class="headerlink" title="二、代码编写"></a>二、代码编写</h1><h2 id="1-数据库表的建立"><a href="#1-数据库表的建立" class="headerlink" title="1.数据库表的建立"></a>1.数据库表的建立</h2><p><font color=#999AAA >代码如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `xinfang` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `resblock_type` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `sale_status` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `area` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `location` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `resblock_room` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `resblock_area` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `main_price` <span class="type">varchar</span>(<span class="number">150</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `<span class="keyword">second</span>` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `img_url` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">843</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>
<h2 id="2-代码编写"><a href="#2-代码编写" class="headerlink" title="2.代码编写"></a>2.代码编写</h2><p><font color=#999AAA >代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代理池</span></span><br><span class="line">proxy_pool = [&#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;112.84.53.165:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;171.35.169.58:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;49.86.180.142:9999&#x27;</span>&#125;,</span><br><span class="line">              &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;113.194.131.190:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;110.243.22.233:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;123.169.163.99:9999&#x27;</span>&#125;,</span><br><span class="line">              &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;123.163.117.140:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;113.195.20.166:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;114.235.23.237:9000&#x27;</span>&#125;,</span><br><span class="line">              &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;202.109.157.64:9000&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;171.35.175.31:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;113.195.168.235:9999&#x27;</span>&#125;,</span><br><span class="line">              &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;125.108.75.135:9000&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;123.101.237.3:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;139.155.41.15:8118&#x27;</span>&#125;,</span><br><span class="line">              &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;118.212.104.240:9999&#x27;</span>&#125;]</span><br><span class="line"><span class="comment"># 伪装头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://nj.fang.lianjia.com/&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: UserAgent().random</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print(<span class="string">&#x27;打开数据库...&#x27;</span>)</span><br><span class="line">    <span class="comment"># 打开数据库</span></span><br><span class="line">    conn = pymysql.Connect(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">3306</span>, user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">                           password=<span class="string">&#x27;&#x27;</span>, db=<span class="string">&#x27;spider&#x27;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    <span class="comment"># 链接模板 使用format填充</span></span><br><span class="line">    base_url = <span class="string">&#x27;https://nj.fang.lianjia.com/loupan/pg&#123;&#125;/&#x27;</span></span><br><span class="line">    <span class="comment"># 存放url的数组</span></span><br><span class="line">    data = []</span><br><span class="line">    print(<span class="string">&#x27;初始化数据...&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">86</span>):</span><br><span class="line">        <span class="comment"># 循环写入url</span></span><br><span class="line">        data.append(base_url.<span class="built_in">format</span>(i))</span><br><span class="line">    print(<span class="string">&#x27;开始爬取...&#x27;</span>)</span><br><span class="line">    <span class="comment"># 遍历url 请求网址 并解析</span></span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> data:</span><br><span class="line">        <span class="comment"># get请求访问 使用代理</span></span><br><span class="line">        response = requests.get(url=url, headers=headers, proxies=random.choice(proxy_pool))</span><br><span class="line">        <span class="comment"># etree解析</span></span><br><span class="line">        res_data = etree.HTML(response.content.decode())</span><br><span class="line">        <span class="comment"># xpath定位到所有的li</span></span><br><span class="line">        lis = res_data.xpath(<span class="string">&#x27;//li[@class=&quot;resblock-list post_ulog_exposure_scroll has-results&quot;]&#x27;</span>)</span><br><span class="line">        <span class="comment"># 在循环的li下进行解析</span></span><br><span class="line">        <span class="keyword">for</span> li <span class="keyword">in</span> lis:</span><br><span class="line">            <span class="comment"># 图片地址</span></span><br><span class="line">            img_url = li.xpath(<span class="string">&#x27;./a/img/@data-original&#x27;</span>)[<span class="number">0</span>].split(<span class="string">&#x27;.592x432.jpg&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="comment"># 小区名字</span></span><br><span class="line">            name = li.xpath(<span class="string">&#x27;./div[@class=&quot;resblock-desc-wrapper&quot;]/div[@class=&quot;resblock-name&quot;]/a[1]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="comment"># 以下都是相关信息 就不做赘叙</span></span><br><span class="line">            resblock_type = li.xpath(<span class="string">&#x27;./div[@class=&quot;resblock-desc-wrapper&quot;]/div[@class=&quot;resblock-name&quot;]/span[1]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            sale_status = li.xpath(<span class="string">&#x27;./div[@class=&quot;resblock-desc-wrapper&quot;]/div[@class=&quot;resblock-name&quot;]/span[2]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            area = li.xpath(<span class="string">&#x27;./div[@class=&quot;resblock-desc-wrapper&quot;]/div[@class=&quot;resblock-location&quot;]/span[1]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            location = li.xpath(<span class="string">&#x27;./div[@class=&quot;resblock-desc-wrapper&quot;]/div[@class=&quot;resblock-location&quot;]/span[1]/text()&#x27;</span>)[<span class="number">0</span>] + <span class="string">&#x27;/&#x27;</span> + \</span><br><span class="line">                       li.xpath(<span class="string">&#x27;./div[@class=&quot;resblock-desc-wrapper&quot;]/div[@class=&quot;resblock-location&quot;]/span[2]/text()&#x27;</span>)[<span class="number">0</span>] + <span class="string">&#x27;/&#x27;</span> + \</span><br><span class="line">                       li.xpath(<span class="string">&#x27;./div[@class=&quot;resblock-desc-wrapper&quot;]/div[@class=&quot;resblock-location&quot;]/a[1]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            resblock_room = li.xpath(<span class="string">&#x27;./div[@class=&quot;resblock-desc-wrapper&quot;]/a[@class=&quot;resblock-room&quot;]/span[1]/text()&#x27;</span>)</span><br><span class="line">            <span class="comment"># 有些数据为空 要进行替换 否则数据库写入报错</span></span><br><span class="line">            <span class="keyword">if</span> resblock_room:</span><br><span class="line">                resblock_room = resblock_room[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                resblock_room = <span class="string">&#x27;暂无信息&#x27;</span></span><br><span class="line">            resblock_area = li.xpath(<span class="string">&#x27;./div[@class=&quot;resblock-desc-wrapper&quot;]/div[@class=&quot;resblock-area&quot;]/span[1]/text()&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> resblock_area:</span><br><span class="line">                resblock_area = resblock_area[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                resblock_area = <span class="string">&#x27;暂无信息&#x27;</span></span><br><span class="line">            main_price = li.xpath(<span class="string">&#x27;./div[@class=&quot;resblock-desc-wrapper&quot;]/div[@class=&quot;resblock-price&quot;]/div[@class=&quot;main-price&quot;]/span[@class=&quot;number&quot;]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            second = li.xpath(<span class="string">&#x27;./div[@class=&quot;resblock-desc-wrapper&quot;]/div[@class=&quot;resblock-price&quot;]/div[@class=&quot;second&quot;]/text()&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> second:</span><br><span class="line">                second = second[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                second = <span class="string">&#x27;暂无信息&#x27;</span></span><br><span class="line">            <span class="comment"># sql语句</span></span><br><span class="line">            sql = <span class="string">&#x27;insert into xinfang(name, resblock_type, sale_status, area, location, resblock_room, resblock_area, main_price, second, img_url) values (&quot;&#123;&#125;&quot;, &quot;&#123;&#125;&quot;, &quot;&#123;&#125;&quot;, &quot;&#123;&#125;&quot;, &quot;&#123;&#125;&quot;, &quot;&#123;&#125;&quot;, &quot;&#123;&#125;&quot;, &quot;&#123;&#125;&quot;, &quot;&#123;&#125;&quot;, &quot;&#123;&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                name, resblock_type, sale_status, area, location, resblock_room, resblock_area, main_price, second,</span><br><span class="line">                img_url)</span><br><span class="line">            cursor = conn.cursor()</span><br><span class="line">            <span class="comment"># 事务 提交 回滚</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                cursor.execute(sql)</span><br><span class="line">                conn.commit()</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                print(e)</span><br><span class="line">                conn.rollback()</span><br><span class="line">    print(<span class="string">&#x27;爬取结束关闭数据库...&#x27;</span>)</span><br><span class="line">    <span class="comment"># 关闭数据库链接 程序结束</span></span><br><span class="line">    conn.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p><font color=#999AAA >程序运行结果如下：<br><img src="https://img-blog.csdnimg.cn/202101171354012.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70"></p>
]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>链家</tag>
      </tags>
  </entry>
  <entry>
    <title>JUC并发编程</title>
    <url>/posts/eb9166f8/</url>
    <content><![CDATA[<h1 id="JUC并发编程"><a href="#JUC并发编程" class="headerlink" title="JUC并发编程"></a>JUC并发编程</h1><h2 id="线程和进程"><a href="#线程和进程" class="headerlink" title="线程和进程"></a>线程和进程</h2><p>进程：一个程序 一个进程可以包含多个线程 至少包含一个</p>
<p>java默认是有两个线程的：一个是main线程 一个是GC线程（做垃圾回收）</p>
<p>线程：开了一个IDEA进程，写完代码自动保存（线程负责的）</p>
<p>对于java而言：Thread、Runable、Callable</p>
<p><strong>java真的可以开启线程吗？</strong></p>
<p>java是没有权限去开启一个线程的，只能通过本地方法去调用底层的C++方法，java无法直接操作硬件，因为它是运行在虚拟机上的</p>
<a id="more"></a>

<blockquote>
<p>并发和并行</p>
</blockquote>
<p>并发（多个线程操作同一个资源）</p>
<ul>
<li>CPU一核，模拟出来多条线程、天下武功 唯快不破，快速交替</li>
</ul>
<p>并行 （多个人一起行走）</p>
<ul>
<li>CPU多核，多个线程可以同时执行；线程池</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取CPU的核数</span></span><br><span class="line"><span class="comment">//CPU密集型 IO密集型</span></span><br><span class="line"><span class="comment">//并发编程的</span></span><br><span class="line">System.out.println(Runtime.getRuntime().availableProcessors());</span><br></pre></td></tr></table></figure>
<p>并发编程的本质：充分利用CPU的资源</p>
<blockquote>
<p>线程有几个状态</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    NEW,<span class="comment">//新生</span></span><br><span class="line">    RUNNABLE,<span class="comment">//运行</span></span><br><span class="line">    BLOCKED,<span class="comment">//阻塞</span></span><br><span class="line">    WAITING,<span class="comment">//等待 死等</span></span><br><span class="line">    TIMED_WAITING,<span class="comment">//超时等待 有期限</span></span><br><span class="line">    TERMINATED;<span class="comment">//终止</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>wait和sleep的区别</p>
</blockquote>
<ul>
<li><p>来自不同的类</p>
<p>wait=&gt;Object</p>
<p>sleep=&gt;Thread</p>
</li>
<li><p>关于锁的释放</p>
<p>wait会释放锁</p>
<p>sleep不会释放锁</p>
</li>
<li><p>使用的范围是不同的</p>
<p>wait必须在同步代码块中睡</p>
<p>sleep可以在任何地方睡</p>
</li>
<li><p>是否需要捕获异常</p>
<p>wait需要捕获异常（中断异常）</p>
<p>sleep必须捕获异常</p>
</li>
</ul>
<h2 id="Lock锁（重点）"><a href="#Lock锁（重点）" class="headerlink" title="Lock锁（重点）"></a>Lock锁（重点）</h2><blockquote>
<p>传统Synchronized</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanchen.demo1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//基本的卖票例子</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 真正的多线程开发，公司中的开发 降低耦合</span></span><br><span class="line"><span class="comment"> * 线程就是一个单独的资源类，没有任何附属的操作</span></span><br><span class="line"><span class="comment"> * 1.属性、方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaleTicketDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//多个线程操作同一个资源类 把资源类丢入线程</span></span><br><span class="line">        <span class="comment">//@FunctionalInterface函数式接口，Lambda表达式 (参数)-&gt;&#123;代码&#125;</span></span><br><span class="line">        Ticket ticket = <span class="keyword">new</span> Ticket();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">60</span>; i++) &#123;</span><br><span class="line">                ticket.saleTicket();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">60</span>; i++) &#123;</span><br><span class="line">                ticket.saleTicket();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">60</span>; i++) &#123;</span><br><span class="line">                ticket.saleTicket();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//资源类 OOP</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket</span></span>&#123;</span><br><span class="line">    <span class="comment">//属性、方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">50</span>;</span><br><span class="line">    <span class="comment">//卖票</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">saleTicket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (number &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;卖出了&quot;</span> + (number--) + <span class="string">&quot;票，剩余：&quot;</span> + number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//锁主要锁 对象 还有 Class</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Lock接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">(<span class="keyword">boolean</span> fair)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//FairSync公平锁 NonfairSync不公平锁</span></span><br><span class="line">    sync = fair ? <span class="keyword">new</span> FairSync() : <span class="keyword">new</span> NonfairSync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>公平锁：十分公平 先来后到</p>
<p>非公平锁：十分不公平 可以插队（默认是非公平锁）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanchen.demo1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//基本的卖票例子</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 真正的多线程开发，公司中的开发 降低耦合</span></span><br><span class="line"><span class="comment"> * 线程就是一个单独的资源类，没有任何附属的操作</span></span><br><span class="line"><span class="comment"> * 1.属性、方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaleTicketDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ticket02 ticket = <span class="keyword">new</span> Ticket02();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123; <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) ticket.saleTicket(); &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123; <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) ticket.saleTicket(); &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123; <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) ticket.saleTicket(); &#125;, <span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Lock锁</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">saleTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();<span class="comment">//加锁</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//业务代码</span></span><br><span class="line">            <span class="keyword">if</span> (number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;卖出了&quot;</span> + (number--) + <span class="string">&quot;票，剩余：&quot;</span> + number);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();<span class="comment">//解锁</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Synchronized和Lock锁区别</p>
</blockquote>
<ul>
<li>Synchronized 是内置的java关键字 而 Lock是一个java类</li>
<li>Synchronized 无法判断获取锁的状态，Lock锁是可以判断是否获取到锁</li>
<li>Synchronized 会自动释放锁，Lock锁必须要手动释放，如果不释放锁会造成死锁</li>
<li>Synchronized 线程1（获得锁，阻塞）、线程2（等待，傻傻的等）；Lock锁就不一定会等待下去</li>
<li>Synchronized 可重入锁，不可以中断的，非公平；Lock，可重入锁，可以判断锁，非公平（可以自己设置）</li>
<li>Synchronized 适合锁少量的代码同步问题；Lock锁适合大量的同步代码</li>
</ul>
<blockquote>
<p>锁是什么，如何判断锁的是谁</p>
</blockquote>
<h2 id="生产者消费者问题"><a href="#生产者消费者问题" class="headerlink" title="生产者消费者问题"></a>生产者消费者问题</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanchen.demo1.product;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程之间的通信问题：生产者消费者问题 通知唤醒 等待唤醒</span></span><br><span class="line"><span class="comment"> * 线程交替执行A B操作同一个变量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Data data = <span class="keyword">new</span> Data();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.increment();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.decrement();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span></span>&#123;<span class="comment">//资源类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (number!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//等待</span></span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        number++;</span><br><span class="line">        <span class="comment">//通知其他线程我加完了</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;&quot;</span> + number);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (number == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//等待</span></span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        number--;</span><br><span class="line">        <span class="comment">//通知其他线程我减完了</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;&quot;</span> + number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>问题存在，ABCD四个线程安全吗</p>
</blockquote>
<p>多个线程用while可以避免<strong>虚假唤醒</strong></p>
<blockquote>
<p>JUC版本的生产者消费者</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanchen.demo1.product;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程之间的通信问题：生产者消费者问题 通知唤醒 等待唤醒</span></span><br><span class="line"><span class="comment"> * 线程交替执行A B操作同一个变量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Data02 data = <span class="keyword">new</span> Data02();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.increment();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.decrement();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.increment();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.decrement();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;D&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data02</span></span>&#123;<span class="comment">//资源类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    Condition condition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//等待</span></span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            number++;</span><br><span class="line">            <span class="comment">//通知其他线程我加完了</span></span><br><span class="line">            condition.signalAll();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;&quot;</span> + number);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (number == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//等待</span></span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            number--;</span><br><span class="line">            <span class="comment">//通知其他线程我减完了</span></span><br><span class="line">            condition.signalAll();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;&quot;</span> + number);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>任何一个新的技术肯定不是旧的代替，而是有新的技术和优势</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanchen.demo1.product;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程之间的通信问题：生产者消费者问题 通知唤醒 等待唤醒</span></span><br><span class="line"><span class="comment"> * 线程交替执行A B操作同一个变量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Data03 data = <span class="keyword">new</span> Data03();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                data.printA();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                data.printB();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                data.printC();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data03</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition condition1 = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition condition2 = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition condition3 = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (flag != <span class="number">1</span>) &#123;</span><br><span class="line">                condition1.await();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;A&quot;</span>);</span><br><span class="line">            flag = <span class="number">2</span>;</span><br><span class="line">            condition2.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (flag != <span class="number">2</span>) &#123;</span><br><span class="line">                condition2.await();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;B&quot;</span>);</span><br><span class="line">            flag = <span class="number">3</span>;</span><br><span class="line">            condition3.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (flag != <span class="number">3</span>) &#123;</span><br><span class="line">                condition3.await();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;C&quot;</span>);</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">            condition1.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="如何判断锁的是谁（8锁现象）"><a href="#如何判断锁的是谁（8锁现象）" class="headerlink" title="如何判断锁的是谁（8锁现象）"></a>如何判断锁的是谁（8锁现象）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanchen.demo1.lock8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关于锁的八个问题</span></span><br><span class="line"><span class="comment"> * 1.标准情况 1发短信 2打电话</span></span><br><span class="line"><span class="comment"> * 2.延迟四秒 1发短信 2打电话 抱着锁睡的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test08</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">        <span class="keyword">new</span> Thread(phone::sendMessage, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> Thread(phone::call, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line">    <span class="comment">//synchronized锁的对象是方法的调用者</span></span><br><span class="line">    <span class="comment">//两个方法用的同一个锁 谁先拿到 谁先执行</span></span><br><span class="line">    <span class="comment">//一次只能有一个线程访问该类方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">4</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;发短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanchen.demo1.lock8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 3.增加普通方法的话 先执行hello 然后才是发短信</span></span><br><span class="line"><span class="comment"> * 4.两个对象 两个同步方法 先打电话 因为不是同一个锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test082</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//两个对象 两个调用者 两把锁</span></span><br><span class="line">        Phone02 phone1 = <span class="keyword">new</span> Phone02();</span><br><span class="line">        Phone02 phone2 = <span class="keyword">new</span> Phone02();</span><br><span class="line">        <span class="keyword">new</span> Thread(phone1::sendMessage, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> Thread(phone2::call, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone02</span></span>&#123;</span><br><span class="line">    <span class="comment">//synchronized锁的对象是方法的调用者</span></span><br><span class="line">    <span class="comment">//两个方法用的同一个锁 谁先拿到 谁先执行</span></span><br><span class="line">    <span class="comment">//一次只能有一个线程访问该类方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">4</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;发短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//没有锁 不是同步方法 不受锁的影响</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanchen.demo1.lock8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 5.增加两个静态的同步方法 只有一个对象 先发短信</span></span><br><span class="line"><span class="comment"> * 6.两个对象！增加两个静态同步方法，先发短信</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test083</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(Phone03::sendMessage, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> Thread(Phone03::call, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//锁的是Phone03唯一的一个Class对象</span></span><br><span class="line"><span class="comment">//Class&lt;Phone03&gt; aClass = Phone03.class; 唯一模板 static锁的是Class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone03</span></span>&#123;</span><br><span class="line">    <span class="comment">//synchronized锁的对象是方法的调用者</span></span><br><span class="line">    <span class="comment">//static类一加载就有了 Class 模板</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">4</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;发短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanchen.demo1.lock8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 先看看是不是一个锁 再看谁先拿到锁</span></span><br><span class="line"><span class="comment"> * 7.一个静态的同步方法 一个普通同步方法 一个对象 先打电话 两个锁</span></span><br><span class="line"><span class="comment"> * 8.两个对象 一个静态的同步方法 一个普通的同步方法 先打电话</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test084</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone04 phone04 = <span class="keyword">new</span> Phone04();</span><br><span class="line">        <span class="keyword">new</span> Thread(Phone04::sendMessage, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> Thread(phone04::call, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone04</span></span>&#123;</span><br><span class="line">    <span class="comment">//synchronized锁的对象是方法的调用者</span></span><br><span class="line">    <span class="comment">//static类一加载就有了 Class 模板</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">4</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;发短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>小结</p>
</blockquote>
<p>new this 具体的一个手机</p>
<p>static Class 唯一的一个模板</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>python实现小米运动多方刷步</title>
    <url>/posts/8ecfb50e/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为了实现微信、支付宝等刷步数的功能，借用了小米运动的第三方接口，使用python模拟登录，再去伪造步数数据。</p>
<p>在小米运动中开启多端同步，数据上传后即会产生对应的同步</p>
<h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 机型伪装</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Dalvik/2.1.0 (Linux; U; Android 9; MI 6 MIUI/20.6.18)&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录模块</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">user, pwd</span>):</span></span><br><span class="line">    <span class="comment"># 获取登录code</span></span><br><span class="line">    <span class="keyword">global</span> code</span><br><span class="line">    url1 = <span class="string">&quot;https://api-user.huami.com/registrations/+86&quot;</span> + user + <span class="string">&quot;/tokens&quot;</span></span><br><span class="line">    <span class="comment"># 登录专用的请求头</span></span><br><span class="line">    headers_login = &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded;charset=UTF-8&quot;</span>,</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;MiFit/4.6.0 (iPhone; iOS 14.0.1; Scale/2.00)&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># post请求的相关数据</span></span><br><span class="line">    data1 = &#123;</span><br><span class="line">        <span class="string">&quot;client_id&quot;</span>: <span class="string">&quot;HuaMi&quot;</span>,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: pwd,</span><br><span class="line">        <span class="string">&quot;redirect_uri&quot;</span>: <span class="string">&quot;https://s3-us-west-2.amazonaws.com/hm-registration/successsignin.html&quot;</span>,</span><br><span class="line">        <span class="string">&quot;token&quot;</span>: <span class="string">&quot;access&quot;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">	res1 = requests.post(url=url1, data=data1, headers=headers_login, allow_redirects=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 获取头部中的Location信息</span></span><br><span class="line">    location = res1.headers[<span class="string">&quot;Location&quot;</span>]</span><br><span class="line">    <span class="comment"># 异常处理 通过正则取得相关的数据</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        code_pattern = re.<span class="built_in">compile</span>(<span class="string">&quot;(?&lt;=access=).*?(?=&amp;)&quot;</span>)</span><br><span class="line">        code = code_pattern.findall(location)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">&quot;登录code获取失败！\n&quot;</span>, e)</span><br><span class="line">        exit(-<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 模拟登录处理</span></span><br><span class="line">    url2 = <span class="string">&quot;https://account.huami.com/v2/client/login&quot;</span></span><br><span class="line">    <span class="comment"># post请求提交的数据</span></span><br><span class="line">    data2 = &#123;</span><br><span class="line">        <span class="string">&quot;app_name&quot;</span>: <span class="string">&quot;com.xiaomi.hm.health&quot;</span>,</span><br><span class="line">        <span class="string">&quot;app_version&quot;</span>: <span class="string">&quot;4.6.0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;code&quot;</span>: code,</span><br><span class="line">        <span class="string">&quot;country_code&quot;</span>: <span class="string">&quot;CN&quot;</span>,</span><br><span class="line">        <span class="string">&quot;device_id&quot;</span>: <span class="string">&quot;2C8B4939-0CCD-4E94-8CBA-CB8EA6E613A1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;device_model&quot;</span>: <span class="string">&quot;phone&quot;</span>,</span><br><span class="line">        <span class="string">&quot;grant_type&quot;</span>: <span class="string">&quot;access_token&quot;</span>,</span><br><span class="line">        <span class="string">&quot;third_name&quot;</span>: <span class="string">&quot;huami_phone&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    res2 = requests.post(url=url2, data=data2, headers=headers_login).json()</span><br><span class="line">    <span class="comment"># 对返回的json数据进行处理</span></span><br><span class="line">    login_token = res2.get(<span class="string">&quot;token_info&quot;</span>).get(<span class="string">&quot;login_token&quot;</span>)</span><br><span class="line">    user_id = res2.get(<span class="string">&quot;token_info&quot;</span>).get(<span class="string">&quot;user_id&quot;</span>)</span><br><span class="line">    <span class="comment"># 如果处理的值为空啧关闭程序</span></span><br><span class="line">    <span class="keyword">if</span> login_token <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> user_id <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> login_token, user_id</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;login_token和user_id为空&quot;</span>)</span><br><span class="line">        exit(-<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 获取时间戳</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_time</span>():</span></span><br><span class="line">    url = <span class="string">&#x27;http://api.m.taobao.com/rest/api3.do?api=mtop.common.getTimestamp&#x27;</span></span><br><span class="line">    response = requests.get(url, headers=headers).json()</span><br><span class="line">    <span class="comment"># 对请求返回的json数据进行处理</span></span><br><span class="line">    t = response.get(<span class="string">&#x27;data&#x27;</span>).get(<span class="string">&#x27;t&#x27;</span>)</span><br><span class="line">    <span class="comment"># 空值处理</span></span><br><span class="line">    <span class="keyword">if</span> t <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        print(<span class="string">&quot;时间戳获取失败&quot;</span>)</span><br><span class="line">        exit(-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取token相关的数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_app_token</span>(<span class="params">login_token</span>):</span></span><br><span class="line">    url = <span class="string">&quot;https://account-cn.huami.com/v1/client/app_tokens?app_name=com.xiaomi.hm.health&amp;dn=api-user.huami.com%2Capi-mifit.huami.com%2Capp-analytics.huami.com&amp;login_token=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">        login_token)</span><br><span class="line">    response = requests.get(url, headers=headers).json()</span><br><span class="line">    <span class="comment"># 解析get请求得到的json数据</span></span><br><span class="line">    app_token = response.get(<span class="string">&#x27;token_info&#x27;</span>).get(<span class="string">&#x27;app_token&#x27;</span>)</span><br><span class="line">    <span class="comment"># 空值处理</span></span><br><span class="line">    <span class="keyword">if</span> app_token <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        print(<span class="string">&quot;app_token获取失败&quot;</span>)</span><br><span class="line">        exit(-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> app_token</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 微信server酱的简单使用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vx_server</span>(<span class="params">message</span>):</span></span><br><span class="line">    <span class="comment"># message即是需要传的数据</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;text&#x27;</span>: <span class="string">&#x27;小米运动刷步结果通知&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;desp&#x27;</span>: message</span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">&#x27;你的server酱链接&#x27;</span></span><br><span class="line">    response = requests.post(url=url, data=data)</span><br><span class="line">    <span class="comment"># 对请求的status_code进行判断</span></span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        print(<span class="string">&quot;微信消息推送成功！&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;微信消息推送失败！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主程序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">domain</span>(<span class="params">user, pwd, step</span>):</span></span><br><span class="line">    <span class="comment"># 讲传进的值进行string转换</span></span><br><span class="line">    user = <span class="built_in">str</span>(user)</span><br><span class="line">    pwd = <span class="built_in">str</span>(pwd)</span><br><span class="line">    step = <span class="built_in">str</span>(step)</span><br><span class="line">    <span class="comment"># 传值的空值处理</span></span><br><span class="line">    <span class="keyword">if</span> user <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> pwd <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        print(<span class="string">&quot;参数设置有误，请重新设置！&quot;</span>)</span><br><span class="line">        exit(-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> step <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        step = <span class="built_in">str</span>(random.randint(<span class="number">10000</span>, <span class="number">19999</span>))</span><br><span class="line">        print(<span class="string">&quot;步数为空 已为您设置随即步数 (10000~19999)&quot;</span>)</span><br><span class="line">    <span class="comment"># 模拟登录</span></span><br><span class="line">    login_token, user_id = login(user, pwd)</span><br><span class="line">    <span class="comment"># 获得时间戳</span></span><br><span class="line">    t = get_time()</span><br><span class="line">    <span class="comment"># 获取token</span></span><br><span class="line">    app_token = get_app_token(login_token)</span><br><span class="line">    <span class="comment"># 对data_json进行处理</span></span><br><span class="line">    today = time.strftime(<span class="string">&quot;%F&quot;</span>)</span><br><span class="line">    data_json = <span class="string">&#x27;%5B%7B%22data_hr%22%3A%22%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F9L%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2FVv%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F0v%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F9e%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F0n%5C%2Fa%5C%2F%5C%2F%5C%2FS%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F0b%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F1FK%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2FR%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F9PTFFpaf9L%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2FR%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F0j%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F9K%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2FOv%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2Fzf%5C%2F%5C%2F%5C%2F86%5C%2Fzr%5C%2FOv88%5C%2Fzf%5C%2FPf%5C%2F%5C%2F%5C%2F0v%5C%2FS%5C%2F8%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2FSf%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2Fz3%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F0r%5C%2FOv%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2FS%5C%2F9L%5C%2Fzb%5C%2FSf9K%5C%2F0v%5C%2FRf9H%5C%2Fzj%5C%2FSf9K%5C%2F0%5C%2F%5C%2FN%5C%2F%5C%2F%5C%2F%5C%2F0D%5C%2FSf83%5C%2Fzr%5C%2FPf9M%5C%2F0v%5C%2FOv9e%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2FS%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2Fzv%5C%2F%5C%2Fz7%5C%2FO%5C%2F83%5C%2Fzv%5C%2FN%5C%2F83%5C%2Fzr%5C%2FN%5C%2F86%5C%2Fz%5C%2F%5C%2FNv83%5C%2Fzn%5C%2FXv84%5C%2Fzr%5C%2FPP84%5C%2Fzj%5C%2FN%5C%2F9e%5C%2Fzr%5C%2FN%5C%2F89%5C%2F03%5C%2FP%5C%2F89%5C%2Fz3%5C%2FQ%5C%2F9N%5C%2F0v%5C%2FTv9C%5C%2F0H%5C%2FOf9D%5C%2Fzz%5C%2FOf88%5C%2Fz%5C%2F%5C%2FPP9A%5C%2Fzr%5C%2FN%5C%2F86%5C%2Fzz%5C%2FNv87%5C%2F0D%5C%2FOv84%5C%2F0v%5C%2FO%5C%2F84%5C%2Fzf%5C%2FMP83%5C%2FzH%5C%2FNv83%5C%2Fzf%5C%2FN%5C%2F84%5C%2Fzf%5C%2FOf82%5C%2Fzf%5C%2FOP83%5C%2Fzb%5C%2FMv81%5C%2FzX%5C%2FR%5C%2F9L%5C%2F0v%5C%2FO%5C%2F9I%5C%2F0T%5C%2FS%5C%2F9A%5C%2Fzn%5C%2FPf89%5C%2Fzn%5C%2FNf9K%5C%2F07%5C%2FN%5C%2F83%5C%2Fzn%5C%2FNv83%5C%2Fzv%5C%2FO%5C%2F9A%5C%2F0H%5C%2FOf8%5C%2F%5C%2Fzj%5C%2FPP83%5C%2Fzj%5C%2FS%5C%2F87%5C%2Fzj%5C%2FNv84%5C%2Fzf%5C%2FOf83%5C%2Fzf%5C%2FOf83%5C%2Fzb%5C%2FNv9L%5C%2Fzj%5C%2FNv82%5C%2Fzb%5C%2FN%5C%2F85%5C%2Fzf%5C%2FN%5C%2F9J%5C%2Fzf%5C%2FNv83%5C%2Fzj%5C%2FNv84%5C%2F0r%5C%2FSv83%5C%2Fzf%5C%2FMP%5C%2F%5C%2F%5C%2Fzb%5C%2FMv82%5C%2Fzb%5C%2FOf85%5C%2Fz7%5C%2FNv8%5C%2F%5C%2F0r%5C%2FS%5C%2F85%5C%2F0H%5C%2FQP9B%5C%2F0D%5C%2FNf89%5C%2Fzj%5C%2FOv83%5C%2Fzv%5C%2FNv8%5C%2F%5C%2F0f%5C%2FSv9O%5C%2F0ZeXv%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F1X%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F9B%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2FTP%5C%2F%5C%2F%5C%2F1b%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F0%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F9N%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%22%2C%22date%22%3A%222020-08-14%22%2C%22data%22%3A%5B%7B%22start%22%3A0%2C%22stop%22%3A1439%2C%22value%22%3A%22UA8AUBQAUAwAUBoAUAEAYCcAUBkAUB4AUBgAUCAAUAEAUBkAUAwAYAsAYB8AYB0AYBgAYCoAYBgAYB4AUCcAUBsAUB8AUBwAUBIAYBkAYB8AUBoAUBMAUCEAUCIAYBYAUBwAUCAAUBgAUCAAUBcAYBsAYCUAATIPYD0KECQAYDMAYB0AYAsAYCAAYDwAYCIAYB0AYBcAYCQAYB0AYBAAYCMAYAoAYCIAYCEAYCYAYBsAYBUAYAYAYCIAYCMAUB0AUCAAUBYAUCoAUBEAUC8AUB0AUBYAUDMAUDoAUBkAUC0AUBQAUBwAUA0AUBsAUAoAUCEAUBYAUAwAUB4AUAwAUCcAUCYAUCwKYDUAAUUlEC8IYEMAYEgAYDoAYBAAUAMAUBkAWgAAWgAAWgAAWgAAWgAAUAgAWgAAUBAAUAQAUA4AUA8AUAkAUAIAUAYAUAcAUAIAWgAAUAQAUAkAUAEAUBkAUCUAWgAAUAYAUBEAWgAAUBYAWgAAUAYAWgAAWgAAWgAAWgAAUBcAUAcAWgAAUBUAUAoAUAIAWgAAUAQAUAYAUCgAWgAAUAgAWgAAWgAAUAwAWwAAXCMAUBQAWwAAUAIAWgAAWgAAWgAAWgAAWgAAWgAAWgAAWgAAWREAWQIAUAMAWSEAUDoAUDIAUB8AUCEAUC4AXB4AUA4AWgAAUBIAUA8AUBAAUCUAUCIAUAMAUAEAUAsAUAMAUCwAUBYAWgAAWgAAWgAAWgAAWgAAWgAAUAYAWgAAWgAAWgAAUAYAWwAAWgAAUAYAXAQAUAMAUBsAUBcAUCAAWwAAWgAAWgAAWgAAWgAAUBgAUB4AWgAAUAcAUAwAWQIAWQkAUAEAUAIAWgAAUAoAWgAAUAYAUB0AWgAAWgAAUAkAWgAAWSwAUBIAWgAAUC4AWSYAWgAAUAYAUAoAUAkAUAIAUAcAWgAAUAEAUBEAUBgAUBcAWRYAUA0AWSgAUB4AUDQAUBoAXA4AUA8AUBwAUA8AUA4AUA4AWgAAUAIAUCMAWgAAUCwAUBgAUAYAUAAAUAAAUAAAUAAAUAAAUAAAUAAAUAAAUAAAWwAAUAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAeSEAeQ8AcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcBcAcAAAcAAAcCYOcBUAUAAAUAAAUAAAUAAAUAUAUAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcCgAeQAAcAAAcAAAcAAAcAAAcAAAcAYAcAAAcBgAeQAAcAAAcAAAegAAegAAcAAAcAcAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcCkAeQAAcAcAcAAAcAAAcAwAcAAAcAAAcAIAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcCIAeQAAcAAAcAAAcAAAcAAAcAAAeRwAeQAAWgAAUAAAUAAAUAAAUAAAUAAAcAAAcAAAcBoAeScAeQAAegAAcBkAeQAAUAAAUAAAUAAAUAAAUAAAUAAAcAAAcAAAcAAAcAAAcAAAcAAAegAAegAAcAAAcAAAcBgAeQAAcAAAcAAAcAAAcAAAcAAAcAkAegAAegAAcAcAcAAAcAcAcAAAcAAAcAAAcAAAcA8AeQAAcAAAcAAAeRQAcAwAUAAAUAAAUAAAUAAAUAAAUAAAcAAAcBEAcA0AcAAAWQsAUAAAUAAAUAAAUAAAUAAAcAAAcAoAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAYAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcBYAegAAcAAAcAAAegAAcAcAcAAAcAAAcAAAcAAAcAAAeRkAegAAegAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAEAcAAAcAAAcAAAcAUAcAQAcAAAcBIAeQAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcBsAcAAAcAAAcBcAeQAAUAAAUAAAUAAAUAAAUAAAUBQAcBYAUAAAUAAAUAoAWRYAWTQAWQAAUAAAUAAAUAAAcAAAcAAAcAAAcAAAcAAAcAMAcAAAcAQAcAAAcAAAcAAAcDMAeSIAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcBQAeQwAcAAAcAAAcAAAcAMAcAAAeSoAcA8AcDMAcAYAeQoAcAwAcFQAcEMAeVIAaTYAbBcNYAsAYBIAYAIAYAIAYBUAYCwAYBMAYDYAYCkAYDcAUCoAUCcAUAUAUBAAWgAAYBoAYBcAYCgAUAMAUAYAUBYAUA4AUBgAUAgAUAgAUAsAUAsAUA4AUAMAUAYAUAQAUBIAASsSUDAAUDAAUBAAYAYAUBAAUAUAUCAAUBoAUCAAUBAAUAoAYAIAUAQAUAgAUCcAUAsAUCIAUCUAUAoAUA4AUB8AUBkAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAA%22%2C%22tz%22%3A32%2C%22did%22%3A%22DA932FFFFE8816E7%22%2C%22src%22%3A24%7D%5D%2C%22summary%22%3A%22%7B%5C%22v%5C%22%3A6%2C%5C%22slp%5C%22%3A%7B%5C%22st%5C%22%3A1597349880%2C%5C%22ed%5C%22%3A1597369860%2C%5C%22dp%5C%22%3A39%2C%5C%22lt%5C%22%3A294%2C%5C%22wk%5C%22%3A0%2C%5C%22usrSt%5C%22%3A-1440%2C%5C%22usrEd%5C%22%3A-1440%2C%5C%22wc%5C%22%3A0%2C%5C%22is%5C%22%3A169%2C%5C%22lb%5C%22%3A10%2C%5C%22to%5C%22%3A23%2C%5C%22dt%5C%22%3A0%2C%5C%22rhr%5C%22%3A58%2C%5C%22ss%5C%22%3A69%2C%5C%22stage%5C%22%3A%5B%7B%5C%22start%5C%22%3A1698%2C%5C%22stop%5C%22%3A1711%2C%5C%22mode%5C%22%3A4%7D%2C%7B%5C%22start%5C%22%3A1712%2C%5C%22stop%5C%22%3A1728%2C%5C%22mode%5C%22%3A5%7D%2C%7B%5C%22start%5C%22%3A1729%2C%5C%22stop%5C%22%3A1818%2C%5C%22mode%5C%22%3A4%7D%2C%7B%5C%22start%5C%22%3A1819%2C%5C%22stop%5C%22%3A1832%2C%5C%22mode%5C%22%3A5%7D%2C%7B%5C%22start%5C%22%3A1833%2C%5C%22stop%5C%22%3A1920%2C%5C%22mode%5C%22%3A4%7D%2C%7B%5C%22start%5C%22%3A1921%2C%5C%22stop%5C%22%3A1928%2C%5C%22mode%5C%22%3A5%7D%2C%7B%5C%22start%5C%22%3A1929%2C%5C%22stop%5C%22%3A2030%2C%5C%22mode%5C%22%3A4%7D%5D%7D%2C%5C%22stp%5C%22%3A%7B%5C%22ttl%5C%22%3A125%2C%5C%22dis%5C%22%3A82%2C%5C%22cal%5C%22%3A5%2C%5C%22wk%5C%22%3A7%2C%5C%22rn%5C%22%3A0%2C%5C%22runDist%5C%22%3A23%2C%5C%22runCal%5C%22%3A3%7D%2C%5C%22goal%5C%22%3A8000%2C%5C%22tz%5C%22%3A%5C%2228800%5C%22%2C%5C%22sn%5C%22%3A%5C%22e716882f93da%5C%22%7D%22%2C%22source%22%3A24%2C%22type%22%3A0%7D%5D&#x27;</span></span><br><span class="line">    finddate = re.<span class="built_in">compile</span>(<span class="string">r&#x27;.*?date%22%3A%22(.*?)%22%2C%22data.*?&#x27;</span>)</span><br><span class="line">    findstep = re.<span class="built_in">compile</span>(<span class="string">r&#x27;.*?ttl%5C%22%3A(.*?)%2C%5C%22dis.*?&#x27;</span>)</span><br><span class="line">    data_json = re.sub(finddate.findall(data_json)[<span class="number">0</span>], today, <span class="built_in">str</span>(data_json))</span><br><span class="line">    data_json = re.sub(findstep.findall(data_json)[<span class="number">0</span>], step, <span class="built_in">str</span>(data_json))</span><br><span class="line">    url = <span class="string">&#x27;https://api-mifit-cn.huami.com/v1/data/band_data.json?&amp;t=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(t)</span><br><span class="line">    <span class="comment"># 请求头</span></span><br><span class="line">    head = &#123;</span><br><span class="line">        <span class="string">&quot;apptoken&quot;</span>: app_token,</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    data = <span class="string">&#x27;userid=&#123;&#125;&amp;last_sync_data_time=1597306380&amp;device_type=0&amp;last_deviceid=DA932FFFFE8816E7&amp;data_json=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        user_id, data_json)</span><br><span class="line">    response = requests.post(url, data=data, headers=head).json()</span><br><span class="line">    <span class="comment"># 解析返回成功的json数据 并提取 返回状态信息</span></span><br><span class="line">    result = <span class="string">&quot;时间：&#123;&#125;\n修改步数为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime()), step) + <span class="string">&quot;\n状态：&quot;</span> + response.get(<span class="string">&#x27;message&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 程序调用 设置相应的账号和密码 以及需要刷的步数 如果步数step为空 则会自动随机一个10000~19999之间的步数</span></span><br><span class="line">    res = domain(user=<span class="string">&quot;你的小米账号&quot;</span>, pwd=<span class="string">&quot;你的小米账号密码&quot;</span>, step=你需要刷入的步数)</span><br><span class="line">    print(res)</span><br><span class="line">    <span class="comment"># 调用server酱 发送微信信息</span></span><br><span class="line">    vx_server(message=res)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h1><p><img src="https://pic.rmb.bdstatic.com/bjh/72414c533b3f039d187090a61f3915ba.png"></p>
]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>破解分析</tag>
        <tag>小米运动</tag>
        <tag>刷步</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构-第六章-图</title>
    <url>/posts/5b7c4e95/</url>
    <content><![CDATA[<h1 id="图的存储"><a href="#图的存储" class="headerlink" title="图的存储"></a>图的存储</h1><h2 id="邻接矩阵法"><a href="#邻接矩阵法" class="headerlink" title="邻接矩阵法"></a>邻接矩阵法</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxVertexNum 100<span class="comment">//顶点数目的最大值</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">char</span> Vex[MaxVertexNum];<span class="comment">//顶点表</span></span><br><span class="line">	<span class="keyword">int</span> Edge[MaxVertexNum][MaxVertexNum];<span class="comment">//邻接矩阵，边表</span></span><br><span class="line">	<span class="keyword">int</span> vexnum, arcnum;<span class="comment">//图的当前定点数和边数/弧数</span></span><br><span class="line">&#125;MGraph;</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.rmb.bdstatic.com/bjh/1e0c0cea9ebdf6b806585ccfe75ce9fa.png"></p>
<a id="more"></a>

<h2 id="邻接矩阵存储带权图（网）"><a href="#邻接矩阵存储带权图（网）" class="headerlink" title="邻接矩阵存储带权图（网）"></a>邻接矩阵存储带权图（网）</h2><p><img src="https://pic.rmb.bdstatic.com/bjh/0dcbc1bfc1806e85a5756393db9ad861.png"></p>
<h2 id="邻接表法（顺序-链式存储）"><a href="#邻接表法（顺序-链式存储）" class="headerlink" title="邻接表法（顺序+链式存储）"></a>邻接表法（顺序+链式存储）</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxVertexNum 100<span class="comment">//顶点数目的最大值</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//边/弧</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> adjvex;<span class="comment">//边/弧指向哪个结点</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span>* <span class="title">next</span>;</span><span class="comment">//指向下一条狐的指针</span></span><br><span class="line">&#125;ArcNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//顶点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VNode</span> &#123;</span></span><br><span class="line">	<span class="keyword">char</span> data;<span class="comment">//顶点信息</span></span><br><span class="line">	ArcNode* first;<span class="comment">//第一条边/弧</span></span><br><span class="line">&#125;VNode, AdjList[MaxVertexNum];</span><br><span class="line"></span><br><span class="line"><span class="comment">//用邻接表存储的图</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	AdjList vertices;</span><br><span class="line">	<span class="keyword">int</span> vexnum, arcnum;<span class="comment">//图的当前定点数和边数/弧数</span></span><br><span class="line">&#125;ALGraph;</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.rmb.bdstatic.com/bjh/9b3d65576c98baa185b52da2f2e3ba3a.png"></p>
<h2 id="十字链表存储有向图"><a href="#十字链表存储有向图" class="headerlink" title="十字链表存储有向图"></a>十字链表存储有向图</h2><p><img src="https://pic.rmb.bdstatic.com/bjh/a3770ffe60bddf427d805fca88ecb588.png"></p>
<h2 id="邻接多重表存储无向图"><a href="#邻接多重表存储无向图" class="headerlink" title="邻接多重表存储无向图"></a>邻接多重表存储无向图</h2><p><img src="https://pic.rmb.bdstatic.com/bjh/bf9544ed3929bc1bf173ab2511de989d.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/0955f061ca7253e519a8d202cbc6dd17.png"></p>
<h1 id="图的基本操作"><a href="#图的基本操作" class="headerlink" title="图的基本操作"></a>图的基本操作</h1><p><img src="https://pic.rmb.bdstatic.com/bjh/821c1374c8b53b8a211847aa7988958b.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/b7ddaa9f81df99276f6af96486000b11.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/3aaeb95ea1c6fe70f06e4137af807de0.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/234799f9e5e32c48b931b87ad77d77bd.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/b5d9a312d72da9d1d67a25de8bdf63c7.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/707e7d39bb8ade2e9eabc012bd2fd88c.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/15a87c2548522c704d6d60a4e8f9ef37.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/123889011ea4eeabf48acb9b8e0b8be3.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/a8a08259a1578e19d79496074db04c47.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/871f5af4d43eb8a94098891995b18d0e.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/291fa643172ae46a71bfd7076cfd13e7.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/c6680cb79a8f5188061f20d5864ac892.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/637ee595186c35d10464c08e23bf766f.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/fcc2a27e57cc68016e93170bf590da73.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/2614ddbaeee64387761b88b4dac9bd3c.png"></p>
<h1 id="图的广度优先遍历"><a href="#图的广度优先遍历" class="headerlink" title="图的广度优先遍历"></a>图的广度优先遍历</h1><p>注：代码有问题 暂未解决</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//邻接表结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> VertexType;<span class="comment">//顶点类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> EdgeType;<span class="comment">//权值类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//边/弧</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">EdgeNode</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> adjvex;<span class="comment">//邻接点域，保存邻接点下标</span></span><br><span class="line">	EdgeType weight;<span class="comment">//存储权值</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">EdgeNode</span>* <span class="title">next</span>;</span><span class="comment">//链域，指向下一个邻接点</span></span><br><span class="line">&#125;EdgeNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//顶点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VertexNode</span> &#123;</span></span><br><span class="line">	VertexType data;</span><br><span class="line">	EdgeNode* first_edge;</span><br><span class="line">&#125;VertexNode, AdjList[Max];</span><br><span class="line"></span><br><span class="line"><span class="comment">//用邻接表存储的图</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	AdjList adjList;</span><br><span class="line">	<span class="keyword">int</span> numVertexes, numEdges;<span class="comment">//顶点数量和边数量</span></span><br><span class="line">&#125;GraphAdjList, * GraphAdj;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//链式队列结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span> &#123;</span></span><br><span class="line">	VertexNode data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;LinkNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//队头队尾</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	LinkNode* front, * rear;</span><br><span class="line">&#125;LinkQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建邻接表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitGraph</span><span class="params">(GraphAdj&amp; G)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> m, n;</span><br><span class="line">	EdgeNode* e = <span class="literal">NULL</span>;</span><br><span class="line">	G-&gt;numVertexes = <span class="number">8</span>;</span><br><span class="line">	G-&gt;numEdges = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G-&gt;numVertexes; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		G-&gt;adjList[i].data = i + <span class="number">1</span>;</span><br><span class="line">		G-&gt;adjList[i].first_edge = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; G-&gt;numEdges; k++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;输入边(Vi,Vj)上的顶点序号：&quot;</span>);</span><br><span class="line">		scanf_s(<span class="string">&quot;%d%d&quot;</span>, &amp;m, &amp;n);</span><br><span class="line"></span><br><span class="line">		e = (EdgeNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EdgeNode));</span><br><span class="line">		e-&gt;adjvex = n;</span><br><span class="line">		e-&gt;next = G-&gt;adjList[m].first_edge;</span><br><span class="line">		G-&gt;adjList[m].first_edge = e;</span><br><span class="line"></span><br><span class="line">		e = (EdgeNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EdgeNode));</span><br><span class="line">		e-&gt;adjvex = m;</span><br><span class="line">		e-&gt;next = G-&gt;adjList[n].first_edge;</span><br><span class="line">		G-&gt;adjList[n].first_edge = e;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FirstNeighbor</span><span class="params">(GraphAdj G, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x &gt;= Max)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (G-&gt;adjList[x].first_edge != <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> G-&gt;adjList[x].first_edge-&gt;adjvex;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">NextNeighbor</span><span class="params">(GraphAdj G, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">	EdgeNode* temp = G-&gt;adjList[x].first_edge;</span><br><span class="line">	<span class="keyword">while</span> (temp != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (temp-&gt;adjvex == y)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			temp = temp-&gt;next;</span><br><span class="line">			<span class="keyword">if</span> (temp != <span class="literal">NULL</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">return</span> temp-&gt;adjvex;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化队列 带头结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(LinkQueue&amp; Q)</span> </span>&#123;</span><br><span class="line">	Q.front = Q.rear = (LinkNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">	Q.front-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(LinkQueue Q)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> Q.front == Q.rear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新元素入队</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EnQueue</span><span class="params">(LinkQueue&amp; Q, GraphAdj G, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">	LinkNode* new_point = (LinkNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">	new_point-&gt;data = G-&gt;adjList[v];</span><br><span class="line">	new_point-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	Q.rear-&gt;next = new_point;</span><br><span class="line">	Q.rear = new_point;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeQueue</span><span class="params">(LinkQueue&amp; Q, <span class="keyword">int</span>&amp; v)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Q.front == Q.rear)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;队列为空&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		LinkNode* new_point = Q.front-&gt;next;</span><br><span class="line">		v = new_point-&gt;data.data;</span><br><span class="line">		Q.front-&gt;next = new_point-&gt;next;</span><br><span class="line">		<span class="keyword">if</span> (Q.rear == new_point)</span><br><span class="line">		&#123;</span><br><span class="line">			Q.rear = Q.front;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">free</span>(new_point);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> visited[Max];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(GraphAdj G, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;访问到的数据为：%d\n&quot;</span>, G-&gt;adjList[num].data);</span><br><span class="line">	visited[num] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(GraphAdj G, <span class="keyword">int</span> v)</span> </span>&#123;<span class="comment">//从顶点出发，广度优先遍历图</span></span><br><span class="line">	LinkQueue Q;</span><br><span class="line">	InitQueue(Q);</span><br><span class="line">	visit(G, v);</span><br><span class="line">	EnQueue(Q, G, v);</span><br><span class="line">	<span class="keyword">while</span> (!isEmpty(Q))</span><br><span class="line">	&#123;</span><br><span class="line">		DeQueue(Q, v);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> w = FirstNeighbor(G, v); w &gt;= <span class="number">0</span>; w = NextNeighbor(G, v, w))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (!visited[w])</span><br><span class="line">			&#123;</span><br><span class="line">				visit(G, w);</span><br><span class="line">				EnQueue(Q, G, w);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS_Traverse</span><span class="params">(GraphAdj G)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Max; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		visited[i] = <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G-&gt;numVertexes; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!visited[i])</span><br><span class="line">		&#123;</span><br><span class="line">			BFS(G, i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	GraphAdj G = (GraphAdj)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(GraphAdj));</span><br><span class="line">	InitGraph(G);</span><br><span class="line">	BFS_Traverse(G);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.rmb.bdstatic.com/bjh/8e535d16ffafb70775e3696aff88e803.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/2de69b166dd1ee6d9febe7d990053abe.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/4b2c25ca420103c6452e959883474fad.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/60c00d6e6a8f08343165d606d687b3fd.png"></p>
<p>可供参考的代码：</p>
<ol>
<li>邻接表</li>
<li>邻接矩阵</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VertexMax 20 <span class="comment">//最大顶点个数 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Maxsize 100 <span class="comment">//队列最大元素个数100 </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> VertexType;<span class="comment">//顶点的数据类型（char）</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> dataType; <span class="comment">//队列元素类型 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*邻接表结构体*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span>//边表 </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> adjvex;<span class="comment">//存储的是该顶点在顶点数组即AdjList[]中的位置 </span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;ArcNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VNode</span> //顶单个点 </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	VertexType vertex;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> *<span class="title">firstarc</span>;</span></span><br><span class="line">&#125;VNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> //顶点表 </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	VNode AdjList[VertexMax];<span class="comment">//由顶点构成的结构体数组 </span></span><br><span class="line">	<span class="keyword">int</span> vexnum,arcnum; <span class="comment">//顶点数和边数 </span></span><br><span class="line">&#125;ALGraph;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*循环队列结构体*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	dataType *base;</span><br><span class="line">	<span class="keyword">int</span> front;</span><br><span class="line">	<span class="keyword">int</span> rear;</span><br><span class="line">&#125;CyQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*无向图UDG基本操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateVex</span><span class="params">(ALGraph *G,VertexType v)</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G-&gt;vexnum;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(v==G-&gt;AdjList[i].vertex)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;No Such Vertex!\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.无向图 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateUDG</span><span class="params">(ALGraph *G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="comment">//1.输入顶点数和边数</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入顶点个数和边数：\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;顶点数 n=&quot;</span>); </span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;G-&gt;vexnum);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;边  数 e=&quot;</span>); </span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;G-&gt;arcnum);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); </span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="comment">//2.顶点表数据域填值初始化顶点表指针域</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入顶点元素(无需空格隔开)：&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G-&gt;vexnum;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>,&amp;G-&gt;AdjList[i].vertex);</span><br><span class="line">		G-&gt;AdjList[i].firstarc=<span class="literal">NULL</span>;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//3.输入边信息构造邻接表</span></span><br><span class="line">	<span class="keyword">int</span> n,m;</span><br><span class="line">	VertexType v1,v2;</span><br><span class="line">	ArcNode *p1,*p2; </span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入边的信息：\n\n&quot;</span>); </span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G-&gt;arcnum;i++)</span><br><span class="line">	&#123;   <span class="comment">//输入边信息，并确定v1和v2在G中的位置，即顶点在AdjList[]数组中的位置（下标） </span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;输入第%d条边信息：&quot;</span>,i+<span class="number">1</span>); </span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot; %c%c&quot;</span>,&amp;v1,&amp;v2);</span><br><span class="line">		n=LocateVex(G,v1);</span><br><span class="line">		m=LocateVex(G,v2);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(n==<span class="number">-1</span>||m==<span class="number">-1</span>)</span><br><span class="line">		 &#123;</span><br><span class="line">		 	<span class="built_in">printf</span>(<span class="string">&quot;NO This Vertex!\n&quot;</span>);</span><br><span class="line">		 	<span class="keyword">return</span>;</span><br><span class="line">		  &#125; </span><br><span class="line">		</span><br><span class="line">		p1=(ArcNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode));</span><br><span class="line">		p1-&gt;adjvex=m;<span class="comment">//填上坐标 </span></span><br><span class="line">		p1-&gt;next=G-&gt;AdjList[n].firstarc;<span class="comment">//改链（头插法） </span></span><br><span class="line">		G-&gt;AdjList[n].firstarc=p1;</span><br><span class="line">		</span><br><span class="line">		p2=(ArcNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode));<span class="comment">//无向图的对称 </span></span><br><span class="line">		p2-&gt;adjvex=n;</span><br><span class="line">		p2-&gt;next=G-&gt;AdjList[m].firstarc;</span><br><span class="line">		G-&gt;AdjList[m].firstarc=p2;</span><br><span class="line">		</span><br><span class="line">	&#125;<span class="comment">//for </span></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(ALGraph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	ArcNode *p;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n-------------------------------&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n图的邻接表表示：\n&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G.vexnum;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n   AdjList[%d]%4c&quot;</span>,i,G.AdjList[i].vertex);</span><br><span class="line">		p=G.AdjList[i].firstarc;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;--&gt;%d&quot;</span>,p-&gt;adjvex);</span><br><span class="line">			p=p-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">	 &#125; </span><br><span class="line">	 <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*循环队列基本操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(CyQueue *q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	q-&gt;base=(dataType *)<span class="built_in">malloc</span>(Maxsize*<span class="keyword">sizeof</span>(dataType));</span><br><span class="line">	<span class="keyword">if</span>(!q-&gt;base)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Space allocation failed!\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	q-&gt;front=q-&gt;rear=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EnQueue</span><span class="params">(CyQueue *q,dataType value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>((q-&gt;rear+<span class="number">1</span>)%Maxsize==q-&gt;front)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Cyclic Queue is Full!\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	q-&gt;base[q-&gt;rear]=value;</span><br><span class="line">	q-&gt;rear=(q-&gt;rear+<span class="number">1</span>)%Maxsize;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeQueue</span><span class="params">(CyQueue *q,dataType *value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(q-&gt;front==q-&gt;rear)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Cyclic Queue is Empty!\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	*value=q-&gt;base[q-&gt;front];</span><br><span class="line">	q-&gt;front=(q-&gt;front+<span class="number">1</span>)%Maxsize;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueEmpty</span><span class="params">(CyQueue *q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (q-&gt;front==q-&gt;rear)<span class="comment">//队列为空返回1，不为空返回0 </span></span><br><span class="line">	&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*广度优先遍历*/</span></span><br><span class="line"><span class="keyword">int</span> visited[VertexMax]; <span class="comment">//定义数组为全局变量 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(ALGraph *G,<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> j;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> *<span class="title">p</span>;</span></span><br><span class="line">	CyQueue q;</span><br><span class="line">	create(&amp;q);</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//1.设置起始点</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,G-&gt;AdjList[i].vertex);<span class="comment">//1.输出起始结点</span></span><br><span class="line">	visited[i]=<span class="number">1</span>;<span class="comment">//2.将已访问的结点标志成1</span></span><br><span class="line">	EnQueue(&amp;q,i);<span class="comment">//3.将第一个结点入队 </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.由起始点开始，对后续结点进行操作</span></span><br><span class="line">	<span class="keyword">while</span>(!QueueEmpty(&amp;q))</span><br><span class="line">	&#123;</span><br><span class="line">		p=G-&gt;AdjList[i].firstarc;</span><br><span class="line">		</span><br><span class="line">		DeQueue(&amp;q,&amp;i);</span><br><span class="line">		<span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span>(visited[p-&gt;adjvex]==<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,G-&gt;AdjList[p-&gt;adjvex].vertex);</span><br><span class="line">	            visited[p-&gt;adjvex]=<span class="number">1</span>;</span><br><span class="line">	            EnQueue(&amp;q,p-&gt;adjvex);</span><br><span class="line">			&#125;</span><br><span class="line">			p=p-&gt;next;<span class="comment">//查找完之后，将p向后推一位 </span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125; 	</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFSTraverse</span><span class="params">(ALGraph *G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//数组初始化为全0 </span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G-&gt;vexnum;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		visited[i]=<span class="number">0</span>;</span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G-&gt;vexnum;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(visited[i]==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			BFS(G,i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ALGraph G; </span><br><span class="line">	CreateUDG(&amp;G);</span><br><span class="line">	print(G); </span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n\n广度优先遍历：&quot;</span>); </span><br><span class="line">	BFSTraverse(&amp;G); </span><br><span class="line">	 </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;	</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VertexMax 100 <span class="comment">//最大顶点数为100</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Maxsize 100 <span class="comment">//队列最大元素个数100 </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> VertexType; <span class="comment">//每个顶点数据类型为字符型 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> dataType; <span class="comment">//队列元素类型 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*图结构体*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	VertexType Vertex[VertexMax];<span class="comment">//存放顶点元素的一维数组 </span></span><br><span class="line">	<span class="keyword">int</span> AdjMatrix[VertexMax][VertexMax];<span class="comment">//邻接矩阵二维数组 </span></span><br><span class="line">	<span class="keyword">int</span> vexnum,arcnum;<span class="comment">//图的顶点数和边数  </span></span><br><span class="line">&#125;MGraph;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*队列结构体*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	dataType *base;</span><br><span class="line">	<span class="keyword">int</span> front;</span><br><span class="line">	<span class="keyword">int</span> rear;</span><br><span class="line">&#125;CyQueue;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*无向图UDG的基本操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateVex</span><span class="params">(MGraph *G,VertexType v)</span><span class="comment">//查找元素v在一维数组 Vertex[] 中的下标，并返回下标 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G-&gt;vexnum;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(v==G-&gt;Vertex[i])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> i; </span><br><span class="line">		&#125; </span><br><span class="line">	 &#125; </span><br><span class="line">	 </span><br><span class="line">	 <span class="built_in">printf</span>(<span class="string">&quot;No Such Vertex!\n&quot;</span>);</span><br><span class="line">	 <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateUDG</span><span class="params">(MGraph *G)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入顶点个数和边数：\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;顶点数 n=&quot;</span>); </span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;G-&gt;vexnum);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;边  数 e=&quot;</span>); </span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;G-&gt;arcnum);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); </span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入顶点元素(无需空格隔开)：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,G-&gt;Vertex);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G-&gt;vexnum;i++) </span><br><span class="line">	 <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;G-&gt;vexnum;j++)</span><br><span class="line">	    &#123;</span><br><span class="line">	    	G-&gt;AdjMatrix[i][j]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	 <span class="keyword">int</span> n,m;</span><br><span class="line">	 VertexType v1,v2;</span><br><span class="line">	 </span><br><span class="line">	 <span class="built_in">printf</span>(<span class="string">&quot;请输入边的信息：\n&quot;</span>);</span><br><span class="line">	 <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G-&gt;arcnum;i++)</span><br><span class="line">	 &#123;</span><br><span class="line">	 	<span class="built_in">printf</span>(<span class="string">&quot;输入第%d条边信息：&quot;</span>,i+<span class="number">1</span>);</span><br><span class="line">	 	<span class="built_in">scanf</span>(<span class="string">&quot; %c%c&quot;</span>,&amp;v1,&amp;v2);</span><br><span class="line">	 	n=LocateVex(G,v1); </span><br><span class="line">	 	m=LocateVex(G,v2); </span><br><span class="line">	 	</span><br><span class="line">	 	<span class="keyword">if</span>(n==<span class="number">-1</span>||m==<span class="number">-1</span>)</span><br><span class="line">		 &#123;</span><br><span class="line">		 	<span class="built_in">printf</span>(<span class="string">&quot;NO This Vertex!\n&quot;</span>);</span><br><span class="line">		 	<span class="keyword">return</span>;</span><br><span class="line">		  &#125; </span><br><span class="line">	</span><br><span class="line">	   G-&gt;AdjMatrix[n][m]=<span class="number">1</span>;</span><br><span class="line">	   G-&gt;AdjMatrix[m][n]=<span class="number">1</span>;</span><br><span class="line">	 &#125; </span><br><span class="line">	 </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(MGraph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n-------------------------------&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n 邻接矩阵：\n\n&quot;</span>); 	</span><br><span class="line"></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\t &quot;</span>);</span><br><span class="line">	    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G.vexnum;i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;  %c&quot;</span>,G.Vertex[i]);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		 </span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G.vexnum;i++)</span><br><span class="line">	   &#123;</span><br><span class="line">	   	  <span class="built_in">printf</span>(<span class="string">&quot;\t%c&quot;</span>,G.Vertex[i]);</span><br><span class="line">	   	</span><br><span class="line">		  <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;G.vexnum;j++)</span><br><span class="line">	    &#123;</span><br><span class="line">	 	    <span class="built_in">printf</span>(<span class="string">&quot;  %d&quot;</span>,G.AdjMatrix[i][j]);</span><br><span class="line">	    &#125;</span><br><span class="line">	        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*循环队列基本操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(CyQueue *q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	q-&gt;base=(dataType *)<span class="built_in">malloc</span>(Maxsize*<span class="keyword">sizeof</span>(dataType));</span><br><span class="line">	<span class="keyword">if</span>(!q-&gt;base)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Space allocation failed!\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	q-&gt;front=q-&gt;rear=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EnQueue</span><span class="params">(CyQueue *q,dataType value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>((q-&gt;rear+<span class="number">1</span>)%Maxsize==q-&gt;front)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Cyclic Queue is Full!\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	q-&gt;base[q-&gt;rear]=value;</span><br><span class="line">	q-&gt;rear=(q-&gt;rear+<span class="number">1</span>)%Maxsize;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeQueue</span><span class="params">(CyQueue *q,dataType *value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(q-&gt;front==q-&gt;rear)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Cyclic Queue is Empty!\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	*value=q-&gt;base[q-&gt;front];</span><br><span class="line">	q-&gt;front=(q-&gt;front+<span class="number">1</span>)%Maxsize;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueEmpty</span><span class="params">(CyQueue *q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (q-&gt;front==q-&gt;rear)<span class="comment">//队列为空返回1，不为空返回0 </span></span><br><span class="line">	&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*广度优先遍历BFS*/</span> </span><br><span class="line"><span class="keyword">int</span> visited[VertexMax];<span class="comment">//定义&quot;标志&quot;数组为全局变量 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(MGraph *G,<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> j;</span><br><span class="line">	CyQueue q;</span><br><span class="line">	create(&amp;q);</span><br><span class="line">   <span class="comment">//1.设置起始点 </span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,G-&gt;Vertex[i]);<span class="comment">//1.输出当前结点 </span></span><br><span class="line">	visited[i]=<span class="number">1</span>;<span class="comment">//2.将已访问的结点标志成1</span></span><br><span class="line">	EnQueue(&amp;q,i);<span class="comment">//3.将第一个结点入队 </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.由起始点开始，对后续结点进行操作</span></span><br><span class="line">	<span class="keyword">while</span>(!QueueEmpty(&amp;q))</span><br><span class="line">	&#123;</span><br><span class="line">		</span><br><span class="line">		DeQueue(&amp;q,&amp;i);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;G-&gt;vexnum;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(G-&gt;AdjMatrix[i][j]==<span class="number">1</span>&amp;&amp;visited[j]==<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,G-&gt;Vertex[j]);<span class="comment">//输出符合条件的顶点 </span></span><br><span class="line">	            visited[j]=<span class="number">1</span>;<span class="comment">//设置成已访问状态1 </span></span><br><span class="line">	            EnQueue(&amp;q,j);<span class="comment">//入队 </span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; 	</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFSTraverse</span><span class="params">(MGraph *G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//数组初始化为全0 </span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G-&gt;vexnum;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		visited[i]=<span class="number">0</span>;</span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G-&gt;vexnum;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(visited[i]==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			BFS(G,i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	MGraph G; </span><br><span class="line">	CreateUDG(&amp;G);</span><br><span class="line">	print(G); </span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n\n广度优先遍历：&quot;</span>); </span><br><span class="line">	BFSTraverse(&amp;G); </span><br><span class="line">	 </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;	</span><br></pre></td></tr></table></figure>
<p>参考运行结果：</p>
<p><img src="https://img-blog.csdnimg.cn/2020060612140599.png"></p>
<p><img src="https://img-blog.csdnimg.cn/20200606121354283.png"></p>
<h1 id="图的深度优先遍历"><a href="#图的深度优先遍历" class="headerlink" title="图的深度优先遍历"></a>图的深度优先遍历</h1><p><img src="https://pic.rmb.bdstatic.com/bjh/001c416bb34925252d2e02d837e9fb45.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/38e908c8ac6aa05d8706a1d925281c20.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/a9e7eeccca663d7b986e25cbff4e617d.png"></p>
<h1 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h1><h2 id="Prim算法（普里姆）"><a href="#Prim算法（普里姆）" class="headerlink" title="Prim算法（普里姆）"></a>Prim算法（普里姆）</h2><p><img src="https://pic.rmb.bdstatic.com/bjh/6c4077ec29be734641caf1814f73c1a0.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/81b1e57560a599b462386b196c63d3bd.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/46129cb78bd0a1833644bad4c50bf112.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/ded129d8a45647a7598b27ecc225eae8.png"></p>
<h2 id="Kruskal算法（克鲁斯卡尔）"><a href="#Kruskal算法（克鲁斯卡尔）" class="headerlink" title="Kruskal算法（克鲁斯卡尔）"></a>Kruskal算法（克鲁斯卡尔）</h2><p><img src="https://pic.rmb.bdstatic.com/bjh/2d1b6ffa57bd0e757f0fba12770e4502.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/4376cf80c90092899446e60890e2e71f.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/87900fdb7b1ee07c465677a0d70980d3.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/748af022aca32c8536b86c47a0fd9f61.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/392d05f1bc2cab61e4446a707150a4b4.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/34f94f3eba95bffd26c91531ff6cabe6.png"></p>
<h2 id="Prim算法和Kruskal比较"><a href="#Prim算法和Kruskal比较" class="headerlink" title="Prim算法和Kruskal比较"></a>Prim算法和Kruskal比较</h2><p><img src="https://pic.rmb.bdstatic.com/bjh/906f372328ee144b64460324f1448cbb.png"></p>
<h1 id="最短路径问题"><a href="#最短路径问题" class="headerlink" title="最短路径问题"></a>最短路径问题</h1><h2 id="BFS算法"><a href="#BFS算法" class="headerlink" title="BFS算法"></a>BFS算法</h2><p><img src="https://pic.rmb.bdstatic.com/bjh/9862a2dace2ac196ba01dd78170f5d39.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/d92b2b0492630d1b1cb1a1d9cab2a50f.png"></p>
<h2 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h2><p><img src="https://pic.rmb.bdstatic.com/bjh/fd09b443e51e8205e21eae59c0d3f9a3.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/43288a3b589c76ce140012cf8ac4dadc.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/9223cbe544387e8d321fdb0e38f7ae1b.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/62040226cacc9d025bea72326082a89c.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/49a4ff6cc17f5ffe1cd26a56a1da3961.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/2326da2c6dea8c6031a281e922f17efd.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/22b3f01dacd6c08da528718f8a5586dd.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/ec68bff45d1e71738d84c62f97f70818.png"></p>
<h2 id="Floyd算法"><a href="#Floyd算法" class="headerlink" title="Floyd算法"></a>Floyd算法</h2><p><img src="https://pic.rmb.bdstatic.com/bjh/fd207ca7ccca8f0277e081dce01aea98.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/bd5674bae1aee914ecfee1eb558d7e62.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/4497aecb57d4cff5ac0264668913dd70.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/c23b7e1e81c44f2e679e3b676edcf48f.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/7f7c78cbd5f1a7fa07bfdb2d556509ca.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/86de1d3dad4873b4b6b4b65bf3b7f041.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/e20858101465841e25a0d19c061cbfc8.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/8abe0a0ce08cf3372629900c8ee21aa2.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/c451eb054402c3247365cff515242243.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/b0a00e8ce8173c6a65b02f4b9014517a.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/0d31c16908b8be4f9131946dfce10193.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/6fa570875606fcf2731505021635e075.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/a8b34c219efcd05d44d608dd15796c18.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/d614afc97040d513354b18579ca0fb69.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/957b10aaca30614e7a96db9e05d97ee1.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/1b6add0dffb4a3eb0b84e4530573ae7e.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/c019d4047a1d9903a8fd98ce8d93f711.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/4bc2dffa9c4a38f1f44c22c2c13a8b2b.png"></p>
<h1 id="有向无环图-描述表达式"><a href="#有向无环图-描述表达式" class="headerlink" title="有向无环图(描述表达式)"></a>有向无环图(描述表达式)</h1><p><img src="https://pic.rmb.bdstatic.com/bjh/bc8f1707a5f96788fb48295bb2dd63a3.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/e65aee68b0d337133b1ca912a128dca5.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/59748b91b9a029b66756a6cc2a54e75c.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/16367cad337b11dd1168f9635d0a0845.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/5d07b081907321d9f5c506586c6dcb2d.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/110a0254cc0aaec2a2b32d40d77c78cd.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/5fea5986d389f059c865ce9f54dc02e2.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/a0e1bc582c3239ad0e95265ad4c2c150.png"></p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/25fd743b47c0c9bf913e05ab6e99931e.png"></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>考研</tag>
      </tags>
  </entry>
</search>
