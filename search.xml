<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>selenium自动化操作问卷星</title>
    <url>/posts/f027b801/</url>
    <content><![CDATA[<font color=#999AAA >
问卷星的自动化操作
</font>


<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><font color=#999AAA >身边的很多同学需要填写问卷星，有很多需要刷任务的操作，等等类似场景，可以使用selenium实现</font></p>
<p><font color=#999AAA >以下是本篇文章正文内容，下面案例可供参考</p>
<h1 id="一、selenium是什么？"><a href="#一、selenium是什么？" class="headerlink" title="一、selenium是什么？"></a>一、selenium是什么？</h1><p><em>Selenium 是一个用于Web应用程序测试的工具。Selenium测试直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括IE（7, 8, 9, 10, 11），Mozilla Firefox，Safari，Google Chrome，Opera等。这个工具的主要功能包括：测试与浏览器的兼容性——测试你的应用程序看是否能够很好得工作在不同浏览器和操作系统之上。测试系统功能——创建回归测试检验软件功能和用户需求。支持自动录制动作和自动生成 .Net、Java、Perl等不同语言的测试脚本。</em></p>
<a id="more"></a>

<h1 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h1><p><font color=#999AAA >参照了其他同学的代码实现了自动化的操作。直接上代码吧！</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">    <span class="comment"># 创建一个浏览器对象</span></span><br><span class="line">    browser = webdriver.Edge(executable_path=<span class="string">&#x27;msedgedriver.exe&#x27;</span>)</span><br><span class="line">    <span class="comment"># 请求该地址</span></span><br><span class="line">    browser.get(<span class="string">&quot;https://www.wjx.cn/jq/80378706.aspx&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 问题1的点击</span></span><br><span class="line">    randomId = random.randint(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># 随机数 随机点击按钮</span></span><br><span class="line">    js = <span class="string">&quot;document.getElementById(\&quot;q1_&quot;</span> + <span class="built_in">str</span>(randomId) + <span class="string">&quot;\&quot;).click()&quot;</span></span><br><span class="line">    <span class="comment"># 使用js实现点击的效果</span></span><br><span class="line">    browser.execute_script(js)</span><br><span class="line">    <span class="comment"># 延时 太快会被检测是脚本</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 问题2</span></span><br><span class="line">    randomId = random.randint(<span class="number">1</span>, <span class="number">4</span>)  <span class="comment"># 随机数，四个多选框 随机点击</span></span><br><span class="line">    js = <span class="string">&quot;document.getElementById(\&quot;q2_&quot;</span> + <span class="built_in">str</span>(randomId) + <span class="string">&quot;\&quot;).click()&quot;</span></span><br><span class="line">    <span class="comment"># 拼接字符串的方式 js找到对应id 点击按钮</span></span><br><span class="line">    browser.execute_script(js)</span><br><span class="line">    <span class="comment"># 延时</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 问题3</span></span><br><span class="line">    block = [<span class="string">&quot;商学院&quot;</span>, <span class="string">&quot;计科院&quot;</span>, <span class="string">&quot;电气院&quot;</span>]  <span class="comment"># 随机输入内容</span></span><br><span class="line">    randomId = random.randint(<span class="number">0</span>, <span class="number">2</span>)  <span class="comment"># 随机数</span></span><br><span class="line">    <span class="comment"># 输入内容</span></span><br><span class="line">    browser.find_element_by_id(<span class="string">&quot;q3&quot;</span>).send_keys(block[randomId])</span><br><span class="line">    <span class="comment"># 延时</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 问题4</span></span><br><span class="line">    block = [<span class="string">&quot;会计&quot;</span>, <span class="string">&quot;网工&quot;</span>, <span class="string">&quot;电气&quot;</span>]  <span class="comment"># 随机输入内容</span></span><br><span class="line">    browser.find_element_by_id(<span class="string">&quot;q4&quot;</span>).send_keys(block[randomId])</span><br><span class="line">    <span class="comment"># 延时</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 问题5</span></span><br><span class="line">    randomId = random.randint(<span class="number">1</span>, <span class="number">5</span>)  <span class="comment"># 随机数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, randomId + <span class="number">1</span>):  <span class="comment"># 循环 实现多选效果</span></span><br><span class="line">        randomId1 = random.randint(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="comment"># 两种js实现方式</span></span><br><span class="line">        js = <span class="string">&quot;document.getElementById(\&quot;q5_&quot;</span> + <span class="built_in">str</span>(randomId1) + <span class="string">&quot;\&quot;).checked = true&quot;</span></span><br><span class="line">        browser.execute_script(js)</span><br><span class="line">        js = <span class="string">&quot;document.getElementById(\&quot;q5_&quot;</span> + <span class="built_in">str</span>(randomId1) + <span class="string">&quot;\&quot;).click()&quot;</span></span><br><span class="line">        browser.execute_script(js)</span><br><span class="line">        <span class="comment"># 延时</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 问题6</span></span><br><span class="line">    randomId = random.randint(<span class="number">1</span>, <span class="number">3</span>)  <span class="comment"># 参照问题5</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, randomId + <span class="number">1</span>):</span><br><span class="line">        randomId1 = random.randint(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">        js = <span class="string">&quot;document.getElementById(\&quot;q6_&quot;</span> + <span class="built_in">str</span>(randomId1) + <span class="string">&quot;\&quot;).checked = true&quot;</span></span><br><span class="line">        browser.execute_script(js)</span><br><span class="line">        js = <span class="string">&quot;document.getElementById(\&quot;q6_&quot;</span> + <span class="built_in">str</span>(randomId1) + <span class="string">&quot;\&quot;).click()&quot;</span></span><br><span class="line">        browser.execute_script(js)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 问题7</span></span><br><span class="line">    randomId = random.randint(<span class="number">1</span>, <span class="number">3</span>)  <span class="comment"># 参照问题5</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, randomId + <span class="number">1</span>):</span><br><span class="line">        randomId1 = random.randint(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">        js = <span class="string">&quot;document.getElementById(\&quot;q7_&quot;</span> + <span class="built_in">str</span>(randomId1) + <span class="string">&quot;\&quot;).checked = true&quot;</span></span><br><span class="line">        browser.execute_script(js)</span><br><span class="line">        js = <span class="string">&quot;document.getElementById(\&quot;q7_&quot;</span> + <span class="built_in">str</span>(randomId1) + <span class="string">&quot;\&quot;).click()&quot;</span></span><br><span class="line">        browser.execute_script(js)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 问题8</span></span><br><span class="line">    randomId = random.randint(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># 单选</span></span><br><span class="line">    js = <span class="string">&quot;document.getElementById(\&quot;q8_&quot;</span> + <span class="built_in">str</span>(randomId) + <span class="string">&quot;\&quot;).click()&quot;</span></span><br><span class="line">    browser.execute_script(js)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 问题9</span></span><br><span class="line">    randomId = random.randint(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># 单选</span></span><br><span class="line">    js = <span class="string">&quot;document.getElementById(\&quot;q9_&quot;</span> + <span class="built_in">str</span>(randomId) + <span class="string">&quot;\&quot;).click()&quot;</span></span><br><span class="line">    browser.execute_script(js)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 问题10</span></span><br><span class="line">    randomId = random.randint(<span class="number">1</span>, <span class="number">3</span>)  <span class="comment"># 单选</span></span><br><span class="line">    js = <span class="string">&quot;document.getElementById(\&quot;q10_&quot;</span> + <span class="built_in">str</span>(randomId) + <span class="string">&quot;\&quot;).click()&quot;</span></span><br><span class="line">    browser.execute_script(js)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 问题12</span></span><br><span class="line">    <span class="keyword">if</span> randomId == <span class="number">2</span>:</span><br><span class="line">        randomId2 = random.randint(<span class="number">1</span>, <span class="number">6</span>)  <span class="comment"># 多选</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, randomId2 + <span class="number">1</span>):  <span class="comment"># 循环实现</span></span><br><span class="line">            randomId1 = random.randint(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">            <span class="comment"># 两种js点击方法</span></span><br><span class="line">            js = <span class="string">&quot;document.getElementById(\&quot;q12_&quot;</span> + <span class="built_in">str</span>(randomId1) + <span class="string">&quot;\&quot;).checked = true&quot;</span></span><br><span class="line">            browser.execute_script(js)</span><br><span class="line">            js = <span class="string">&quot;document.getElementById(\&quot;q12_&quot;</span> + <span class="built_in">str</span>(randomId1) + <span class="string">&quot;\&quot;).click()&quot;</span></span><br><span class="line">            browser.execute_script(js)</span><br><span class="line">            <span class="comment"># 延时</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 问题11</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        randomId2 = random.randint(<span class="number">1</span>, <span class="number">7</span>)  <span class="comment"># 参照上一个</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, randomId2 + <span class="number">1</span>):</span><br><span class="line">            randomId1 = random.randint(<span class="number">1</span>, <span class="number">7</span>)</span><br><span class="line">            js = <span class="string">&quot;document.getElementById(\&quot;q11_&quot;</span> + <span class="built_in">str</span>(randomId1) + <span class="string">&quot;\&quot;).checked = true&quot;</span></span><br><span class="line">            browser.execute_script(js)</span><br><span class="line">            js = <span class="string">&quot;document.getElementById(\&quot;q11_&quot;</span> + <span class="built_in">str</span>(randomId1) + <span class="string">&quot;\&quot;).click()&quot;</span></span><br><span class="line">            browser.execute_script(js)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 问题13</span></span><br><span class="line">    randomId = random.randint(<span class="number">1</span>, <span class="number">3</span>)  <span class="comment"># 单选</span></span><br><span class="line">    js = <span class="string">&quot;document.getElementById(\&quot;q13_&quot;</span> + <span class="built_in">str</span>(randomId) + <span class="string">&quot;\&quot;).click()&quot;</span></span><br><span class="line">    browser.execute_script(js)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 问题14</span></span><br><span class="line">    block = [<span class="string">&quot;线上教学太生硬&quot;</span>, <span class="string">&quot;线上教学不太好&quot;</span>, <span class="string">&quot;没有不足之处，挺好的&quot;</span>]  <span class="comment"># 随机输入</span></span><br><span class="line">    randomId = random.randint(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">    browser.find_element_by_id(<span class="string">&quot;q14&quot;</span>).send_keys(block[randomId])</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 问题15</span></span><br><span class="line">    block = [<span class="string">&quot;希望作业能多一点&quot;</span>, <span class="string">&quot;如果可以，希望老师能讲课讲清楚一些&quot;</span>, <span class="string">&quot;建议取消线上考试&quot;</span>]  <span class="comment"># 随机输入</span></span><br><span class="line">    randomId = random.randint(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">    browser.find_element_by_id(<span class="string">&quot;q15&quot;</span>).send_keys(block[randomId])</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># submit</span></span><br><span class="line">    js = <span class="string">&quot;document.getElementById(\&quot;submit_button\&quot;).click()&quot;</span>  <span class="comment"># 点击提交按钮</span></span><br><span class="line">    browser.execute_script(js)</span><br><span class="line"></span><br><span class="line">    browser.quit()  <span class="comment"># 运行完毕自动关闭浏览器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        run()</span><br><span class="line">        time.sleep(<span class="number">10</span>)  <span class="comment"># 避免提交过快 会出现验证</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是今天要讲的内容，本文仅仅简单介绍了selenium的使用，selenium还可以帮我们做很多事情，比如模拟登录，爬取某宝的宝贝数据等等。以后我们再见！<br><strong>注：案例仅供学习</strong></p>
]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>分析模板资源网站并使用python进行下载</title>
    <url>/posts/378704c3/</url>
    <content><![CDATA[<font color=#999AAA >
侵权删除。
</font>


<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>今天准备在网上找一个web模板，用来做Echarts的数据可视化。寻找模板的过程中像往常一样，遇到了很多的收费网站，一般都是月费年费类型的。然后我就遇到了下面这个网站：</strong><br><img src="https://img-blog.csdnimg.cn/20210104223121512.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<a id="more"></a>

<p>在我下载的过程中简单分析了一下，是否可以抓包的方式，获取对应的下载链接，下面<strong>进入我们的正文分析环节。</strong></p>
<p><font color=#999AAA >以下是本篇文章正文内容</p>
<h1 id="一、页面分析"><a href="#一、页面分析" class="headerlink" title="一、页面分析"></a>一、页面分析</h1><p><img src="https://img-blog.csdnimg.cn/20210104223458871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>发现下载模板的a标签中没有存在相应的href属性，一般下载链接都不会放在这，应该是通过js进行的控制。于是我看了一下下载好模板对应的url链接，对其进行分析后发现，<strong>几个url大致相同，只有两个参数发生了变化，就是对应的压缩文件名，和对应的sid。</strong><br><img src="https://img-blog.csdnimg.cn/20210104223908796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>我们可以发现 第一个压缩包名字就是在线预览url中，index.html之前的参数，所以我们直接取页面中href属性值就可以，sid页面上则贴心的给我们显示出来了，就是素材编号，猜测sid的s就是素材的缩写，hhh</strong><br>再看看我们点击下载按钮后的抓包工具里，出现了一个异步请求，又是cookie又是token的校验。<br><img src="https://img-blog.csdnimg.cn/20210104224225721.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>最后返回了一个json数据，里面果然存放的就是下载链接等信息。<br><img src="https://img-blog.csdnimg.cn/20210104224438444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>到这里我们的分析基本已经结束了，拿到了下载链接后，打开浏览器的隐私窗口对其进行访问，果然不用登陆就直接下载了对应的模板压缩包，接下来进行我们的<strong>代码编写</strong>。</p>
<h1 id="二、编写代码"><a href="#二、编写代码" class="headerlink" title="二、编写代码"></a>二、编写代码</h1><p>代码很简短，这次<strong>主要是锻炼我们的网页分析和抓包思路。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="comment"># ip代理池</span></span><br><span class="line">proxy_pool = [&#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://175.42.122.247:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://115.53.37.35:9999&#x27;</span>&#125;,</span><br><span class="line">              &#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://115.221.242.62:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://175.42.129.10:9999&#x27;</span>&#125;]</span><br><span class="line"><span class="comment"># 机型伪装头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: UserAgent().random</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 下载地址的基础模板</span></span><br><span class="line">base_url = <span class="string">&#x27;http://down.kangjingept.com/cssthemes6/&#123;&#125;.zip?sid=&#123;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 封装函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_zip</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="comment"># 请求url中就包含了我们的sid 懒得去xpath解析了 直接分割字符串吧</span></span><br><span class="line">    sid = url.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>].split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 请求网页地址 再用etree解析对象</span></span><br><span class="line">    response = requests.get(url=url, headers=headers, proxies=random.choice(proxy_pool)).text</span><br><span class="line">    data = etree.HTML(response)</span><br><span class="line">    <span class="comment"># 压缩包的名字 取a标签中的href属性值</span></span><br><span class="line">    zip_name = data.xpath(<span class="string">&#x27;//div[@class=&quot;btn_box&quot;]/a[1]/@href&#x27;</span>)[<span class="number">0</span>].split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">2</span>]</span><br><span class="line">    <span class="comment"># 又找了一个中文的文件名 方便浏览</span></span><br><span class="line">    file_name = data.xpath(<span class="string">&#x27;/html/body/div[8]/h1/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 拼接url</span></span><br><span class="line">    zip_url = base_url.<span class="built_in">format</span>(zip_name, sid)</span><br><span class="line">    <span class="comment"># 获取压缩包的内容</span></span><br><span class="line">    zip_content = requests.get(url=zip_url, headers=headers).content</span><br><span class="line">    <span class="comment"># 二进制格式写入</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./&#123;&#125;.zip&#x27;</span>.<span class="built_in">format</span>(file_name), <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> z:</span><br><span class="line">        z.write(zip_content)</span><br><span class="line">        print(<span class="string">&#x27;文件&#123;&#125;.zip 下载完毕！！！&#x27;</span>.<span class="built_in">format</span>(file_name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 键盘粘贴对应的链接</span></span><br><span class="line">input_url = <span class="built_in">input</span>(<span class="string">&#x27;请输入对应的链接：&#x27;</span>)</span><br><span class="line">get_zip(input_url)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="结果演示"><a href="#结果演示" class="headerlink" title="结果演示"></a>结果演示</h1><p><img src="https://img-blog.csdnimg.cn/20210104225555275.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210104225615458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>微博爬取相册的所有图片</title>
    <url>/posts/2a5b7162/</url>
    <content><![CDATA[<font color=#999AAA >
微博相册的批量爬取
</font>

<p><font color=#999AAA >微博有相册功能，那么我们如何批量下载相册中的所有照片呢？</font></p>
<p><font color=#999AAA >以下是本篇文章正文内容，下面案例可供参考</p>
<h1 id="一、分析实现思路"><a href="#一、分析实现思路" class="headerlink" title="一、分析实现思路"></a>一、分析实现思路</h1><p><font color=#999AAA >因为微博相册也是前后端分离，所以我们先去抓包对应的json数据<br><img src="https://img-blog.csdnimg.cn/20210103180658279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<a id="more"></a>

<p>这里以李荣浩的相册为例，一共有25页：<br><img src="https://img-blog.csdnimg.cn/20210103180747572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>分析得出实际的链接应该为：’<a href="https://wx4.sinaimg.cn/large/&#39;">https://wx4.sinaimg.cn/large/&#39;</a> + pic_name<br><strong>再来看看链接循环爬取的分析</strong><br><img src="https://img-blog.csdnimg.cn/20210103181211482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里只需要更改page的值即可实现循环爬取</p>
<h1 id="二、编写代码"><a href="#二、编写代码" class="headerlink" title="二、编写代码"></a>二、编写代码</h1><h2 id="1-引入库"><a href="#1-引入库" class="headerlink" title="1.引入库"></a>1.引入库</h2><p><font color=#999AAA >代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent <span class="comment"># 伪装机型</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread <span class="comment"># 多进程</span></span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue <span class="comment"># 队列</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">	<span class="comment"># cookie 每天会变化，需要即使更换</span></span><br><span class="line">    <span class="string">&#x27;cookie&#x27;</span>: <span class="string">&#x27;SINAGLOBAL=74744724261.95033.1605948585466; wvr=6; &#x27;</span></span><br><span class="line">              <span class="string">&#x27;SUBP=0033WrSXqPxfM725Ws9jqgMF55529P9D9Whrq6C5pCwQBNf5XnQhDpfE5JpX5KMhUgL.Fo&#x27;</span></span><br><span class="line">              <span class="string">&#x27;-cehB7eoqpSKM2dJLoIEBLxKBLBonL12BLxKqL1KnL12-LxKnLBKML1h.LxKMLBKqLB.zt; ALF=1641197487; &#x27;</span></span><br><span class="line">              <span class="string">&#x27;SSOLoginState=1609661488; &#x27;</span></span><br><span class="line">              <span class="string">&#x27;SCF=AqFdnOicaqrQ3UjYRBY-C8Kp3PwjrkfR1lPLA0W8mjbwb9rIU1MBf0l9kWk3ahdAXFldqtvqcZ7UW_ehPXfM1JE.; &#x27;</span></span><br><span class="line">              <span class="string">&#x27;SUB=_2A25y9QxgDeRhGeNI61YR8ijNzjuIHXVRg3qorDV8PUNbmtAKLVTukW9NSH08UxX8Md1T1NOxjdEP88XVg1aJmi7t; &#x27;</span></span><br><span class="line">              <span class="string">&#x27;_s_tentry=login.sina.com.cn; Apache=9994350802777.143.1609661492706; &#x27;</span></span><br><span class="line">              <span class="string">&#x27;ULV=1609661492740:9:6:2:9994350802777.143.1609661492706:1609657348149; UOR=,,www.baidu.com; &#x27;</span></span><br><span class="line">              <span class="string">&#x27;webim_unReadCount=%7B%22time%22%3A1609666074015%2C%22dm_pub_total%22%3A0%2C%22chat_group_client%22%3A0&#x27;</span></span><br><span class="line">              <span class="string">&#x27;%2C%22chat_group_notice%22%3A0%2C%22allcountNum%22%3A3%2C%22msgbox%22%3A0%7D; &#x27;</span></span><br><span class="line">              <span class="string">&#x27;WBStorage=8daec78e6a891122|undefined&#x27;</span>,</span><br><span class="line">    <span class="comment"># 从哪里来</span></span><br><span class="line">    <span class="string">&#x27;referer&#x27;</span>: <span class="string">&#x27;https://photo.weibo.com/6816603335/talbum/index&#x27;</span>,</span><br><span class="line">    <span class="comment"># 伪装头</span></span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class="line">                  <span class="string">&#x27;Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.66 &#x27;</span>,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 下载时图片的伪装头</span></span><br><span class="line">fake = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: UserAgent().random</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># ip代理池</span></span><br><span class="line">proxy_pool = [&#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;183.166.70.110:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;58.22.177.215:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;175.44.109.28:9999&#x27;</span>&#125;,</span><br><span class="line">              &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;175.42.128.211:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;113.121.76.254:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;175.42.122.166:9999&#x27;</span>&#125;,</span><br><span class="line">              &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;175.42.122.233:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;113.121.42.214:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;113.195.152.127:9999&#x27;</span>&#125;,</span><br><span class="line">              &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;175.42.129.78:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;171.35.213.172:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;113.121.37.163:9999&#x27;</span>&#125;]</span><br><span class="line"><span class="comment"># 访问json数据的url</span></span><br><span class="line">url = <span class="string">&#x27;https://photo.weibo.com/photos/get_all&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-多进程的编写"><a href="#2-多进程的编写" class="headerlink" title="2.多进程的编写"></a>2.多进程的编写</h2><p><font color=#999AAA >代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpiderImg</span>(<span class="params">Thread</span>):</span></span><br><span class="line">	<span class="comment"># 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, d</span>):</span></span><br><span class="line">        Thread.__init__(self)</span><br><span class="line">        self.data = d</span><br><span class="line">	<span class="comment"># 重写run方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">    	<span class="comment"># 当队列不为空的时候下载对应的url下的图片</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.data.empty():</span><br><span class="line">        	<span class="comment"># 取队列</span></span><br><span class="line">            a = self.data.get()</span><br><span class="line">            <span class="comment"># 获得id和url数据</span></span><br><span class="line">            i_id = <span class="built_in">list</span>(a.keys())[<span class="number">0</span>]</span><br><span class="line">            i_url = <span class="built_in">list</span>(a.values())[<span class="number">0</span>]</span><br><span class="line">            <span class="comment"># 访问链接取得数据</span></span><br><span class="line">            img = requests.get(url=i_url, headers=fake, proxies=random.choice(proxy_pool)).content</span><br><span class="line">            <span class="comment"># 将文件写入指定路径下的文件夹</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;E:/SpiderImg/李荣浩/&#123;&#125;.jpg&#x27;</span>.<span class="built_in">format</span>(i_id), <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> t:</span><br><span class="line">                t.write(img)</span><br><span class="line">                print(i_id + <span class="string">&#x27;.jpg&#x27;</span> + <span class="string">&#x27; &#x27;</span> * <span class="number">4</span> + <span class="string">&#x27;下载完毕&#x27;</span> + <span class="string">&#x27;.&#x27;</span> * <span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<p><font color=#999AAA >为了开启多进程爬取图片</p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h2 id="3-主函数的编写"><a href="#3-主函数的编写" class="headerlink" title="3.主函数的编写"></a>3.主函数的编写</h2><p><font color=#999AAA >代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	<span class="comment"># 初始化队列</span></span><br><span class="line">    data_queue = Queue()</span><br><span class="line">    <span class="comment"># 循环</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">26</span>):</span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">&#x27;uid&#x27;</span>: <span class="string">&#x27;1739046981&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;album_id&#x27;</span>: <span class="string">&#x27;3581934839144367&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;count&#x27;</span>: <span class="string">&#x27;30&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;page&#x27;</span>: i,</span><br><span class="line">            <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;3&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__rnd&#x27;</span>: <span class="string">&#x27;1609667183074&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        print(<span class="string">&#x27;正在爬取第&#123;&#125;页&#x27;</span>.<span class="built_in">format</span>(i) + <span class="string">&#x27;.&#x27;</span> * <span class="number">4</span>)</span><br><span class="line">        response = requests.get(url=url, params=params, headers=headers).json()</span><br><span class="line">		<span class="comment"># 解析数据</span></span><br><span class="line">        photo_list = response.get(<span class="string">&#x27;data&#x27;</span>).get(<span class="string">&#x27;photo_list&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> photo <span class="keyword">in</span> photo_list:</span><br><span class="line">        	<span class="comment"># 取得其中的pic_name 和 pic_name </span></span><br><span class="line">            pic_name = photo.get(<span class="string">&#x27;pic_name&#x27;</span>)</span><br><span class="line">            pic_name = photo.get(<span class="string">&#x27;photo_id&#x27;</span>)</span><br><span class="line">            photo_url = <span class="string">&#x27;https://wx4.sinaimg.cn/large/&#x27;</span> + pic_name</span><br><span class="line">            <span class="comment"># 添加到队列中</span></span><br><span class="line">            data_queue.put(&#123;photo_id: photo_url&#125;)</span><br><span class="line">	<span class="comment"># 开启多进程，根据队列中存放的url数据，下载图片</span></span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">        spider = SpiderImg(data_queue)</span><br><span class="line">        spider.start()</span><br></pre></td></tr></table></figure>
<h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p><font color=#999AAA >程序运行结果：<br><img src="https://img-blog.csdnimg.cn/20210103182940445.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>注：案例仅供学习</strong></p>
]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>微博个人主页的信息爬取</title>
    <url>/posts/989be291/</url>
    <content><![CDATA[<h2 id="微博个人主页的信息爬取"><a href="#微博个人主页的信息爬取" class="headerlink" title="微博个人主页的信息爬取"></a>微博个人主页的信息爬取</h2><p><strong>闲话少说，先进入分析过程。</strong><br><strong>因为相对而言移动端的界面会比较好爬取，所以今天我们爬取移动端微博的页面，如下：</strong><br><img src="https://img-blog.csdnimg.cn/20210103162026854.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<a id="more"></a>

<p>这里是前后端分离异步加载的数据，所以我们去抓包工具下寻找对应的接口地址：<br><img src="https://img-blog.csdnimg.cn/20210103162328461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>很明显可以看到crads下对应了多条数据，而其中的mblog下存放着对应微博的相关数据：<br><img src="https://img-blog.csdnimg.cn/20210103162516499.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>不要着急现在就去解析界面数据，先去看看下一页的加载，怎样去请求下一条数据：<br><img src="https://img-blog.csdnimg.cn/20210103162816242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>对比看到多出了一个since_id的数据，发现这个数据的来源是上一条json数据中的：<br><img src="https://img-blog.csdnimg.cn/20210103163205858.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>到这里我们的分析就结束了，接下来进行代码的编写。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 个人微博内容循环爬取，基于强大的requests库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 伪装头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;m.weibo.cn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://m.weibo.cn/u/6816603335&quot;</span>,</span><br><span class="line">    <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 8.0; Pixel 2 Build/OPD3.170816.012) AppleWebKit/537.36 (KHTML, &quot;</span></span><br><span class="line">                  <span class="string">&quot;like Gecko) Chrome/87.0.4280.88 Mobile Safari/537.36 Edg/87.0.664.66 &quot;</span>,</span><br><span class="line">    <span class="string">&quot;X-Requested-With&quot;</span>: <span class="string">&quot;XMXLHttpRequest&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 接口链接模板</span></span><br><span class="line">base_url = <span class="string">&#x27;https://m.weibo.cn/api/container/getIndex?&#x27;</span></span><br><span class="line"><span class="comment"># ip代理池</span></span><br><span class="line">proxy_pool = [&#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;27.206.178.75:9000&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;175.42.122.226:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;175.42.158.31:9999&#x27;</span>&#125;,</span><br><span class="line">              &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;175.44.109.38:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;42.238.91.46:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;175.42.158.146:9999&#x27;</span>&#125;,</span><br><span class="line">              &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;123.160.69.171:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;115.221.240.115:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;183.166.110.5:9999&#x27;</span>&#125;,</span><br><span class="line">              &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;125.121.123.115:8888&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;117.64.237.222:1133&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;182.87.39.163:9000&#x27;</span>&#125;,</span><br><span class="line">              &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;120.79.184.148:8118&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;122.234.24.178:9000&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;175.42.158.74:9999&#x27;</span>&#125;]</span><br><span class="line"><span class="comment"># 预定义字典</span></span><br><span class="line">weibo = &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>接下来我们进行函数的编写，封装两个函数，用来请求数据 和 解析数据。<br>请求参数如下：<br><img src="https://img-blog.csdnimg.cn/20210103163707214.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对链接的请求函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span>(<span class="params">since_id=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="comment"># 爬取用户的参数</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&#x27;uid&#x27;</span>: <span class="string">&#x27;2946150412&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;luicode&#x27;</span>: <span class="string">&#x27;10000011&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;lfid&#x27;</span>: <span class="string">&#x27;231093_-_selffollowed&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;uid&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;2946150412&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;containerid&#x27;</span>: <span class="string">&#x27;1076032946150412&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;since_id&#x27;</span>: since_id</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># url拼接</span></span><br><span class="line">    url = base_url + urlencode(params)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 对拼接字符串进行访问</span></span><br><span class="line">        response = requests.get(url=url, headers=headers, proxies=random.choice(proxy_pool))</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="comment"># 响应成功后，将返回的json数据解析，返回json和其中的since_id</span></span><br><span class="line">            <span class="comment"># since_id是为了循环爬取下一条</span></span><br><span class="line">            json = response.json()</span><br><span class="line">            next_since_id = json.get(<span class="string">&#x27;data&#x27;</span>).get(<span class="string">&#x27;cardlistInfo&#x27;</span>).get(<span class="string">&#x27;since_id&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> json, next_since_id</span><br><span class="line">    <span class="keyword">except</span> requests.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 失败 控制台抛出异常</span></span><br><span class="line">        print(<span class="string">&quot;错误：&quot;</span>, e.args)</span><br></pre></td></tr></table></figure>
<p>上面的函数会返回一个json对象和since_id的数据，json对象用来解析微博的对应信息，since_id为我们的下次爬取提供参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解析传回来的json</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span>(<span class="params">json</span>):</span></span><br><span class="line">    <span class="comment"># 部分card属性下，存放着mblog，即是对应的微博内容</span></span><br><span class="line">    cards = json.get(<span class="string">&#x27;data&#x27;</span>).get(<span class="string">&#x27;cards&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> card <span class="keyword">in</span> cards:</span><br><span class="line">        mblog = card.get(<span class="string">&#x27;mblog&#x27;</span>)</span><br><span class="line">        <span class="comment"># 循环遍历，获取对应的每一条数据，有mblog属性再解析</span></span><br><span class="line">        <span class="keyword">if</span> mblog:</span><br><span class="line">            <span class="comment"># 发布微博的来源</span></span><br><span class="line">            weibo[<span class="string">&#x27;source&#x27;</span>] = mblog[<span class="string">&#x27;source&#x27;</span>]</span><br><span class="line">            <span class="comment"># 创建时间</span></span><br><span class="line">            weibo[<span class="string">&#x27;created_at&#x27;</span>] = mblog[<span class="string">&#x27;created_at&#x27;</span>]</span><br><span class="line">            <span class="comment"># 文本内容</span></span><br><span class="line">            weibo[<span class="string">&#x27;raw_text&#x27;</span>] = mblog[<span class="string">&#x27;raw_text&#x27;</span>]</span><br><span class="line">            <span class="comment"># 图片</span></span><br><span class="line">            weibo[<span class="string">&#x27;original_pic&#x27;</span>] = mblog.get(<span class="string">&#x27;original_pic&#x27;</span>)</span><br><span class="line">            <span class="comment"># 图床的相关处理</span></span><br><span class="line">            pics = []</span><br><span class="line">            p = mblog.get(<span class="string">&#x27;pics&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> p:</span><br><span class="line">                <span class="keyword">for</span> pic <span class="keyword">in</span> p:</span><br><span class="line">                    pics.append(pic[<span class="string">&#x27;url&#x27;</span>])</span><br><span class="line">                weibo[<span class="string">&#x27;pics&#x27;</span>] = <span class="string">&#x27; , &#x27;</span>.join(pics)</span><br><span class="line">                <span class="comment"># 提交</span></span><br><span class="line">            <span class="keyword">yield</span> weibo</span><br></pre></td></tr></table></figure>
<p>最后封装一个函数调用上面的两个方法，并做到循环请求和解析的效果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 调用封装好的函数并进行持久化存储</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">domain</span>():</span></span><br><span class="line">    <span class="keyword">global</span> return_data</span><br><span class="line">    <span class="comment"># 循环请求数据接口，200次已经很多了，获取不到对应的since_id时，程序会报错停止</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">    <span class="comment"># 由于第一页没有since_id参数，这里特殊处理</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">&quot;正在爬取第&#123;&#125;页....&quot;</span>.<span class="built_in">format</span>(i + <span class="number">1</span>))</span><br><span class="line">            <span class="comment"># 第一个接口没有since_id参数 传值为空</span></span><br><span class="line">            return_data = get_page()</span><br><span class="line">            <span class="comment"># 下面的语句参照else中的注释</span></span><br><span class="line">            results = parse_page(return_data[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">for</span> res <span class="keyword">in</span> results:</span><br><span class="line">                img = res.get(<span class="string">&#x27;original_pic&#x27;</span>)</span><br><span class="line">                pics = res.get(<span class="string">&#x27;pics&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> img <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    img = <span class="string">&quot;无&quot;</span></span><br><span class="line">                <span class="keyword">if</span> pics <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    pics = <span class="string">&quot;无&quot;</span></span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                    file.write(<span class="string">&#x27;时间：&#x27;</span> + res[<span class="string">&#x27;created_at&#x27;</span>] + <span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;来源：&#x27;</span> + res[<span class="string">&#x27;source&#x27;</span>] + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">                               + <span class="string">&#x27;内容：&#x27;</span> + res[<span class="string">&#x27;raw_text&#x27;</span>] + <span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;附图链接地址：&#x27;</span> + img + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">                               + <span class="string">&#x27;图床：&#x27;</span> + pics + <span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;正在爬取第&#123;&#125;页....&quot;</span>.<span class="built_in">format</span>(i + <span class="number">1</span>))</span><br><span class="line">            <span class="comment"># 传入返回的第二个值since_id</span></span><br><span class="line">            return_data = get_page(return_data[<span class="number">1</span>])</span><br><span class="line">            <span class="comment"># 传入解析的第一个值json对象</span></span><br><span class="line">            results = parse_page(return_data[<span class="number">0</span>])</span><br><span class="line">            <span class="comment"># 遍历提交的结果</span></span><br><span class="line">            <span class="keyword">for</span> res <span class="keyword">in</span> results:</span><br><span class="line">                <span class="comment"># 对照片和图床进行非空判断</span></span><br><span class="line">                img = res.get(<span class="string">&#x27;original_pic&#x27;</span>)</span><br><span class="line">                pics = res.get(<span class="string">&#x27;pics&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> img <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    img = <span class="string">&quot;无&quot;</span></span><br><span class="line">                <span class="keyword">if</span> pics <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    pics = <span class="string">&quot;无&quot;</span></span><br><span class="line">                <span class="comment"># 持久化存储用文本实现</span></span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                    file.write(<span class="string">&#x27;时间：&#x27;</span> + res[<span class="string">&#x27;created_at&#x27;</span>] + <span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;来源：&#x27;</span> + res[<span class="string">&#x27;source&#x27;</span>] + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">                               + <span class="string">&#x27;内容：&#x27;</span> + res[<span class="string">&#x27;raw_text&#x27;</span>] + <span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;附图链接地址：&#x27;</span> + img + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">                               + <span class="string">&#x27;图床：&#x27;</span> + pics + <span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>运行结果如下：<br><img src="https://img-blog.csdnimg.cn/20210103164347188.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>最后看一下我们的结果文件：<br><img src="https://img-blog.csdnimg.cn/20210103164430693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210103164453243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到最早的2015年的微博也获取到了，对应的图片链接也是可以访问没有问题的。<br><strong>注：案例仅供学习</strong></p>
]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>按日期爬取b站弹幕二</title>
    <url>/posts/24b45e76/</url>
    <content><![CDATA[<font color=#999AAA >
上次的b站爬取需要手动输入日期等信息，这次直接在程序内根据时间差进行爬取，直接放上完整代码。
</font>




<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>上次的分析链接在此：<a href="https://blog.csdn.net/HandsomeFishman/article/details/112171386">b站弹幕爬取分析</a><br><font color=#999AAA >直接附上完整代码：</font></p>
<a id="more"></a>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BarrageSpider</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, bv</span>):</span></span><br><span class="line">        <span class="comment"># 需要一个bv号，在接下来的代码中进行替换操作</span></span><br><span class="line">        self.bv = bv</span><br><span class="line">        self.video_name = <span class="literal">None</span></span><br><span class="line">        <span class="comment"># 不需要登录的弹幕接口地址 只能爬取部分弹幕</span></span><br><span class="line">        self.barrage_url = <span class="string">&#x27;https://comment.bilibili.com/&#123;&#125;.xml&#x27;</span></span><br><span class="line">        <span class="comment"># 需要登陆的弹幕接口地址 根据日期进行分类 需要循环爬取 最后归总数据</span></span><br><span class="line">        self.date_url = <span class="string">&#x27;https://api.bilibili.com/x/v2/dm/history?type=1&amp;oid=&#123;&#125;&amp;date=&#123;&#125;&#x27;</span>  <span class="comment"># 2021-01-01</span></span><br><span class="line">        <span class="comment"># 点击按钮弹出日历的数据接口，这里我们用来作索引</span></span><br><span class="line">        self.index_url = <span class="string">&#x27;https://api.bilibili.com/x/v2/dm/history/index?type=1&amp;oid=&#123;&#125;&amp;month=&#123;&#125;&#x27;</span>  <span class="comment"># 2021-01</span></span><br><span class="line">        <span class="comment"># 在抓包工具中找的一个简洁的请求，里面有我们需要的oid或者是cid</span></span><br><span class="line">        self.bv_url = <span class="string">&#x27;https://api.bilibili.com/x/player/pagelist?bvid=&#x27;</span> + bv + <span class="string">&#x27;&amp;jsonp=jsonp&#x27;</span></span><br><span class="line">        <span class="comment"># 视频时间获取</span></span><br><span class="line">        self.video_url = <span class="string">&#x27;https://www.bilibili.com/video/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(bv)</span><br><span class="line">        <span class="comment"># 不需要登录接口的伪装头</span></span><br><span class="line">        self.comment = &#123;</span><br><span class="line">            <span class="string">&#x27;referer&#x27;</span>: <span class="string">&#x27;https://www.bilibili.com/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class="line">                          <span class="string">&#x27;Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.66 &#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 需要登录的伪装头 因为需要登录 ip代理已经没有意义了 这里就不再使用IP代理</span></span><br><span class="line">        self.date_headers = &#123;</span><br><span class="line">            <span class="string">&quot;referer&quot;</span>: <span class="string">&quot;https://www.bilibili.com/&quot;</span>,</span><br><span class="line">            <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;https://www.bilibili.com&quot;</span>,</span><br><span class="line">            <span class="string">&quot;cookie&quot;</span>: <span class="string">&quot;你的cookie 爬很久远的视频 会被封ip 后面接收到的都是空结果&quot;</span>,</span><br><span class="line">            <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &quot;</span></span><br><span class="line">                          <span class="string">&quot;Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.66 &quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从接口返回的json中获取到我们的cid 注： cid = oid</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_cid</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 定位到数据data中下面的cid</span></span><br><span class="line">        <span class="keyword">return</span> requests.get(url=self.bv_url, headers=self.comment).json()[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;cid&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_video_time</span>(<span class="params">self</span>):</span></span><br><span class="line">        time_data = requests.get(url=self.video_url, headers=self.comment).text</span><br><span class="line">        video_page = etree.HTML(time_data)</span><br><span class="line">        v_time = video_page.xpath(<span class="string">&#x27;//div[@class=&quot;video-data&quot;]/span[3]/text()&#x27;</span>)[<span class="number">0</span>].split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        self.video_name = video_page.xpath(<span class="string">&#x27;//h1[@class=&quot;video-title&quot;]/span/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> v_time</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析不需要登录的接口 返回类型是xml文件</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_url</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 获取指定视频的cid/oid</span></span><br><span class="line">        cid = self.get_cid()</span><br><span class="line">        <span class="comment"># 对页面进行伪装请求，这里注意不要转换成text，使用二进制</span></span><br><span class="line">        response = requests.get(url=self.barrage_url.<span class="built_in">format</span>(cid), headers=self.comment).content</span><br><span class="line">        <span class="comment"># etree解析</span></span><br><span class="line">        data = etree.HTML(response)</span><br><span class="line">        <span class="comment"># 定位到所有的d元素</span></span><br><span class="line">        barrage_list = data.xpath(<span class="string">&#x27;//d&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> barrage <span class="keyword">in</span> barrage_list:</span><br><span class="line">            <span class="comment"># 获取d元素的p属性值</span></span><br><span class="line">            info = barrage.xpath(<span class="string">&#x27;./@p&#x27;</span>)[<span class="number">0</span>].split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">            <span class="comment"># 获取弹幕内容</span></span><br><span class="line">            content = barrage.xpath(<span class="string">&#x27;./text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            item = &#123;<span class="string">&#x27;出现时间&#x27;</span>: info[<span class="number">0</span>], <span class="string">&#x27;弹幕模式&#x27;</span>: info[<span class="number">1</span>], <span class="string">&#x27;字体大小&#x27;</span>: info[<span class="number">2</span>], <span class="string">&#x27;颜色&#x27;</span>: info[<span class="number">3</span>], <span class="string">&#x27;发送时间&#x27;</span>: info[<span class="number">4</span>], <span class="string">&#x27;弹幕池&#x27;</span>: info[<span class="number">5</span>],</span><br><span class="line">                    <span class="string">&#x27;用户ID&#x27;</span>: info[<span class="number">6</span>], <span class="string">&#x27;rowID&#x27;</span>: info[<span class="number">7</span>], <span class="string">&#x27;内容&#x27;</span>: content&#125;</span><br><span class="line">            <span class="comment"># 因为这只是一部分弹幕 所以就没有进行持久化存储 没有必要</span></span><br><span class="line">            print(item)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 循环爬取所有弹幕 需要传入month的数据 根据视频发布的日期到现在的所有月份</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_date_url</span>(<span class="params">self, month</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;正在爬取&#123;&#125;月份的数据&#x27;</span>.<span class="built_in">format</span>(month))</span><br><span class="line">        <span class="comment"># 存放爬到的数据</span></span><br><span class="line">        result = []</span><br><span class="line">        <span class="comment"># 获取视频的oid</span></span><br><span class="line">        oid = self.get_cid()</span><br><span class="line">        <span class="comment"># 获取日期索引</span></span><br><span class="line">        date_by_month = requests.get(url=self.index_url.<span class="built_in">format</span>(oid, month), headers=self.date_headers).json().get(</span><br><span class="line">            <span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">        <span class="comment"># 根据日期索引循环请求</span></span><br><span class="line">        <span class="keyword">if</span> date_by_month:</span><br><span class="line">            <span class="keyword">for</span> day <span class="keyword">in</span> date_by_month:</span><br><span class="line">                print(<span class="string">&#x27;&#123;&#125;月份数据下的&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(month, day))</span><br><span class="line">                <span class="comment"># 注意还是二进制文件</span></span><br><span class="line">                date_page = requests.get(url=self.date_url.<span class="built_in">format</span>(oid, day), headers=self.date_headers).content</span><br><span class="line">                date_data = etree.HTML(date_page)</span><br><span class="line">                <span class="comment"># 解析到到所有的d元素</span></span><br><span class="line">                barrage_list = date_data.xpath(<span class="string">&#x27;//d&#x27;</span>)</span><br><span class="line">                <span class="comment"># 循环解析数据</span></span><br><span class="line">                <span class="keyword">for</span> barrage <span class="keyword">in</span> barrage_list:</span><br><span class="line">                    <span class="comment"># 获取d元素的p属性值</span></span><br><span class="line">                    things = barrage.xpath(<span class="string">&#x27;./@p&#x27;</span>)[<span class="number">0</span>].split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">                    <span class="comment"># 获取弹幕内容 并去掉所有空格</span></span><br><span class="line">                    content = barrage.xpath(<span class="string">&#x27;./text()&#x27;</span>)[<span class="number">0</span>].replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">                    item = &#123;<span class="string">&#x27;出现时间&#x27;</span>: things[<span class="number">0</span>], <span class="string">&#x27;弹幕模式&#x27;</span>: things[<span class="number">1</span>], <span class="string">&#x27;字体大小&#x27;</span>: things[<span class="number">2</span>], <span class="string">&#x27;颜色&#x27;</span>: things[<span class="number">3</span>], <span class="string">&#x27;发送时间&#x27;</span>: things[<span class="number">4</span>],</span><br><span class="line">                            <span class="string">&#x27;弹幕池&#x27;</span>: things[<span class="number">5</span>],</span><br><span class="line">                            <span class="string">&#x27;用户ID&#x27;</span>: things[<span class="number">6</span>], <span class="string">&#x27;rowID&#x27;</span>: things[<span class="number">7</span>], <span class="string">&#x27;内容&#x27;</span>: content&#125;</span><br><span class="line">                    result.append(item)</span><br><span class="line">        <span class="comment"># 返回封装好的数据</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据现在的时间遍历所有的月份信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_month</span>(<span class="params">self</span>):</span></span><br><span class="line">        start_day = datetime.datetime.strptime(self.get_video_time(), <span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line">        end_day = datetime.date.today()</span><br><span class="line">        months = (end_day.year - start_day.year) * <span class="number">12</span> + end_day.month - start_day.month</span><br><span class="line">        m_list = []</span><br><span class="line">        <span class="keyword">for</span> mon <span class="keyword">in</span> <span class="built_in">range</span>(start_day.month - <span class="number">1</span>, start_day.month + months):</span><br><span class="line">            <span class="keyword">if</span> (mon % <span class="number">12</span> + <span class="number">1</span>) &lt; <span class="number">10</span>:</span><br><span class="line">                m_list.append(<span class="string">&#x27;&#123;&#125;-0&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(start_day.year + mon // <span class="number">12</span>, mon % <span class="number">12</span> + <span class="number">1</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                m_list.append(<span class="string">&#x27;&#123;&#125;-&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(start_day.year + mon // <span class="number">12</span>, mon % <span class="number">12</span> + <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> m_list</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 舍友指导下的一行代码生成词云 编译器自动格式化了 本质还是一行代码</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wordCloud</span>(<span class="params">self</span>):</span></span><br><span class="line">        WordCloud(font_path=<span class="string">&quot;C:/Windows/Fonts/simfang.ttf&quot;</span>, background_color=<span class="string">&#x27;white&#x27;</span>, scale=<span class="number">16</span>).generate(<span class="string">&quot; &quot;</span>.join(</span><br><span class="line">            [c <span class="keyword">for</span> c <span class="keyword">in</span> jieba.cut(<span class="string">&quot;&quot;</span>.join(<span class="built_in">str</span>((pd.read_csv(<span class="string">&#x27;&#123;&#125;弹幕池数据集.csv&#x27;</span>.<span class="built_in">format</span>(self.video_name))[<span class="string">&#x27;内容&#x27;</span>]).tolist()))) <span class="keyword">if</span></span><br><span class="line">             <span class="built_in">len</span>(c) &gt; <span class="number">1</span>])).to_file(</span><br><span class="line">            <span class="string">&quot;&#123;&#125;词云.png&quot;</span>.<span class="built_in">format</span>(self.video_name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 输入指定的视频bv号</span></span><br><span class="line">    bv_id = <span class="built_in">input</span>(<span class="string">&#x27;输入视频对应的bv号:&#x27;</span>)</span><br><span class="line">    <span class="comment"># new一个对象</span></span><br><span class="line">    spider = BarrageSpider(bv_id)</span><br><span class="line">    spider.parse_month()</span><br><span class="line">    <span class="comment"># 请求今年1月和去年12月的数据 并合并数据</span></span><br><span class="line">    word_data = []</span><br><span class="line">    months = spider.parse_month()</span><br><span class="line">    <span class="comment"># 循环遍历爬取</span></span><br><span class="line">    <span class="keyword">for</span> month <span class="keyword">in</span> months:</span><br><span class="line">        word = spider.parse_date_url(month)</span><br><span class="line">        word_data.extend(word)</span><br><span class="line">    <span class="comment"># 数据格式化处理 并输出csv格式文件</span></span><br><span class="line">    data = pd.DataFrame(word_data)</span><br><span class="line">    data.drop_duplicates(subset=[<span class="string">&#x27;rowID&#x27;</span>], keep=<span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">    <span class="comment"># 字符集编码需要为utf-8-sig 不然会乱码</span></span><br><span class="line">    data.to_csv(<span class="string">&#x27;&#123;&#125;弹幕池数据集.csv&#x27;</span>.<span class="built_in">format</span>(spider.video_name), index=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8-sig&#x27;</span>)</span><br><span class="line">    <span class="comment"># # 生成词云</span></span><br><span class="line">    spider.wordCloud()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p><img src="https://img-blog.csdnimg.cn/2021010714345345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210107143523237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210107143558160.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里只有十八万行…是因为刚开始测试的时候忘记在月份前加0。代码里已经更正。<br>更正后 爬取了骚猪的视频：<br><img src="https://img-blog.csdnimg.cn/2021010717522992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>视频上显示16万弹幕，实际则有67万，而且爬到19年后，获取的都为空数据，预测实际弹幕有100万左右。<br><img src="https://img-blog.csdnimg.cn/20210107175840869.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210107175851199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>可以通过多账号的方式爬取完整弹幕，这里就不做了。</p>
]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>有道翻译js逆向</title>
    <url>/posts/cb40ebbd/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20210109180814355.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>对有道翻译进行的js逆向爬虫分析。</p>
<a id="more"></a>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><font color=#999AAA >js逆向第一战。</font></p>
<h1 id="一、JS逆向是什么？"><a href="#一、JS逆向是什么？" class="headerlink" title="一、JS逆向是什么？"></a>一、JS逆向是什么？</h1><p><font color=#999AAA >抓取网页端数据时，经常被加密参数、加密数据所困扰，获取不到想要的数据。这个时候需要根据JavaScript的代码逆向进行解决问题。</p>
<h1 id="二、分析和编写代码"><a href="#二、分析和编写代码" class="headerlink" title="二、分析和编写代码"></a>二、分析和编写代码</h1><h2 id="1-分析"><a href="#1-分析" class="headerlink" title="1.分析"></a>1.分析</h2><p>地址：<a href="http://fanyi.youdao.com/?keyfrom=fanyi-new.logo">有道翻译</a><br>在输入框内输入英文，抓包工具中新增一个接口：<br><img src="https://img-blog.csdnimg.cn/20210109180814355.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>显而易见，这就是我们想要的数据，那么我们来看看请求头。<br><img src="https://img-blog.csdnimg.cn/20210109180952378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>对比多个请求头的参数后发现，salt，sign，和lts是一直动态变化的，我们去搜索一下sign在js文件中出现的位置，并初步排除一下代码段。<br><img src="https://img-blog.csdnimg.cn/20210109181143454.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>搜到一条结果，格式化一下，再在其中搜索sign：<br><img src="https://img-blog.csdnimg.cn/20210109181256786.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>有十五个值，我们根据特征逐条查看一下，找到了其中的关键片段：<br><img src="https://img-blog.csdnimg.cn/2021010918144276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里可以很清楚的看到：</p>
<ul>
<li>调用了工具md5加密</li>
<li>(new Date).getTime() 时间戳</li>
<li>parseInt(10 * Math.random(), 10) 10以内的随机数</li>
<li>n.md5(“fanyideskweb” + e + i + “Tbh5E8=q6U3EXe+&amp;L[4c@”) 拼接字符串后，进行md5加密<br>于是，打断点进行测试，注意在语句运行之后打断点：<br><img src="https://img-blog.csdnimg.cn/20210109181839947.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>于是这里的e就是我们输入的英文字符串，r是时间戳，i是时间戳后加一个随机数，对应关系为：</li>
<li>ts: r</li>
<li>salt: i</li>
<li>sign: 拼接并加密后的e<br>与我们的请求头对应上了，接下来我们只需要在python中模仿其做出相同的操作即可。</li>
</ul>
<h2 id="2-编写代码"><a href="#2-编写代码" class="headerlink" title="2.编写代码"></a>2.编写代码</h2><p><font color=#999AAA >代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TranslationSpider</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, word</span>):</span></span><br><span class="line">        <span class="comment"># 先请求基本页面再请求接口，session中会存在对应的cookie等参数</span></span><br><span class="line">        self.base_url = <span class="string">&#x27;http://fanyi.youdao.com/?keyfrom=fanyi-new.logo&#x27;</span></span><br><span class="line">        <span class="comment"># 接口地址</span></span><br><span class="line">        self.url = <span class="string">&#x27;http://fanyi.youdao.com/translate_o?smartresult=dict&amp;smartresult=rule&#x27;</span></span><br><span class="line">        <span class="comment"># 初始化session</span></span><br><span class="line">        self.session = requests.session()</span><br><span class="line">        <span class="comment"># 初始化伪装头</span></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;http://fanyi.youdao.com/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class="line">                          <span class="string">&#x27;Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.66 &#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 初始化参数</span></span><br><span class="line">        self.word = word</span><br><span class="line">        self.data = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generator_data</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 获得时间戳</span></span><br><span class="line">        ts = <span class="built_in">str</span>(<span class="built_in">int</span>(time.time() * <span class="number">1000</span>))</span><br><span class="line">        <span class="comment"># 时间戳加随机数</span></span><br><span class="line">        salt = ts + <span class="built_in">str</span>(random.randint(<span class="number">0</span>, <span class="number">10</span>))</span><br><span class="line">        <span class="comment"># md5加密</span></span><br><span class="line">        sign = <span class="string">&quot;fanyideskweb&quot;</span> + self.word + salt + <span class="string">&quot;Tbh5E8=q6U3EXe+&amp;L[4c@&quot;</span></span><br><span class="line">        md5 = hashlib.md5()</span><br><span class="line">        md5.update(sign.encode())</span><br><span class="line">        sign = md5.hexdigest()</span><br><span class="line">        <span class="comment"># post请求的参数</span></span><br><span class="line">        self.data = &#123;</span><br><span class="line">            <span class="string">&quot;i&quot;</span>: self.word,</span><br><span class="line">            <span class="string">&quot;from&quot;</span>: <span class="string">&quot;AUTO&quot;</span>,</span><br><span class="line">            <span class="string">&quot;to&quot;</span>: <span class="string">&quot;AUTO&quot;</span>,</span><br><span class="line">            <span class="string">&quot;smartresult&quot;</span>: <span class="string">&quot;dict&quot;</span>,</span><br><span class="line">            <span class="string">&quot;client&quot;</span>: <span class="string">&quot;fanyideskweb&quot;</span>,</span><br><span class="line">            <span class="string">&quot;salt&quot;</span>: salt,</span><br><span class="line">            <span class="string">&quot;sign&quot;</span>: sign,</span><br><span class="line">            <span class="string">&quot;lts&quot;</span>: ts,</span><br><span class="line">            <span class="string">&quot;bv&quot;</span>: <span class="string">&quot;b286f0a34340b928819a6f64492585e8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;doctype&quot;</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">            <span class="string">&quot;version&quot;</span>: <span class="string">&quot;2.1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;keyfrom&quot;</span>: <span class="string">&quot;fanyi.web&quot;</span>,</span><br><span class="line">            <span class="string">&quot;action&quot;</span>: <span class="string">&quot;FY_BY_REALTlME&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_request</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 请求初始界面</span></span><br><span class="line">        self.session.get(url=self.base_url, headers=self.headers)</span><br><span class="line">        <span class="comment"># 再请求接口地址 并返回json</span></span><br><span class="line">        response = self.session.post(url=self.url, data=self.data, headers=self.headers).json()</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_json</span>(<span class="params">self, json</span>):</span></span><br><span class="line">        <span class="comment"># 解析传过来的json数据</span></span><br><span class="line">        tgt = json[<span class="string">&#x27;translateResult&#x27;</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="string">&#x27;tgt&#x27;</span>]</span><br><span class="line">        entries = json[<span class="string">&#x27;smartResult&#x27;</span>][<span class="string">&#x27;entries&#x27;</span>]</span><br><span class="line">        print(<span class="string">&#x27;英文&#123;&#125;翻译结果为：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.word, tgt))</span><br><span class="line">        print(<span class="string">&#x27;&#x27;</span>.join(entries))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 调用封装好的方法</span></span><br><span class="line">        self.generator_data()</span><br><span class="line">        self.parse_json(self.get_request())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 循环翻译</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        w = <span class="built_in">input</span>(<span class="string">&#x27;输入需要翻译的英文：&#x27;</span>)</span><br><span class="line">        <span class="comment"># 输入exit0退出</span></span><br><span class="line">        <span class="keyword">if</span> w == <span class="string">&#x27;exit0&#x27;</span>:</span><br><span class="line">            print(<span class="string">&#x27;退出成功！&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># new一个对象</span></span><br><span class="line">        spider = TranslationSpider(w)</span><br><span class="line">        <span class="comment"># 运行</span></span><br><span class="line">        spider.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><font color=#999AAA >第一个js逆向的项目结束，以后再见。</p>
]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>爬取b站视频弹幕并制作词云一</title>
    <url>/posts/fc448f83/</url>
    <content><![CDATA[<font color=#999AAA >
用过B站的小伙伴们都知道，B站的弹幕是一绝。
今天我们爬取指定bv号视频下的弹幕，添加到csv文件中并制作成词云。
</font>

<p>@<a href="%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95">TOC</a></p>
<p>优化后的完整代码：<a href="https://blog.csdn.net/HandsomeFishman/article/details/112309330">代码地址</a></p>
<h1 id="一、分析弹幕的接口url地址"><a href="#一、分析弹幕的接口url地址" class="headerlink" title="一、分析弹幕的接口url地址"></a>一、分析弹幕的接口url地址</h1><p><font color=#999AAA >这里有两个地址可以实现爬取弹幕，一个是有限条的，另一个则是根据日期循环爬取，可以实现所有弹幕的爬取。</font><br>案例是冰冰的vlog.001<br><img src="https://img-blog.csdnimg.cn/2021010412201182.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<a id="more"></a>

<p>第一个不需要登录就可以爬取的接口为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://comment.bilibili.com/&#123;oid/cid&#125;.xml</span><br></pre></td></tr></table></figure>
<p>我抓包抓了很久也没有找到这样的包，b站现在把弹幕的接口藏得很深…不是很好找，最后是看着别人的博客在移动端的网页js中找到了这样的请求地址。<br><img src="https://img-blog.csdnimg.cn/20210104114429984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到返回的结果是一个xml界面，只需要请求这个界面使用xpath对其进行定位就可以很容易的获取到自己想要的数据。<br><strong>那么我们现在来分析第二个接口：</strong><br><img src="https://img-blog.csdnimg.cn/20210104114644958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到右侧有一个弹幕历史的功能，我们先把抓包记录清除一下，点击按钮看看有什么新抓到的包：<br><img src="https://img-blog.csdnimg.cn/20210104114811377.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到这里出现了一个新的请求，内容是这样的：<br><img src="https://img-blog.csdnimg.cn/20210104114937972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这不就是对应的日期嘛，不用想，请求头中肯定会有对应的月份数据，按月份来分组，达到这样的日历点击效果。果然：<br><img src="https://img-blog.csdnimg.cn/20210104115154902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击十二月后，有了新的请求：<br><img src="https://img-blog.csdnimg.cn/20210104115253993.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>因为这个视频是12-31号发布的，所以十二月只有这一个数据。<br>点击具体的一天后：<br><img src="https://img-blog.csdnimg.cn/20210104115450413.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>弹幕的数据就出现了：<br><img src="https://img-blog.csdnimg.cn/2021010411552953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>所以我们只需要请求对应的日期索引（以月份分组），再循环遍历发送请求就好了，这里需要登录，所以我们使用到cookie，接下来看代码编写。</p>
<h1 id="二、代码编写"><a href="#二、代码编写" class="headerlink" title="二、代码编写"></a>二、代码编写</h1><h2 id="1-引入库"><a href="#1-引入库" class="headerlink" title="1.引入库"></a>1.引入库</h2><p><font color=#999AAA >代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> jieba</span><br></pre></td></tr></table></figure>
<h2 id="2-爬虫类编写"><a href="#2-爬虫类编写" class="headerlink" title="2.爬虫类编写"></a>2.爬虫类编写</h2><p><font color=#999AAA >初始化：</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BarrageSpider</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, bv</span>):</span></span><br><span class="line">        <span class="comment"># 需要一个bv号，在接下来的代码中进行替换操作</span></span><br><span class="line">        self.bv = bv</span><br><span class="line">        <span class="comment"># 不需要登录的弹幕接口地址 只能爬取部分弹幕</span></span><br><span class="line">        self.barrage_url = <span class="string">&#x27;https://comment.bilibili.com/&#123;&#125;.xml&#x27;</span></span><br><span class="line">        <span class="comment"># 需要登陆的弹幕接口地址 根据日期进行分类 需要循环爬取 最后归总数据</span></span><br><span class="line">        self.date_url = <span class="string">&#x27;https://api.bilibili.com/x/v2/dm/history?type=1&amp;oid=&#123;&#125;&amp;date=&#123;&#125;&#x27;</span>  <span class="comment"># 2021-01-01</span></span><br><span class="line">        <span class="comment"># 点击按钮弹出日历的数据接口，这里我们用来作索引</span></span><br><span class="line">        self.index_url = <span class="string">&#x27;https://api.bilibili.com/x/v2/dm/history/index?type=1&amp;oid=&#123;&#125;&amp;month=&#123;&#125;&#x27;</span>  <span class="comment"># 2021-01</span></span><br><span class="line">        <span class="comment"># 在抓包工具中找的一个简洁的请求，里面有我们需要的oid或者是cid</span></span><br><span class="line">        self.bv_url = <span class="string">&#x27;https://api.bilibili.com/x/player/pagelist?bvid=&#x27;</span> + bv + <span class="string">&#x27;&amp;jsonp=jsonp&#x27;</span></span><br><span class="line">        <span class="comment"># 不需要登录接口的伪装头</span></span><br><span class="line">        self.comment = &#123;</span><br><span class="line">            <span class="string">&#x27;referer&#x27;</span>: <span class="string">&#x27;https://www.bilibili.com/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class="line">                          <span class="string">&#x27;Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.66 &#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 需要登录的伪装头 因为需要登录 ip代理已经没有意义了 这里就不再使用IP代理</span></span><br><span class="line">        self.date_headers = &#123;</span><br><span class="line">            <span class="string">&quot;referer&quot;</span>: <span class="string">&quot;https://www.bilibili.com/&quot;</span>,</span><br><span class="line">            <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;https://www.bilibili.com&quot;</span>,</span><br><span class="line">            <span class="string">&quot;cookie&quot;</span>: <span class="string">&quot;cookie&quot;</span>,</span><br><span class="line">            <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &quot;</span></span><br><span class="line">                          <span class="string">&quot;Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.66 &quot;</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p><font color=#999AAA >封装函数：</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从接口返回的json中获取到我们的cid 注： cid = oid</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_cid</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 定位到数据data中下面的cid</span></span><br><span class="line">        <span class="keyword">return</span> requests.get(url=self.bv_url, headers=self.comment).json()[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;cid&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析不需要登录的接口 返回类型是xml文件</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_url</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 获取指定视频的cid/oid</span></span><br><span class="line">        cid = self.get_cid()</span><br><span class="line">        <span class="comment"># 对页面进行伪装请求，这里注意不要转换成text，使用二进制</span></span><br><span class="line">        response = requests.get(url=self.barrage_url.<span class="built_in">format</span>(cid), headers=self.comment).content</span><br><span class="line">        <span class="comment"># etree解析</span></span><br><span class="line">        data = etree.HTML(response)</span><br><span class="line">        <span class="comment"># 定位到所有的d元素</span></span><br><span class="line">        barrage_list = data.xpath(<span class="string">&#x27;//d&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> barrage <span class="keyword">in</span> barrage_list:</span><br><span class="line">            <span class="comment"># 获取d元素的p属性值</span></span><br><span class="line">            info = barrage.xpath(<span class="string">&#x27;./@p&#x27;</span>)[<span class="number">0</span>].split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">            <span class="comment"># 获取弹幕内容</span></span><br><span class="line">            content = barrage.xpath(<span class="string">&#x27;./text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            item = &#123;<span class="string">&#x27;出现时间&#x27;</span>: info[<span class="number">0</span>], <span class="string">&#x27;弹幕模式&#x27;</span>: info[<span class="number">1</span>], <span class="string">&#x27;字体大小&#x27;</span>: info[<span class="number">2</span>], <span class="string">&#x27;颜色&#x27;</span>: info[<span class="number">3</span>], <span class="string">&#x27;发送时间&#x27;</span>: info[<span class="number">4</span>], <span class="string">&#x27;弹幕池&#x27;</span>: info[<span class="number">5</span>],</span><br><span class="line">                    <span class="string">&#x27;用户ID&#x27;</span>: info[<span class="number">6</span>], <span class="string">&#x27;rowID&#x27;</span>: info[<span class="number">7</span>], <span class="string">&#x27;内容&#x27;</span>: content&#125;</span><br><span class="line">            <span class="comment"># 因为这只是一部分弹幕 所以就没有进行持久化存储 没有必要</span></span><br><span class="line">            print(item)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 循环爬取所有弹幕 需要传入month的数据 根据视频发布的日期到现在的所有月份</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_date_url</span>(<span class="params">self, month</span>):</span></span><br><span class="line">        <span class="comment"># 存放爬到的数据</span></span><br><span class="line">        result = []</span><br><span class="line">        <span class="comment"># 获取视频的oid</span></span><br><span class="line">        oid = self.get_cid()</span><br><span class="line">        <span class="comment"># 获取日期索引</span></span><br><span class="line">        date_by_month = requests.get(url=self.index_url.<span class="built_in">format</span>(oid, month), headers=self.date_headers).json()[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">        <span class="comment"># 根据日期索引循环请求</span></span><br><span class="line">        <span class="keyword">for</span> day <span class="keyword">in</span> date_by_month:</span><br><span class="line">            <span class="comment"># 注意还是二进制文件</span></span><br><span class="line">            date_page = requests.get(url=self.date_url.<span class="built_in">format</span>(oid, day), headers=self.date_headers).content</span><br><span class="line">            date_data = etree.HTML(date_page)</span><br><span class="line">            <span class="comment"># 解析到到所有的d元素</span></span><br><span class="line">            barrage_list = date_data.xpath(<span class="string">&#x27;//d&#x27;</span>)</span><br><span class="line">            <span class="comment"># 循环解析数据</span></span><br><span class="line">            <span class="keyword">for</span> barrage <span class="keyword">in</span> barrage_list:</span><br><span class="line">                <span class="comment"># 获取d元素的p属性值</span></span><br><span class="line">                things = barrage.xpath(<span class="string">&#x27;./@p&#x27;</span>)[<span class="number">0</span>].split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">                <span class="comment"># 获取弹幕内容 并去掉所有空格</span></span><br><span class="line">                content = barrage.xpath(<span class="string">&#x27;./text()&#x27;</span>)[<span class="number">0</span>].replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">                item = &#123;<span class="string">&#x27;出现时间&#x27;</span>: things[<span class="number">0</span>], <span class="string">&#x27;弹幕模式&#x27;</span>: things[<span class="number">1</span>], <span class="string">&#x27;字体大小&#x27;</span>: things[<span class="number">2</span>], <span class="string">&#x27;颜色&#x27;</span>: things[<span class="number">3</span>], <span class="string">&#x27;发送时间&#x27;</span>: things[<span class="number">4</span>],</span><br><span class="line">                        <span class="string">&#x27;弹幕池&#x27;</span>: things[<span class="number">5</span>],</span><br><span class="line">                        <span class="string">&#x27;用户ID&#x27;</span>: things[<span class="number">6</span>], <span class="string">&#x27;rowID&#x27;</span>: things[<span class="number">7</span>], <span class="string">&#x27;内容&#x27;</span>: content&#125;</span><br><span class="line">                result.append(item)</span><br><span class="line">        <span class="comment"># 返回封装好的数据</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 舍友指导下的一行代码生成词云 编译器自动格式化了 本质还是一行代码</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wordCloud</span>(<span class="params">self</span>):</span></span><br><span class="line">        WordCloud(font_path=<span class="string">&quot;C:/Windows/Fonts/simfang.ttf&quot;</span>, background_color=<span class="string">&#x27;white&#x27;</span>, scale=<span class="number">16</span>).generate(<span class="string">&quot; &quot;</span>.join(</span><br><span class="line">            [c <span class="keyword">for</span> c <span class="keyword">in</span> jieba.cut(<span class="string">&quot;&quot;</span>.join(<span class="built_in">str</span>((pd.read_csv(<span class="string">&#x27;&#123;&#125;弹幕池数据集.csv&#x27;</span>.<span class="built_in">format</span>(self.bv))[<span class="string">&#x27;内容&#x27;</span>]).tolist()))) <span class="keyword">if</span> <span class="built_in">len</span>(c) &gt; <span class="number">1</span>])).to_file(</span><br><span class="line">            <span class="string">&quot;&#123;&#125;词云.png&quot;</span>.<span class="built_in">format</span>(self.bv))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><font color=#999AAA >主函数调用：</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 输入指定的视频bv号</span></span><br><span class="line">    bv_id = <span class="built_in">input</span>(<span class="string">&#x27;输入视频对应的bv号:&#x27;</span>)</span><br><span class="line">    <span class="comment"># new一个对象</span></span><br><span class="line">    spider = BarrageSpider(bv_id)</span><br><span class="line">    <span class="comment"># 请求今年1月和去年12月的数据 并合并数据</span></span><br><span class="line">    one = spider.parse_date_url(<span class="string">&#x27;2021-01&#x27;</span>)</span><br><span class="line">    two = spider.parse_date_url(<span class="string">&#x27;2020-12&#x27;</span>)</span><br><span class="line">    one.extend(two)</span><br><span class="line">    <span class="comment"># 数据格式化处理 并输出csv格式文件</span></span><br><span class="line">    data = pd.DataFrame(one)</span><br><span class="line">    data.drop_duplicates(subset=[<span class="string">&#x27;rowID&#x27;</span>], keep=<span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">    <span class="comment"># 字符集编码需要为utf-8-sig 不然会乱码</span></span><br><span class="line">    data.to_csv(<span class="string">&#x27;&#123;&#125;弹幕池数据集.csv&#x27;</span>.<span class="built_in">format</span>(bv_id), index=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8-sig&#x27;</span>)</span><br><span class="line">    <span class="comment"># 生成词云</span></span><br><span class="line">    spider.wordCloud()</span><br></pre></td></tr></table></figure>



<h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p><img src="https://img-blog.csdnimg.cn/20210104121710597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20210104121629776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到有5000条数据。<br>词云如图：<br><img src="https://img-blog.csdnimg.cn/20210104121736154.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>注：案例仅供学习</strong></p>
]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>爬取豆瓣评论并进行数据可视化</title>
    <url>/posts/31c415b7/</url>
    <content><![CDATA[<font color=#999AAA >
使用python对豆瓣进行评论爬取，并数据可视化
</font>


<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><font color=#999AAA >对豆瓣界面进行分析，没有前后端分离，对界面元素分析后，爬取相关信息并保存在csv表格中，然后进行数据分析。</font></p>
<p><font color=#999AAA >提示：以下是本篇文章正文内容，下面案例可供参考</p>
<h1 id="一、思路分析"><a href="#一、思路分析" class="headerlink" title="一、思路分析"></a>一、思路分析</h1><p>分析豆瓣页面数据，以及怎样实现循环爬取。<br><img src="https://img-blog.csdnimg.cn/20210103191844540.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<a id="more"></a>

<p>解析到class为review-list  的div中，存放着一片div列表，也就是评论界面。<br><img src="https://img-blog.csdnimg.cn/20210103192008970.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>将其中的元素一一对应起来，接下来进行下一页爬取的分析。<br><img src="https://img-blog.csdnimg.cn/20210103192120312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>get请求携带的start参数改变，并且步长是20，也就是20条数据。也就是说，循环请求的地址为：<br><a href="https://movie.douban.com/subject/27069428/reviews?start=0">https://movie.douban.com/subject/27069428/reviews?start=0</a><br><a href="https://movie.douban.com/subject/27069428/reviews?start=20">https://movie.douban.com/subject/27069428/reviews?start=20</a><br><a href="https://movie.douban.com/subject/27069428/reviews?start=40">https://movie.douban.com/subject/27069428/reviews?start=40</a><br><a href="https://movie.douban.com/subject/27069428/reviews?start=60">https://movie.douban.com/subject/27069428/reviews?start=60</a><br>……<br>接下来进行代码的编写。</p>
<h1 id="二、代码编写"><a href="#二、代码编写" class="headerlink" title="二、代码编写"></a>二、代码编写</h1><h2 id="1-引入库"><a href="#1-引入库" class="headerlink" title="1.引入库"></a>1.引入库</h2><p><font color=#999AAA >代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 伪装头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: UserAgent().random,</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;movie.douban.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 遍历用的url模板</span></span><br><span class="line">base_url = <span class="string">&#x27;https://movie.douban.com/subject/27069428/reviews?start=&#123;&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 代理池</span></span><br><span class="line">proxy_pool = [&#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://123.169.118.8:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://175.43.154.137:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://117.91.165.126:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://113.124.86.125:9999&#x27;</span>&#125;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="2-解析页面数据"><a href="#2-解析页面数据" class="headerlink" title="2.解析页面数据"></a>2.解析页面数据</h2><p><font color=#999AAA >代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_detail</span>(<span class="params">url</span>):</span></span><br><span class="line">	<span class="comment"># 网页请求</span></span><br><span class="line">    response = requests.get(url=url, headers=headers, proxies=random.choice(proxy_pool)).text</span><br><span class="line">    response_data = etree.HTML(response)</span><br><span class="line">    <span class="comment"># etree解析网页 获得评论的div列表</span></span><br><span class="line">    div_list = response_data.xpath(<span class="string">&#x27;//div[@class=&quot;review-list  &quot;]/div&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> div <span class="keyword">in</span> div_list:</span><br><span class="line">        <span class="comment"># 获取对应的数据 评论人 评价 评论时间 评论标题 评论主体 赞成数 反对数 回复数</span></span><br><span class="line">        name = div.xpath(<span class="string">&#x27;./div/header/a[@class=&quot;name&quot;]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        level = div.xpath(<span class="string">&#x27;./div/header/span[1]/@title&#x27;</span>)</span><br><span class="line">        <span class="comment"># 有的评价为空 list列表取[0]会报错</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(level):</span><br><span class="line">            level = level[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            level = <span class="string">&#x27;暂无评价&#x27;</span></span><br><span class="line">        time = div.xpath(<span class="string">&#x27;./div/header/span[@class=&quot;main-meta&quot;]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        title = div.xpath(<span class="string">&#x27;./div/div/h2/a/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        content = <span class="string">&quot;&quot;</span>.join(div.xpath(<span class="string">&#x27;./div/div/div[1]/div[@class=&quot;short-content&quot;]/text()&#x27;</span>)).replace(<span class="string">&quot;\n&quot;</span>,</span><br><span class="line">                                                            <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>).split(<span class="string">&quot;...&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">        up = div.xpath(<span class="string">&#x27;./div/div/div[@class=&quot;action&quot;]/a[1]/span/text()&#x27;</span>)[<span class="number">0</span>].replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        down = div.xpath(<span class="string">&#x27;./div/div/div[@class=&quot;action&quot;]/a[2]/span/text()&#x27;</span>)[<span class="number">0</span>].replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        reply = div.xpath(<span class="string">&#x27;./div/div/div[@class=&quot;action&quot;]/a[3]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        detail = [name, level, time, title, content, up, down, reply]</span><br><span class="line">        <span class="comment"># 返回对应的一条数据</span></span><br><span class="line">        <span class="keyword">yield</span> detail</span><br></pre></td></tr></table></figure>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h2 id="3-编写主函数"><a href="#3-编写主函数" class="headerlink" title="3.编写主函数"></a>3.编写主函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 打开表格文件 注意编码格式</span></span><br><span class="line">    file = <span class="built_in">open</span>(<span class="string">&#x27;有翡.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>, encoding=<span class="string">&#x27;utf-8-sig&#x27;</span>)</span><br><span class="line">    writer = csv.writer(file)</span><br><span class="line">    <span class="comment"># 写表格的头部</span></span><br><span class="line">    writer.writerow([<span class="string">&#x27;评论人&#x27;</span>, <span class="string">&#x27;评价&#x27;</span>, <span class="string">&#x27;评论时间&#x27;</span>, <span class="string">&#x27;评论标题&#x27;</span>, <span class="string">&#x27;评论主体&#x27;</span>, <span class="string">&#x27;赞成数&#x27;</span>, <span class="string">&#x27;反对数&#x27;</span>, <span class="string">&#x27;回复数&#x27;</span>])</span><br><span class="line">    <span class="comment"># 循环遍历 爬取所有评论</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">1101</span>, <span class="number">20</span>):</span><br><span class="line">        print(<span class="string">&#x27;正在爬取start=&#123;&#125;的数据&#x27;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">        <span class="comment"># 获得返回的数据</span></span><br><span class="line">        res = get_detail(base_url.<span class="built_in">format</span>(i))</span><br><span class="line">        <span class="comment"># 数据写入</span></span><br><span class="line">        writer.writerows(res)</span><br></pre></td></tr></table></figure>
<p>结果表格为：<br><img src="https://img-blog.csdnimg.cn/20210103192914142.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h2 id="4-词云"><a href="#4-词云" class="headerlink" title="4.词云"></a>4.词云</h2><p>直接上代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line">all_content = <span class="string">&#x27;&#x27;</span></span><br><span class="line">list_txt = []</span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;test.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data[<span class="string">&#x27;评论标题&#x27;</span>]:</span><br><span class="line">    all_content += <span class="built_in">str</span>(i)</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> jieba.cut(all_content):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(c) &gt;= <span class="number">2</span>:</span><br><span class="line">        list_txt.append(c)</span><br><span class="line">cut_text = <span class="string">&quot; &quot;</span>.join(list_txt)</span><br><span class="line">wordcloud = WordCloud(font_path=<span class="string">&quot;C:/Windows/Fonts/simfang.ttf&quot;</span>,</span><br><span class="line">                      background_color=<span class="string">&#x27;white&#x27;</span>,</span><br><span class="line">                      scale=<span class="number">32</span>,</span><br><span class="line">                      mode=<span class="string">&#x27;RGBA&#x27;</span>,</span><br><span class="line">                      margin=<span class="number">1</span>).generate(cut_text)</span><br><span class="line">filename = <span class="string">&quot;test.png&quot;</span></span><br><span class="line">wordcloud.to_file(filename)</span><br><span class="line">os.startfile(filename)</span><br></pre></td></tr></table></figure>
<p><strong>两张结果图片分别为：</strong></p>
<p>评论标题：<br><img src="https://img-blog.csdnimg.cn/20210103193316430.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>评论主体：<br><img src="https://img-blog.csdnimg.cn/20210103193418469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在舍友的指点下，成功将词云的代码只用一行实现，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line">WordCloud(font_path=<span class="string">&quot;C:/Windows/Fonts/simfang.ttf&quot;</span>, background_color=<span class="string">&#x27;white&#x27;</span>, scale=<span class="number">16</span>).generate(<span class="string">&quot; &quot;</span>.join([c <span class="keyword">for</span> c <span class="keyword">in</span> jieba.cut(<span class="string">&quot;&quot;</span>.join(<span class="built_in">str</span>((pd.read_csv(<span class="string">&#x27;test.csv&#x27;</span>)[<span class="string">&#x27;评论主体&#x27;</span>]).tolist()))) <span class="keyword">if</span> <span class="built_in">len</span>(c) &gt; <span class="number">1</span>])).to_file(<span class="string">&quot;test.png&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="5-评分柱状图"><a href="#5-评分柱状图" class="headerlink" title="5.评分柱状图"></a>5.评分柱状图</h2><p>数据清洗直接上代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;test.csv&#x27;</span>)[<span class="string">&#x27;评价&#x27;</span>]</span><br><span class="line">star = []</span><br><span class="line"><span class="keyword">for</span> level <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">if</span> level == <span class="string">&#x27;力荐&#x27;</span>:</span><br><span class="line">        star.append(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">elif</span> level == <span class="string">&#x27;推荐&#x27;</span>:</span><br><span class="line">        star.append(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">elif</span> level == <span class="string">&#x27;还行&#x27;</span>:</span><br><span class="line">        star.append(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">elif</span> level == <span class="string">&#x27;较差&#x27;</span>:</span><br><span class="line">        star.append(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">elif</span> level == <span class="string">&#x27;很差&#x27;</span>:</span><br><span class="line">        star.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        star.append(<span class="number">0</span>)</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">plt.hist(star, bins=<span class="number">17</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;评价等级（0表示没有评分）&#x27;</span>, size=<span class="number">18</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;人数&#x27;</span>, size=<span class="number">20</span>)</span><br><span class="line">plt.savefig(<span class="string">&#x27;评分.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>结果图：<br><img src="https://img-blog.csdnimg.cn/20210103194704217.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><font color=#999AAA >以上就是今天要讲的内容，本文仅仅简单介绍了爬虫的使用和数据可视化的冰山一角，以后再见吧！<br><strong>注：案例仅供学习</strong></p>
]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>爬取链家二手房信息并存储到数据库</title>
    <url>/posts/2e361f77/</url>
    <content><![CDATA[<font color=#999AAA >
爬取链家的二手房信息，存储到数据库方便以后查看
</font>


<h1 id="页面分析"><a href="#页面分析" class="headerlink" title="页面分析"></a>页面分析</h1><p><font color=#999AAA >分析页面后发现是前后端未分离的状态，所以需要使用xpath分析界面元素</font><br><img src="https://img-blog.csdnimg.cn/20210103184811880.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<a id="more"></a>

<p>在li中存放着对应的div，有相关的信息：<br><img src="https://img-blog.csdnimg.cn/2021010318494381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>分析请求链接：<br><img src="https://img-blog.csdnimg.cn/20210103185129747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>只需要更改pg后面的数字即可，页面分析完毕。</p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<p><font color=#999AAA >提示：以下是本篇文章正文内容，下面案例可供参考</p>
<h1 id="引入库"><a href="#引入库" class="headerlink" title="引入库"></a>引入库</h1><p><font color=#999AAA >代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代理池</span></span><br><span class="line">proxy_pool = [&#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;175.43.151.3:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;220.249.149.140:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;175.44.108.206:9999&#x27;</span>&#125;,</span><br><span class="line">              &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;120.83.101.115:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;175.42.122.233:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;60.13.42.107:9999&#x27;</span>&#125;,</span><br><span class="line">              &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;113.195.152.127:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;36.248.133.196:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;120.83.105.95:9999&#x27;</span>&#125;,</span><br><span class="line">              &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;112.111.217.160:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;171.12.221.158:9999&#x27;</span>&#125;, &#123;<span class="string">&#x27;HTTP&#x27;</span>: <span class="string">&#x27;113.121.72.221:9999&#x27;</span>&#125;]</span><br><span class="line"><span class="comment"># 伪装头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;nj.lianjia.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: UserAgent().random</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 开启数据库</span></span><br><span class="line">conn = pymysql.Connect(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">3306</span>, user=<span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">                       password=<span class="string">&#x27;数据库密码&#x27;</span>, db=<span class="string">&#x27;对应数据库&#x27;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="方法编写"><a href="#方法编写" class="headerlink" title="方法编写"></a>方法编写</h1><p><font color=#999AAA >代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span>(<span class="params">url</span>):</span></span><br><span class="line">	<span class="comment"># 请求页面</span></span><br><span class="line">    response = requests.get(url=url, headers=headers, proxies=random.choice(proxy_pool)).text</span><br><span class="line">    <span class="comment"># 使用etree解析对象</span></span><br><span class="line">    parse_data = etree.HTML(response)</span><br><span class="line">    <span class="comment"># 获取li的列表</span></span><br><span class="line">    li_list = parse_data.xpath(<span class="string">&#x27;//ul[@class=&quot;sellListContent&quot;]/li&#x27;</span>)</span><br><span class="line">    <span class="comment"># 循环</span></span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">    	<span class="comment"># 标题</span></span><br><span class="line">        title = li.xpath(<span class="string">&#x27;./div[@class=&quot;info clear&quot;]/div[@class=&quot;title&quot;]/a/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 地址</span></span><br><span class="line">        flood = li.xpath(<span class="string">&#x27;./div[@class=&quot;info clear&quot;]/div[@class=&quot;flood&quot;]/div[@class=&quot;positionInfo&quot;]/a[1]/text()&#x27;</span>)[<span class="number">0</span>] + \</span><br><span class="line">                <span class="string">&#x27;- &#x27;</span> + \</span><br><span class="line">                li.xpath(<span class="string">&#x27;./div[@class=&quot;info clear&quot;]/div[@class=&quot;flood&quot;]/div[@class=&quot;positionInfo&quot;]/a[2]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 房型描述</span></span><br><span class="line">        address = li.xpath(<span class="string">&#x27;./div[@class=&quot;info clear&quot;]/div[@class=&quot;address&quot;]/div[@class=&quot;houseInfo&quot;]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 状态</span></span><br><span class="line">        followInfo = li.xpath(<span class="string">&#x27;./div[@class=&quot;info clear&quot;]/div[@class=&quot;followInfo&quot;]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 总价</span></span><br><span class="line">        totalPrice = li.xpath(<span class="string">&#x27;./div[@class=&quot;info clear&quot;]/div[@class=&quot;priceInfo&quot;]/div[@class=&quot;totalPrice&quot;]/span[&#x27;</span></span><br><span class="line">                              <span class="string">&#x27;1]/text()&#x27;</span>)[<span class="number">0</span>] + <span class="string">&#x27;万&#x27;</span></span><br><span class="line">        <span class="comment"># 单价</span></span><br><span class="line">        unitPrice = li.xpath(<span class="string">&#x27;./div[@class=&quot;info clear&quot;]/div[@class=&quot;priceInfo&quot;]/div[@class=&quot;unitPrice&quot;]/span[1]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># mysql数据库操作语句</span></span><br><span class="line">        sql = <span class="string">&#x27;insert into lianjia(title, flood, address, followInfo,totalPrice, unitPrice) &#x27;</span> \</span><br><span class="line">              <span class="string">&#x27;values (&quot;&#123;&#125;&quot;, &quot;&#123;&#125;&quot;, &quot;&#123;&#125;&quot;, &quot;&#123;&#125;&quot;, &quot;&#123;&#125;&quot;, &quot;&#123;&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(title, flood, address, followInfo, totalPrice, unitPrice)</span><br><span class="line">        cursor = conn.cursor()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">        	<span class="comment"># 执行语句</span></span><br><span class="line">            cursor.execute(sql)</span><br><span class="line">            <span class="comment"># 事务</span></span><br><span class="line">            conn.commit()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            <span class="comment"># 异常则回滚，保证数据安全</span></span><br><span class="line">            conn.rollback()</span><br></pre></td></tr></table></figure>
<h1 id="主函数编写"><a href="#主函数编写" class="headerlink" title="主函数编写"></a>主函数编写</h1><p><font color=#999AAA >代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	<span class="comment"># 数据库模板</span></span><br><span class="line">    base_url = <span class="string">&#x27;https://nj.lianjia.com/ershoufang/pg&#123;&#125;/&#x27;</span></span><br><span class="line">    <span class="comment"># 循环遍历</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">        get_page(base_url.<span class="built_in">format</span>(i))</span><br><span class="line">        print(<span class="string">&#x27;正在存储第&#123;&#125;条&#x27;</span>.<span class="built_in">format</span>(i) + <span class="string">&#x27;....&#x27;</span>)</span><br><span class="line">    <span class="comment"># 关闭数据库链接</span></span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p><img src="https://img-blog.csdnimg.cn/20210103190350411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>对其进行条件查找，找出自己想要的数据：<br><img src="https://img-blog.csdnimg.cn/20210103190905199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>注：案例仅供学习</strong></p>
]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>百度翻译js逆向</title>
    <url>/posts/c39daa58/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20210114115804948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>对百度翻译的js逆向爬虫分析。</p>
<a id="more"></a>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><font color=#999AAA >在有道翻译的基础上对百度翻译进行js逆向</font><br><font color=#999AAA >以下是本篇文章正文内容，下面案例可供参考</p>
<h1 id="一、分析接口"><a href="#一、分析接口" class="headerlink" title="一、分析接口"></a>一、分析接口</h1><p>在输入框输入英文，在自带的抓包工具中可以看到有一个新的异步请求：<br><img src="https://img-blog.csdnimg.cn/20210114115804948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到这里是需要cookie和token的：<br><img src="https://img-blog.csdnimg.cn/20210114115853560.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210114120028733.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>进行全局搜索sign：<br><img src="https://img-blog.csdnimg.cn/20210114120407509.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到这里就是我们传进去的参数，我们进行格式化，并找到相应的语句打断点：<br><img src="https://img-blog.csdnimg.cn/20210114120610152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到n就是我们输入的数据，token是根据 window.common.token生成的，simple_means_flag始终为 3，transtype始终为realtime。<br>我们最后解决一下sign生成的问题，看一下生成的函数：<br><img src="https://img-blog.csdnimg.cn/20210114120853522.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到函数很长，我们使用python进行模拟的话，工作量是很大的，于是使用第三方库直接编译js，并分析函数过程中需要哪些值，要传哪些参数。<br>运行中发现缺少i的值，是不变的，于是补齐：<br><img src="https://img-blog.csdnimg.cn/20210114121216367.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>又发现有一个函数n没有定义：<br><img src="https://img-blog.csdnimg.cn/20210114121314159.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>定位到n所在的位置，就在函数e的上方，并在js文件中补齐：<br><img src="https://img-blog.csdnimg.cn/20210114121350149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>到此分析已经结束，接下来进行代码的编写。</p>
<h1 id="二、代码编写"><a href="#二、代码编写" class="headerlink" title="二、代码编写"></a>二、代码编写</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模仿JavaScript生成sign参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sign</span>(<span class="params">word</span>):</span></span><br><span class="line">    <span class="comment"># 打开js文件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.js&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> js:</span><br><span class="line">        js_code = js.read()</span><br><span class="line">    <span class="comment"># 运行 js 文件</span></span><br><span class="line">    sign = execjs.<span class="built_in">compile</span>(js_code).call(<span class="string">&#x27;e&#x27;</span>, word)</span><br><span class="line">    <span class="comment"># 返回参数</span></span><br><span class="line">    <span class="keyword">return</span> sign</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求百度翻译接口</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request</span>(<span class="params">word</span>):</span></span><br><span class="line">    <span class="comment"># 中英文识别</span></span><br><span class="line">    <span class="keyword">if</span> word[<span class="number">0</span>] <span class="keyword">in</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>]:</span><br><span class="line">        f = <span class="string">&#x27;en&#x27;</span></span><br><span class="line">        t = <span class="string">&#x27;zh&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f = <span class="string">&#x27;zh&#x27;</span></span><br><span class="line">        t = <span class="string">&#x27;en&#x27;</span></span><br><span class="line">    <span class="comment"># 获取sign</span></span><br><span class="line">    sign = get_sign(word)</span><br><span class="line">    url = <span class="string">&#x27;https://fanyi.baidu.com/v2transapi?from=en&amp;to=zh&#x27;</span></span><br><span class="line">    <span class="comment"># 伪装头</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;cookie&#x27;</span>: <span class="string">&#x27;你的cookie&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;Chrome/87.0.4280.141 Safari/537.36 Edg/87.0.664.75 &#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># post提交的参数</span></span><br><span class="line">    formData = &#123;</span><br><span class="line">        <span class="string">&#x27;from&#x27;</span>: f,</span><br><span class="line">        <span class="string">&#x27;to&#x27;</span>: t,</span><br><span class="line">        <span class="string">&#x27;query&#x27;</span>: word,</span><br><span class="line">        <span class="string">&#x27;transtype&#x27;</span>: <span class="string">&#x27;realtime&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;simple_means_flag&#x27;</span>: <span class="string">&#x27;3&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sign&#x27;</span>: sign,</span><br><span class="line">        <span class="string">&#x27;token&#x27;</span>: <span class="string">&#x27;你的token&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;domain&#x27;</span>: <span class="string">&#x27;common&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 请求 并转json</span></span><br><span class="line">    response = requests.post(url=url, headers=headers, data=formData).json()</span><br><span class="line">    <span class="comment"># json数据分析</span></span><br><span class="line">    <span class="keyword">if</span> response.get(<span class="string">&#x27;liju_result&#x27;</span>).get(<span class="string">&#x27;tag&#x27;</span>):</span><br><span class="line">        print(<span class="string">&#x27;, &#x27;</span>.join(response.get(<span class="string">&#x27;liju_result&#x27;</span>).get(<span class="string">&#x27;tag&#x27;</span>)))</span><br><span class="line">    <span class="keyword">if</span> response.get(<span class="string">&#x27;trans_result&#x27;</span>).get(<span class="string">&#x27;data&#x27;</span>):</span><br><span class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> response.get(<span class="string">&#x27;trans_result&#x27;</span>).get(<span class="string">&#x27;data&#x27;</span>):</span><br><span class="line">            print(d[<span class="string">&#x27;dst&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        word = <span class="built_in">input</span>(<span class="string">&#x27;请输入需要翻译的英文（中文）：&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> word == <span class="string">&#x27;exit0&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        request(word)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>下面是JavaScript代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params">r</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="string">&#x27;320305.131321201&#x27;</span></span><br><span class="line">    <span class="keyword">var</span> o = r.match(<span class="regexp">/[\uD800-\uDBFF][\uDC00-\uDFFF]/g</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> === o) &#123;</span><br><span class="line">        <span class="keyword">var</span> t = r.length;</span><br><span class="line">        t &gt; <span class="number">30</span> &amp;&amp; (r = <span class="string">&quot;&quot;</span> + r.substr(<span class="number">0</span>, <span class="number">10</span>) + r.substr(<span class="built_in">Math</span>.floor(t / <span class="number">2</span>) - <span class="number">5</span>, <span class="number">10</span>) + r.substr(-<span class="number">10</span>, <span class="number">10</span>))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> e = r.split(<span class="regexp">/[\uD800-\uDBFF][\uDC00-\uDFFF]/</span>), C = <span class="number">0</span>, h = e.length, f = []; h &gt; C; C++)</span><br><span class="line">            <span class="string">&quot;&quot;</span> !== e[C] &amp;&amp; f.push.apply(f, a(e[C].split(<span class="string">&quot;&quot;</span>))),</span><br><span class="line">            C !== h - <span class="number">1</span> &amp;&amp; f.push(o[C]);</span><br><span class="line">        <span class="keyword">var</span> g = f.length;</span><br><span class="line">        g &gt; <span class="number">30</span> &amp;&amp; (r = f.slice(<span class="number">0</span>, <span class="number">10</span>).join(<span class="string">&quot;&quot;</span>) + f.slice(<span class="built_in">Math</span>.floor(g / <span class="number">2</span>) - <span class="number">5</span>, <span class="built_in">Math</span>.floor(g / <span class="number">2</span>) + <span class="number">5</span>).join(<span class="string">&quot;&quot;</span>) + f.slice(-<span class="number">10</span>).join(<span class="string">&quot;&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> u = <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">      , l = <span class="string">&quot;&quot;</span> + <span class="built_in">String</span>.fromCharCode(<span class="number">103</span>) + <span class="built_in">String</span>.fromCharCode(<span class="number">116</span>) + <span class="built_in">String</span>.fromCharCode(<span class="number">107</span>);</span><br><span class="line">    u = <span class="literal">null</span> !== i ? i : (i = <span class="built_in">window</span>[l] || <span class="string">&quot;&quot;</span>) || <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> d = u.split(<span class="string">&quot;.&quot;</span>), m = <span class="built_in">Number</span>(d[<span class="number">0</span>]) || <span class="number">0</span>, s = <span class="built_in">Number</span>(d[<span class="number">1</span>]) || <span class="number">0</span>, S = [], c = <span class="number">0</span>, v = <span class="number">0</span>; v &lt; r.length; v++) &#123;</span><br><span class="line">        <span class="keyword">var</span> A = r.charCodeAt(v);</span><br><span class="line">        <span class="number">128</span> &gt; A ? S[c++] = A : (<span class="number">2048</span> &gt; A ? S[c++] = A &gt;&gt; <span class="number">6</span> | <span class="number">192</span> : (<span class="number">55296</span> === (<span class="number">64512</span> &amp; A) &amp;&amp; v + <span class="number">1</span> &lt; r.length &amp;&amp; <span class="number">56320</span> === (<span class="number">64512</span> &amp; r.charCodeAt(v + <span class="number">1</span>)) ? (A = <span class="number">65536</span> + ((<span class="number">1023</span> &amp; A) &lt;&lt; <span class="number">10</span>) + (<span class="number">1023</span> &amp; r.charCodeAt(++v)),</span><br><span class="line">        S[c++] = A &gt;&gt; <span class="number">18</span> | <span class="number">240</span>,</span><br><span class="line">        S[c++] = A &gt;&gt; <span class="number">12</span> &amp; <span class="number">63</span> | <span class="number">128</span>) : S[c++] = A &gt;&gt; <span class="number">12</span> | <span class="number">224</span>,</span><br><span class="line">        S[c++] = A &gt;&gt; <span class="number">6</span> &amp; <span class="number">63</span> | <span class="number">128</span>),</span><br><span class="line">        S[c++] = <span class="number">63</span> &amp; A | <span class="number">128</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> p = m, F = <span class="string">&quot;&quot;</span> + <span class="built_in">String</span>.fromCharCode(<span class="number">43</span>) + <span class="built_in">String</span>.fromCharCode(<span class="number">45</span>) + <span class="built_in">String</span>.fromCharCode(<span class="number">97</span>) + (<span class="string">&quot;&quot;</span> + <span class="built_in">String</span>.fromCharCode(<span class="number">94</span>) + <span class="built_in">String</span>.fromCharCode(<span class="number">43</span>) + <span class="built_in">String</span>.fromCharCode(<span class="number">54</span>)), D = <span class="string">&quot;&quot;</span> + <span class="built_in">String</span>.fromCharCode(<span class="number">43</span>) + <span class="built_in">String</span>.fromCharCode(<span class="number">45</span>) + <span class="built_in">String</span>.fromCharCode(<span class="number">51</span>) + (<span class="string">&quot;&quot;</span> + <span class="built_in">String</span>.fromCharCode(<span class="number">94</span>) + <span class="built_in">String</span>.fromCharCode(<span class="number">43</span>) + <span class="built_in">String</span>.fromCharCode(<span class="number">98</span>)) + (<span class="string">&quot;&quot;</span> + <span class="built_in">String</span>.fromCharCode(<span class="number">43</span>) + <span class="built_in">String</span>.fromCharCode(<span class="number">45</span>) + <span class="built_in">String</span>.fromCharCode(<span class="number">102</span>)), b = <span class="number">0</span>; b &lt; S.length; b++)</span><br><span class="line">        p += S[b],</span><br><span class="line">        p = n(p, F);</span><br><span class="line">    <span class="keyword">return</span> p = n(p, D),</span><br><span class="line">    p ^= s,</span><br><span class="line">    <span class="number">0</span> &gt; p &amp;&amp; (p = (<span class="number">2147483647</span> &amp; p) + <span class="number">2147483648</span>),</span><br><span class="line">    p %= <span class="number">1e6</span>,</span><br><span class="line">    p.toString() + <span class="string">&quot;.&quot;</span> + (p ^ m)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params">r, o</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="number">0</span>; t &lt; o.length - <span class="number">2</span>; t += <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> a = o.charAt(t + <span class="number">2</span>);</span><br><span class="line">        a = a &gt;= <span class="string">&quot;a&quot;</span> ? a.charCodeAt(<span class="number">0</span>) - <span class="number">87</span> : <span class="built_in">Number</span>(a),</span><br><span class="line">        a = <span class="string">&quot;+&quot;</span> === o.charAt(t + <span class="number">1</span>) ? r &gt;&gt;&gt; a : r &lt;&lt; a,</span><br><span class="line">        r = <span class="string">&quot;+&quot;</span> === o.charAt(t) ? r + a &amp; <span class="number">4294967295</span> : r ^ a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p><img src="https://img-blog.csdnimg.cn/20210114122048371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lRmlzaG1hbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>爬虫学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
